/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PageFormatType Размещение ярлыков на странице PDF-файла:  * `A9_HORIZONTALLY` — ярлык размером 58 × 40 мм без полей, близок к формату A9.    {% cut \"Пример ярлыка для продавцов Маркета\" %}    ![Изображение горизонтального ярлыка формата A9 для продавцов Маркета](../../_images/labels/label-A9-horizontally.png)    {% endcut %}    {% cut \"Пример ярлыка для продавцов Market Yandex Go\" %}    ![Изображение горизонтального ярлыка формата A9 для продавцов Market Yandex Go](../../_images/labels/label-A9-horizontally-uz.png)    {% endcut %}  * `A9` — ярлык размером 40 × 58 мм без полей, близок к формату A9.    {% cut \"Пример ярлыка для продавцов Маркета\" %}    ![Изображение вертикального ярлыка формата A9 для продавцов Маркета](../../_images/labels/label-A9.png)    {% endcut %}    {% cut \"Пример ярлыка для продавцов Market Yandex Go\" %}    ![Изображение вертикального ярлыка формата A9 для продавцов Market Yandex Go](../../_images/labels/label-A9-uz.png)    {% endcut %}  * `A7` — ярлык размером 75 × 120 мм (80,4 × 125,6 мм с учетом полей), близок к формату A7.    {% cut \"Пример ярлыка для продавцов Маркета\" %}    ![Изображение ярлыка формата A7 для продавцов Маркета](../../_images/labels/label-A7.jpg)    {% endcut %}    {% cut \"Пример ярлыка для продавцов Market Yandex Go\" %}    ![Изображение ярлыка формата A7 для продавцов Market Yandex Go](../../_images/labels/label-A7-uz.png)    {% endcut %}  * `A4` — на листе A4 располагается ярлык того формата, который выбран в кабинете продавца на Маркете — перейдите на страницу **Заказы** → **Заказы и отгрузки** → на вкладке нужной модели работы нажмите кнопку **Формат ярлыков**.
type PageFormatType string

// List of PageFormatType
const (
	PageFormatType_A9_HORIZONTALLY PageFormatType = "A9_HORIZONTALLY"
	PageFormatType_A9              PageFormatType = "A9"
	PageFormatType_A7              PageFormatType = "A7"
	PageFormatType_A4              PageFormatType = "A4"
)

// All allowed values of PageFormatType enum
var AllowedPageFormatTypeEnumValues = []PageFormatType{
	"A9_HORIZONTALLY",
	"A9",
	"A7",
	"A4",
}

func (v *PageFormatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PageFormatType(value)
	for _, existing := range AllowedPageFormatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PageFormatType", value)
}

// NewPageFormatTypeFromValue returns a pointer to a valid PageFormatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPageFormatTypeFromValue(v string) (*PageFormatType, error) {
	ev := PageFormatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PageFormatType: valid values are %v", v, AllowedPageFormatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PageFormatType) IsValid() bool {
	for _, existing := range AllowedPageFormatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PageFormatType value
func (v PageFormatType) Ptr() *PageFormatType {
	return &v
}

type NullablePageFormatType struct {
	value *PageFormatType
	isSet bool
}

func (v NullablePageFormatType) Get() *PageFormatType {
	return v.value
}

func (v *NullablePageFormatType) Set(val *PageFormatType) {
	v.value = val
	v.isSet = true
}

func (v NullablePageFormatType) IsSet() bool {
	return v.isSet
}

func (v *NullablePageFormatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageFormatType(val *PageFormatType) *NullablePageFormatType {
	return &NullablePageFormatType{value: val, isSet: true}
}

func (v NullablePageFormatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageFormatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
