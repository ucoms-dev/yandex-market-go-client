/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SetReturnDecisionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetReturnDecisionRequest{}

// SetReturnDecisionRequest Решения по товару в возврате.
type SetReturnDecisionRequest struct {
	// Идентификатор товара в возврате.
	ReturnItemId int64                     `json:"returnItemId"`
	DecisionType ReturnRequestDecisionType `json:"decisionType"`
	// Комментарий к решению. Укажите:  * для `REFUND_MONEY_INCLUDING_SHIPMENT`— стоимость обратной пересылки.  * для `REPAIR` — когда вы устраните недостатки товара.  * для `DECLINE_REFUND` — причину отказа.  * для `OTHER_DECISION` — какое решение вы предлагаете.
	Comment *string `json:"comment,omitempty"`
}

type _SetReturnDecisionRequest SetReturnDecisionRequest

// NewSetReturnDecisionRequest instantiates a new SetReturnDecisionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetReturnDecisionRequest(returnItemId int64, decisionType ReturnRequestDecisionType) *SetReturnDecisionRequest {
	this := SetReturnDecisionRequest{}
	this.ReturnItemId = returnItemId
	this.DecisionType = decisionType
	return &this
}

// NewSetReturnDecisionRequestWithDefaults instantiates a new SetReturnDecisionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetReturnDecisionRequestWithDefaults() *SetReturnDecisionRequest {
	this := SetReturnDecisionRequest{}
	return &this
}

// GetReturnItemId returns the ReturnItemId field value
func (o *SetReturnDecisionRequest) GetReturnItemId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ReturnItemId
}

// GetReturnItemIdOk returns a tuple with the ReturnItemId field value
// and a boolean to check if the value has been set.
func (o *SetReturnDecisionRequest) GetReturnItemIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReturnItemId, true
}

// SetReturnItemId sets field value
func (o *SetReturnDecisionRequest) SetReturnItemId(v int64) {
	o.ReturnItemId = v
}

// GetDecisionType returns the DecisionType field value
func (o *SetReturnDecisionRequest) GetDecisionType() ReturnRequestDecisionType {
	if o == nil {
		var ret ReturnRequestDecisionType
		return ret
	}

	return o.DecisionType
}

// GetDecisionTypeOk returns a tuple with the DecisionType field value
// and a boolean to check if the value has been set.
func (o *SetReturnDecisionRequest) GetDecisionTypeOk() (*ReturnRequestDecisionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DecisionType, true
}

// SetDecisionType sets field value
func (o *SetReturnDecisionRequest) SetDecisionType(v ReturnRequestDecisionType) {
	o.DecisionType = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *SetReturnDecisionRequest) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetReturnDecisionRequest) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *SetReturnDecisionRequest) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *SetReturnDecisionRequest) SetComment(v string) {
	o.Comment = &v
}

func (o SetReturnDecisionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetReturnDecisionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["returnItemId"] = o.ReturnItemId
	toSerialize["decisionType"] = o.DecisionType
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

func (o *SetReturnDecisionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"returnItemId",
		"decisionType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetReturnDecisionRequest := _SetReturnDecisionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varSetReturnDecisionRequest)

	if err != nil {
		return err
	}

	*o = SetReturnDecisionRequest(varSetReturnDecisionRequest)

	return err
}

type NullableSetReturnDecisionRequest struct {
	value *SetReturnDecisionRequest
	isSet bool
}

func (v NullableSetReturnDecisionRequest) Get() *SetReturnDecisionRequest {
	return v.value
}

func (v *NullableSetReturnDecisionRequest) Set(val *SetReturnDecisionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetReturnDecisionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetReturnDecisionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetReturnDecisionRequest(val *SetReturnDecisionRequest) *NullableSetReturnDecisionRequest {
	return &NullableSetReturnDecisionRequest{value: val, isSet: true}
}

func (v NullableSetReturnDecisionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetReturnDecisionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
