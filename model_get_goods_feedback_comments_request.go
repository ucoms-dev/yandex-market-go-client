/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetGoodsFeedbackCommentsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetGoodsFeedbackCommentsRequest{}

// GetGoodsFeedbackCommentsRequest Фильтр запроса комментариев отзыва.
type GetGoodsFeedbackCommentsRequest struct {
	// Идентификатор отзыва.
	FeedbackId *int64 `json:"feedbackId,omitempty"`
	// Идентификаторы комментариев.  ⚠️ Не используйте это поле одновременно с другими фильтрами. Если вы хотите воспользоваться ими, оставьте поле пустым.
	CommentIds []int64 `json:"commentIds,omitempty"`
}

// NewGetGoodsFeedbackCommentsRequest instantiates a new GetGoodsFeedbackCommentsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetGoodsFeedbackCommentsRequest() *GetGoodsFeedbackCommentsRequest {
	this := GetGoodsFeedbackCommentsRequest{}
	return &this
}

// NewGetGoodsFeedbackCommentsRequestWithDefaults instantiates a new GetGoodsFeedbackCommentsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetGoodsFeedbackCommentsRequestWithDefaults() *GetGoodsFeedbackCommentsRequest {
	this := GetGoodsFeedbackCommentsRequest{}
	return &this
}

// GetFeedbackId returns the FeedbackId field value if set, zero value otherwise.
func (o *GetGoodsFeedbackCommentsRequest) GetFeedbackId() int64 {
	if o == nil || IsNil(o.FeedbackId) {
		var ret int64
		return ret
	}
	return *o.FeedbackId
}

// GetFeedbackIdOk returns a tuple with the FeedbackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetGoodsFeedbackCommentsRequest) GetFeedbackIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FeedbackId) {
		return nil, false
	}
	return o.FeedbackId, true
}

// HasFeedbackId returns a boolean if a field has been set.
func (o *GetGoodsFeedbackCommentsRequest) HasFeedbackId() bool {
	if o != nil && !IsNil(o.FeedbackId) {
		return true
	}

	return false
}

// SetFeedbackId gets a reference to the given int64 and assigns it to the FeedbackId field.
func (o *GetGoodsFeedbackCommentsRequest) SetFeedbackId(v int64) {
	o.FeedbackId = &v
}

// GetCommentIds returns the CommentIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGoodsFeedbackCommentsRequest) GetCommentIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.CommentIds
}

// GetCommentIdsOk returns a tuple with the CommentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGoodsFeedbackCommentsRequest) GetCommentIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.CommentIds) {
		return nil, false
	}
	return o.CommentIds, true
}

// HasCommentIds returns a boolean if a field has been set.
func (o *GetGoodsFeedbackCommentsRequest) HasCommentIds() bool {
	if o != nil && !IsNil(o.CommentIds) {
		return true
	}

	return false
}

// SetCommentIds gets a reference to the given []int64 and assigns it to the CommentIds field.
func (o *GetGoodsFeedbackCommentsRequest) SetCommentIds(v []int64) {
	o.CommentIds = v
}

func (o GetGoodsFeedbackCommentsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetGoodsFeedbackCommentsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeedbackId) {
		toSerialize["feedbackId"] = o.FeedbackId
	}
	if o.CommentIds != nil {
		toSerialize["commentIds"] = o.CommentIds
	}
	return toSerialize, nil
}

type NullableGetGoodsFeedbackCommentsRequest struct {
	value *GetGoodsFeedbackCommentsRequest
	isSet bool
}

func (v NullableGetGoodsFeedbackCommentsRequest) Get() *GetGoodsFeedbackCommentsRequest {
	return v.value
}

func (v *NullableGetGoodsFeedbackCommentsRequest) Set(val *GetGoodsFeedbackCommentsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGoodsFeedbackCommentsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGoodsFeedbackCommentsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGoodsFeedbackCommentsRequest(val *GetGoodsFeedbackCommentsRequest) *NullableGetGoodsFeedbackCommentsRequest {
	return &NullableGetGoodsFeedbackCommentsRequest{value: val, isSet: true}
}

func (v NullableGetGoodsFeedbackCommentsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGoodsFeedbackCommentsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
