/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MaxSaleQuantumDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MaxSaleQuantumDTO{}

// MaxSaleQuantumDTO Лимит на установку кванта и минимального количества товаров по категориям. 
type MaxSaleQuantumDTO struct {
	// Идентификатор категории.
	Id int64 `json:"id"`
	// Название категории.
	Name *string `json:"name,omitempty"`
	// Лимит на установку кванта и минимального количества товаров.
	MaxSaleQuantum *int32 `json:"maxSaleQuantum,omitempty"`
}

type _MaxSaleQuantumDTO MaxSaleQuantumDTO

// NewMaxSaleQuantumDTO instantiates a new MaxSaleQuantumDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMaxSaleQuantumDTO(id int64) *MaxSaleQuantumDTO {
	this := MaxSaleQuantumDTO{}
	this.Id = id
	return &this
}

// NewMaxSaleQuantumDTOWithDefaults instantiates a new MaxSaleQuantumDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMaxSaleQuantumDTOWithDefaults() *MaxSaleQuantumDTO {
	this := MaxSaleQuantumDTO{}
	return &this
}

// GetId returns the Id field value
func (o *MaxSaleQuantumDTO) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MaxSaleQuantumDTO) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MaxSaleQuantumDTO) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MaxSaleQuantumDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxSaleQuantumDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MaxSaleQuantumDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MaxSaleQuantumDTO) SetName(v string) {
	o.Name = &v
}

// GetMaxSaleQuantum returns the MaxSaleQuantum field value if set, zero value otherwise.
func (o *MaxSaleQuantumDTO) GetMaxSaleQuantum() int32 {
	if o == nil || IsNil(o.MaxSaleQuantum) {
		var ret int32
		return ret
	}
	return *o.MaxSaleQuantum
}

// GetMaxSaleQuantumOk returns a tuple with the MaxSaleQuantum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxSaleQuantumDTO) GetMaxSaleQuantumOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSaleQuantum) {
		return nil, false
	}
	return o.MaxSaleQuantum, true
}

// HasMaxSaleQuantum returns a boolean if a field has been set.
func (o *MaxSaleQuantumDTO) HasMaxSaleQuantum() bool {
	if o != nil && !IsNil(o.MaxSaleQuantum) {
		return true
	}

	return false
}

// SetMaxSaleQuantum gets a reference to the given int32 and assigns it to the MaxSaleQuantum field.
func (o *MaxSaleQuantumDTO) SetMaxSaleQuantum(v int32) {
	o.MaxSaleQuantum = &v
}

func (o MaxSaleQuantumDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MaxSaleQuantumDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MaxSaleQuantum) {
		toSerialize["maxSaleQuantum"] = o.MaxSaleQuantum
	}
	return toSerialize, nil
}

func (o *MaxSaleQuantumDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMaxSaleQuantumDTO := _MaxSaleQuantumDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMaxSaleQuantumDTO)

	if err != nil {
		return err
	}

	*o = MaxSaleQuantumDTO(varMaxSaleQuantumDTO)

	return err
}

type NullableMaxSaleQuantumDTO struct {
	value *MaxSaleQuantumDTO
	isSet bool
}

func (v NullableMaxSaleQuantumDTO) Get() *MaxSaleQuantumDTO {
	return v.value
}

func (v *NullableMaxSaleQuantumDTO) Set(val *MaxSaleQuantumDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableMaxSaleQuantumDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableMaxSaleQuantumDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaxSaleQuantumDTO(val *MaxSaleQuantumDTO) *NullableMaxSaleQuantumDTO {
	return &NullableMaxSaleQuantumDTO{value: val, isSet: true}
}

func (v NullableMaxSaleQuantumDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaxSaleQuantumDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


