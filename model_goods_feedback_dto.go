/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the GoodsFeedbackDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoodsFeedbackDTO{}

// GoodsFeedbackDTO Отзыв о товаре.
type GoodsFeedbackDTO struct {
	// Идентификатор отзыва. 
	FeedbackId int64 `json:"feedbackId"`
	// Дата и время создания отзыва.
	CreatedAt time.Time `json:"createdAt"`
	// Прочитан ли отзыв.  Принимает значение `false`, если магазин:  * Прочитал отзыв в кабинете продавца на Маркете. * Отметил отзыв прочитанным — метод [POST businesses/{businessId}/goods-feedback/skip-reaction](../../reference/goods-feedback/skipGoodsFeedbacksReaction.md). * Оставил комментарий к отзыву — метод [POST businesses/{businessId}/goods-feedback/comments/update](../../reference/goods-feedback/updateGoodsFeedbackComment.md). 
	NeedReaction bool `json:"needReaction"`
	Identifiers GoodsFeedbackIdentifiersDTO `json:"identifiers"`
	// Имя автора отзыва.
	Author *string `json:"author,omitempty"`
	Description *GoodsFeedbackDescriptionDTO `json:"description,omitempty"`
	Media *GoodsFeedbackMediaDTO `json:"media,omitempty"`
	Statistics GoodsFeedbackStatisticsDTO `json:"statistics"`
}

type _GoodsFeedbackDTO GoodsFeedbackDTO

// NewGoodsFeedbackDTO instantiates a new GoodsFeedbackDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoodsFeedbackDTO(feedbackId int64, createdAt time.Time, needReaction bool, identifiers GoodsFeedbackIdentifiersDTO, statistics GoodsFeedbackStatisticsDTO) *GoodsFeedbackDTO {
	this := GoodsFeedbackDTO{}
	this.FeedbackId = feedbackId
	this.CreatedAt = createdAt
	this.NeedReaction = needReaction
	this.Identifiers = identifiers
	this.Statistics = statistics
	return &this
}

// NewGoodsFeedbackDTOWithDefaults instantiates a new GoodsFeedbackDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoodsFeedbackDTOWithDefaults() *GoodsFeedbackDTO {
	this := GoodsFeedbackDTO{}
	return &this
}

// GetFeedbackId returns the FeedbackId field value
func (o *GoodsFeedbackDTO) GetFeedbackId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FeedbackId
}

// GetFeedbackIdOk returns a tuple with the FeedbackId field value
// and a boolean to check if the value has been set.
func (o *GoodsFeedbackDTO) GetFeedbackIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeedbackId, true
}

// SetFeedbackId sets field value
func (o *GoodsFeedbackDTO) SetFeedbackId(v int64) {
	o.FeedbackId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *GoodsFeedbackDTO) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *GoodsFeedbackDTO) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *GoodsFeedbackDTO) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetNeedReaction returns the NeedReaction field value
func (o *GoodsFeedbackDTO) GetNeedReaction() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NeedReaction
}

// GetNeedReactionOk returns a tuple with the NeedReaction field value
// and a boolean to check if the value has been set.
func (o *GoodsFeedbackDTO) GetNeedReactionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NeedReaction, true
}

// SetNeedReaction sets field value
func (o *GoodsFeedbackDTO) SetNeedReaction(v bool) {
	o.NeedReaction = v
}

// GetIdentifiers returns the Identifiers field value
func (o *GoodsFeedbackDTO) GetIdentifiers() GoodsFeedbackIdentifiersDTO {
	if o == nil {
		var ret GoodsFeedbackIdentifiersDTO
		return ret
	}

	return o.Identifiers
}

// GetIdentifiersOk returns a tuple with the Identifiers field value
// and a boolean to check if the value has been set.
func (o *GoodsFeedbackDTO) GetIdentifiersOk() (*GoodsFeedbackIdentifiersDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifiers, true
}

// SetIdentifiers sets field value
func (o *GoodsFeedbackDTO) SetIdentifiers(v GoodsFeedbackIdentifiersDTO) {
	o.Identifiers = v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *GoodsFeedbackDTO) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsFeedbackDTO) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *GoodsFeedbackDTO) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *GoodsFeedbackDTO) SetAuthor(v string) {
	o.Author = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GoodsFeedbackDTO) GetDescription() GoodsFeedbackDescriptionDTO {
	if o == nil || IsNil(o.Description) {
		var ret GoodsFeedbackDescriptionDTO
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsFeedbackDTO) GetDescriptionOk() (*GoodsFeedbackDescriptionDTO, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GoodsFeedbackDTO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given GoodsFeedbackDescriptionDTO and assigns it to the Description field.
func (o *GoodsFeedbackDTO) SetDescription(v GoodsFeedbackDescriptionDTO) {
	o.Description = &v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *GoodsFeedbackDTO) GetMedia() GoodsFeedbackMediaDTO {
	if o == nil || IsNil(o.Media) {
		var ret GoodsFeedbackMediaDTO
		return ret
	}
	return *o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsFeedbackDTO) GetMediaOk() (*GoodsFeedbackMediaDTO, bool) {
	if o == nil || IsNil(o.Media) {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *GoodsFeedbackDTO) HasMedia() bool {
	if o != nil && !IsNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given GoodsFeedbackMediaDTO and assigns it to the Media field.
func (o *GoodsFeedbackDTO) SetMedia(v GoodsFeedbackMediaDTO) {
	o.Media = &v
}

// GetStatistics returns the Statistics field value
func (o *GoodsFeedbackDTO) GetStatistics() GoodsFeedbackStatisticsDTO {
	if o == nil {
		var ret GoodsFeedbackStatisticsDTO
		return ret
	}

	return o.Statistics
}

// GetStatisticsOk returns a tuple with the Statistics field value
// and a boolean to check if the value has been set.
func (o *GoodsFeedbackDTO) GetStatisticsOk() (*GoodsFeedbackStatisticsDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Statistics, true
}

// SetStatistics sets field value
func (o *GoodsFeedbackDTO) SetStatistics(v GoodsFeedbackStatisticsDTO) {
	o.Statistics = v
}

func (o GoodsFeedbackDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoodsFeedbackDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["feedbackId"] = o.FeedbackId
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["needReaction"] = o.NeedReaction
	toSerialize["identifiers"] = o.Identifiers
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	toSerialize["statistics"] = o.Statistics
	return toSerialize, nil
}

func (o *GoodsFeedbackDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"feedbackId",
		"createdAt",
		"needReaction",
		"identifiers",
		"statistics",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGoodsFeedbackDTO := _GoodsFeedbackDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGoodsFeedbackDTO)

	if err != nil {
		return err
	}

	*o = GoodsFeedbackDTO(varGoodsFeedbackDTO)

	return err
}

type NullableGoodsFeedbackDTO struct {
	value *GoodsFeedbackDTO
	isSet bool
}

func (v NullableGoodsFeedbackDTO) Get() *GoodsFeedbackDTO {
	return v.value
}

func (v *NullableGoodsFeedbackDTO) Set(val *GoodsFeedbackDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableGoodsFeedbackDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableGoodsFeedbackDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoodsFeedbackDTO(val *GoodsFeedbackDTO) *NullableGoodsFeedbackDTO {
	return &NullableGoodsFeedbackDTO{value: val, isSet: true}
}

func (v NullableGoodsFeedbackDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoodsFeedbackDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


