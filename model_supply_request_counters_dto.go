/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SupplyRequestCountersDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupplyRequestCountersDTO{}

// SupplyRequestCountersDTO Количество товаров, коробок и палет в заявке.
type SupplyRequestCountersDTO struct {
	// Количество товаров в заявке на поставку.
	PlanCount *int32 `json:"planCount,omitempty"`
	// Количество товаров, которые приняты на складе.
	FactCount *int32 `json:"factCount,omitempty"`
	// Количество непринятых товаров.
	UndefinedCount *int32 `json:"undefinedCount,omitempty"`
	// Количество лишних товаров.
	SurplusCount *int32 `json:"surplusCount,omitempty"`
	// Количество товаров с недостатками.
	ShortageCount *int32 `json:"shortageCount,omitempty"`
	// Количество товаров с браком.
	DefectCount *int32 `json:"defectCount,omitempty"`
	// Количество товаров, которые можно привезти дополнительно.
	AcceptableCount *int32 `json:"acceptableCount,omitempty"`
	// Количество товаров, которые нельзя привезти дополнительно.
	UnacceptableCount *int32 `json:"unacceptableCount,omitempty"`
	// Количество палет, которые приняты на складе.
	ActualPalletsCount *int32 `json:"actualPalletsCount,omitempty"`
	// Количество коробок, которые приняты на складе.
	ActualBoxCount *int32 `json:"actualBoxCount,omitempty"`
}

// NewSupplyRequestCountersDTO instantiates a new SupplyRequestCountersDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupplyRequestCountersDTO() *SupplyRequestCountersDTO {
	this := SupplyRequestCountersDTO{}
	return &this
}

// NewSupplyRequestCountersDTOWithDefaults instantiates a new SupplyRequestCountersDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupplyRequestCountersDTOWithDefaults() *SupplyRequestCountersDTO {
	this := SupplyRequestCountersDTO{}
	return &this
}

// GetPlanCount returns the PlanCount field value if set, zero value otherwise.
func (o *SupplyRequestCountersDTO) GetPlanCount() int32 {
	if o == nil || IsNil(o.PlanCount) {
		var ret int32
		return ret
	}
	return *o.PlanCount
}

// GetPlanCountOk returns a tuple with the PlanCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestCountersDTO) GetPlanCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PlanCount) {
		return nil, false
	}
	return o.PlanCount, true
}

// HasPlanCount returns a boolean if a field has been set.
func (o *SupplyRequestCountersDTO) HasPlanCount() bool {
	if o != nil && !IsNil(o.PlanCount) {
		return true
	}

	return false
}

// SetPlanCount gets a reference to the given int32 and assigns it to the PlanCount field.
func (o *SupplyRequestCountersDTO) SetPlanCount(v int32) {
	o.PlanCount = &v
}

// GetFactCount returns the FactCount field value if set, zero value otherwise.
func (o *SupplyRequestCountersDTO) GetFactCount() int32 {
	if o == nil || IsNil(o.FactCount) {
		var ret int32
		return ret
	}
	return *o.FactCount
}

// GetFactCountOk returns a tuple with the FactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestCountersDTO) GetFactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.FactCount) {
		return nil, false
	}
	return o.FactCount, true
}

// HasFactCount returns a boolean if a field has been set.
func (o *SupplyRequestCountersDTO) HasFactCount() bool {
	if o != nil && !IsNil(o.FactCount) {
		return true
	}

	return false
}

// SetFactCount gets a reference to the given int32 and assigns it to the FactCount field.
func (o *SupplyRequestCountersDTO) SetFactCount(v int32) {
	o.FactCount = &v
}

// GetUndefinedCount returns the UndefinedCount field value if set, zero value otherwise.
func (o *SupplyRequestCountersDTO) GetUndefinedCount() int32 {
	if o == nil || IsNil(o.UndefinedCount) {
		var ret int32
		return ret
	}
	return *o.UndefinedCount
}

// GetUndefinedCountOk returns a tuple with the UndefinedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestCountersDTO) GetUndefinedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UndefinedCount) {
		return nil, false
	}
	return o.UndefinedCount, true
}

// HasUndefinedCount returns a boolean if a field has been set.
func (o *SupplyRequestCountersDTO) HasUndefinedCount() bool {
	if o != nil && !IsNil(o.UndefinedCount) {
		return true
	}

	return false
}

// SetUndefinedCount gets a reference to the given int32 and assigns it to the UndefinedCount field.
func (o *SupplyRequestCountersDTO) SetUndefinedCount(v int32) {
	o.UndefinedCount = &v
}

// GetSurplusCount returns the SurplusCount field value if set, zero value otherwise.
func (o *SupplyRequestCountersDTO) GetSurplusCount() int32 {
	if o == nil || IsNil(o.SurplusCount) {
		var ret int32
		return ret
	}
	return *o.SurplusCount
}

// GetSurplusCountOk returns a tuple with the SurplusCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestCountersDTO) GetSurplusCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SurplusCount) {
		return nil, false
	}
	return o.SurplusCount, true
}

// HasSurplusCount returns a boolean if a field has been set.
func (o *SupplyRequestCountersDTO) HasSurplusCount() bool {
	if o != nil && !IsNil(o.SurplusCount) {
		return true
	}

	return false
}

// SetSurplusCount gets a reference to the given int32 and assigns it to the SurplusCount field.
func (o *SupplyRequestCountersDTO) SetSurplusCount(v int32) {
	o.SurplusCount = &v
}

// GetShortageCount returns the ShortageCount field value if set, zero value otherwise.
func (o *SupplyRequestCountersDTO) GetShortageCount() int32 {
	if o == nil || IsNil(o.ShortageCount) {
		var ret int32
		return ret
	}
	return *o.ShortageCount
}

// GetShortageCountOk returns a tuple with the ShortageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestCountersDTO) GetShortageCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ShortageCount) {
		return nil, false
	}
	return o.ShortageCount, true
}

// HasShortageCount returns a boolean if a field has been set.
func (o *SupplyRequestCountersDTO) HasShortageCount() bool {
	if o != nil && !IsNil(o.ShortageCount) {
		return true
	}

	return false
}

// SetShortageCount gets a reference to the given int32 and assigns it to the ShortageCount field.
func (o *SupplyRequestCountersDTO) SetShortageCount(v int32) {
	o.ShortageCount = &v
}

// GetDefectCount returns the DefectCount field value if set, zero value otherwise.
func (o *SupplyRequestCountersDTO) GetDefectCount() int32 {
	if o == nil || IsNil(o.DefectCount) {
		var ret int32
		return ret
	}
	return *o.DefectCount
}

// GetDefectCountOk returns a tuple with the DefectCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestCountersDTO) GetDefectCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DefectCount) {
		return nil, false
	}
	return o.DefectCount, true
}

// HasDefectCount returns a boolean if a field has been set.
func (o *SupplyRequestCountersDTO) HasDefectCount() bool {
	if o != nil && !IsNil(o.DefectCount) {
		return true
	}

	return false
}

// SetDefectCount gets a reference to the given int32 and assigns it to the DefectCount field.
func (o *SupplyRequestCountersDTO) SetDefectCount(v int32) {
	o.DefectCount = &v
}

// GetAcceptableCount returns the AcceptableCount field value if set, zero value otherwise.
func (o *SupplyRequestCountersDTO) GetAcceptableCount() int32 {
	if o == nil || IsNil(o.AcceptableCount) {
		var ret int32
		return ret
	}
	return *o.AcceptableCount
}

// GetAcceptableCountOk returns a tuple with the AcceptableCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestCountersDTO) GetAcceptableCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AcceptableCount) {
		return nil, false
	}
	return o.AcceptableCount, true
}

// HasAcceptableCount returns a boolean if a field has been set.
func (o *SupplyRequestCountersDTO) HasAcceptableCount() bool {
	if o != nil && !IsNil(o.AcceptableCount) {
		return true
	}

	return false
}

// SetAcceptableCount gets a reference to the given int32 and assigns it to the AcceptableCount field.
func (o *SupplyRequestCountersDTO) SetAcceptableCount(v int32) {
	o.AcceptableCount = &v
}

// GetUnacceptableCount returns the UnacceptableCount field value if set, zero value otherwise.
func (o *SupplyRequestCountersDTO) GetUnacceptableCount() int32 {
	if o == nil || IsNil(o.UnacceptableCount) {
		var ret int32
		return ret
	}
	return *o.UnacceptableCount
}

// GetUnacceptableCountOk returns a tuple with the UnacceptableCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestCountersDTO) GetUnacceptableCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UnacceptableCount) {
		return nil, false
	}
	return o.UnacceptableCount, true
}

// HasUnacceptableCount returns a boolean if a field has been set.
func (o *SupplyRequestCountersDTO) HasUnacceptableCount() bool {
	if o != nil && !IsNil(o.UnacceptableCount) {
		return true
	}

	return false
}

// SetUnacceptableCount gets a reference to the given int32 and assigns it to the UnacceptableCount field.
func (o *SupplyRequestCountersDTO) SetUnacceptableCount(v int32) {
	o.UnacceptableCount = &v
}

// GetActualPalletsCount returns the ActualPalletsCount field value if set, zero value otherwise.
func (o *SupplyRequestCountersDTO) GetActualPalletsCount() int32 {
	if o == nil || IsNil(o.ActualPalletsCount) {
		var ret int32
		return ret
	}
	return *o.ActualPalletsCount
}

// GetActualPalletsCountOk returns a tuple with the ActualPalletsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestCountersDTO) GetActualPalletsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ActualPalletsCount) {
		return nil, false
	}
	return o.ActualPalletsCount, true
}

// HasActualPalletsCount returns a boolean if a field has been set.
func (o *SupplyRequestCountersDTO) HasActualPalletsCount() bool {
	if o != nil && !IsNil(o.ActualPalletsCount) {
		return true
	}

	return false
}

// SetActualPalletsCount gets a reference to the given int32 and assigns it to the ActualPalletsCount field.
func (o *SupplyRequestCountersDTO) SetActualPalletsCount(v int32) {
	o.ActualPalletsCount = &v
}

// GetActualBoxCount returns the ActualBoxCount field value if set, zero value otherwise.
func (o *SupplyRequestCountersDTO) GetActualBoxCount() int32 {
	if o == nil || IsNil(o.ActualBoxCount) {
		var ret int32
		return ret
	}
	return *o.ActualBoxCount
}

// GetActualBoxCountOk returns a tuple with the ActualBoxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestCountersDTO) GetActualBoxCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ActualBoxCount) {
		return nil, false
	}
	return o.ActualBoxCount, true
}

// HasActualBoxCount returns a boolean if a field has been set.
func (o *SupplyRequestCountersDTO) HasActualBoxCount() bool {
	if o != nil && !IsNil(o.ActualBoxCount) {
		return true
	}

	return false
}

// SetActualBoxCount gets a reference to the given int32 and assigns it to the ActualBoxCount field.
func (o *SupplyRequestCountersDTO) SetActualBoxCount(v int32) {
	o.ActualBoxCount = &v
}

func (o SupplyRequestCountersDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupplyRequestCountersDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PlanCount) {
		toSerialize["planCount"] = o.PlanCount
	}
	if !IsNil(o.FactCount) {
		toSerialize["factCount"] = o.FactCount
	}
	if !IsNil(o.UndefinedCount) {
		toSerialize["undefinedCount"] = o.UndefinedCount
	}
	if !IsNil(o.SurplusCount) {
		toSerialize["surplusCount"] = o.SurplusCount
	}
	if !IsNil(o.ShortageCount) {
		toSerialize["shortageCount"] = o.ShortageCount
	}
	if !IsNil(o.DefectCount) {
		toSerialize["defectCount"] = o.DefectCount
	}
	if !IsNil(o.AcceptableCount) {
		toSerialize["acceptableCount"] = o.AcceptableCount
	}
	if !IsNil(o.UnacceptableCount) {
		toSerialize["unacceptableCount"] = o.UnacceptableCount
	}
	if !IsNil(o.ActualPalletsCount) {
		toSerialize["actualPalletsCount"] = o.ActualPalletsCount
	}
	if !IsNil(o.ActualBoxCount) {
		toSerialize["actualBoxCount"] = o.ActualBoxCount
	}
	return toSerialize, nil
}

type NullableSupplyRequestCountersDTO struct {
	value *SupplyRequestCountersDTO
	isSet bool
}

func (v NullableSupplyRequestCountersDTO) Get() *SupplyRequestCountersDTO {
	return v.value
}

func (v *NullableSupplyRequestCountersDTO) Set(val *SupplyRequestCountersDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyRequestCountersDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyRequestCountersDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyRequestCountersDTO(val *SupplyRequestCountersDTO) *NullableSupplyRequestCountersDTO {
	return &NullableSupplyRequestCountersDTO{value: val, isSet: true}
}

func (v NullableSupplyRequestCountersDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyRequestCountersDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
