/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrderItemDetailDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderItemDetailDTO{}

// OrderItemDetailDTO Детали по товару в заказе.
type OrderItemDetailDTO struct {
	// Количество единиц товара.
	ItemCount int64 `json:"itemCount"`
	ItemStatus OrderItemStatusType `json:"itemStatus"`
	// Формат даты: `ДД-ММ-ГГГГ`. 
	UpdateDate string `json:"updateDate"`
}

type _OrderItemDetailDTO OrderItemDetailDTO

// NewOrderItemDetailDTO instantiates a new OrderItemDetailDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderItemDetailDTO(itemCount int64, itemStatus OrderItemStatusType, updateDate string) *OrderItemDetailDTO {
	this := OrderItemDetailDTO{}
	this.ItemCount = itemCount
	this.ItemStatus = itemStatus
	this.UpdateDate = updateDate
	return &this
}

// NewOrderItemDetailDTOWithDefaults instantiates a new OrderItemDetailDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderItemDetailDTOWithDefaults() *OrderItemDetailDTO {
	this := OrderItemDetailDTO{}
	return &this
}

// GetItemCount returns the ItemCount field value
func (o *OrderItemDetailDTO) GetItemCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ItemCount
}

// GetItemCountOk returns a tuple with the ItemCount field value
// and a boolean to check if the value has been set.
func (o *OrderItemDetailDTO) GetItemCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemCount, true
}

// SetItemCount sets field value
func (o *OrderItemDetailDTO) SetItemCount(v int64) {
	o.ItemCount = v
}

// GetItemStatus returns the ItemStatus field value
func (o *OrderItemDetailDTO) GetItemStatus() OrderItemStatusType {
	if o == nil {
		var ret OrderItemStatusType
		return ret
	}

	return o.ItemStatus
}

// GetItemStatusOk returns a tuple with the ItemStatus field value
// and a boolean to check if the value has been set.
func (o *OrderItemDetailDTO) GetItemStatusOk() (*OrderItemStatusType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemStatus, true
}

// SetItemStatus sets field value
func (o *OrderItemDetailDTO) SetItemStatus(v OrderItemStatusType) {
	o.ItemStatus = v
}

// GetUpdateDate returns the UpdateDate field value
func (o *OrderItemDetailDTO) GetUpdateDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdateDate
}

// GetUpdateDateOk returns a tuple with the UpdateDate field value
// and a boolean to check if the value has been set.
func (o *OrderItemDetailDTO) GetUpdateDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateDate, true
}

// SetUpdateDate sets field value
func (o *OrderItemDetailDTO) SetUpdateDate(v string) {
	o.UpdateDate = v
}

func (o OrderItemDetailDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderItemDetailDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["itemCount"] = o.ItemCount
	toSerialize["itemStatus"] = o.ItemStatus
	toSerialize["updateDate"] = o.UpdateDate
	return toSerialize, nil
}

func (o *OrderItemDetailDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"itemCount",
		"itemStatus",
		"updateDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderItemDetailDTO := _OrderItemDetailDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrderItemDetailDTO)

	if err != nil {
		return err
	}

	*o = OrderItemDetailDTO(varOrderItemDetailDTO)

	return err
}

type NullableOrderItemDetailDTO struct {
	value *OrderItemDetailDTO
	isSet bool
}

func (v NullableOrderItemDetailDTO) Get() *OrderItemDetailDTO {
	return v.value
}

func (v *NullableOrderItemDetailDTO) Set(val *OrderItemDetailDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderItemDetailDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderItemDetailDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderItemDetailDTO(val *OrderItemDetailDTO) *NullableOrderItemDetailDTO {
	return &NullableOrderItemDetailDTO{value: val, isSet: true}
}

func (v NullableOrderItemDetailDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderItemDetailDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


