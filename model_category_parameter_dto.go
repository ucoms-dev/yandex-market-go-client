/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CategoryParameterDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CategoryParameterDTO{}

// CategoryParameterDTO Характеристика товара.
type CategoryParameterDTO struct {
	// Идентификатор характеристики.
	Id int64 `json:"id"`
	// Название характеристики.
	Name *string `json:"name,omitempty"`
	Type ParameterType `json:"type"`
	Unit *CategoryParameterUnitDTO `json:"unit,omitempty"`
	// Описание характеристики.
	Description *string `json:"description,omitempty"`
	// Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
	RecommendationTypes []OfferCardRecommendationType `json:"recommendationTypes,omitempty"`
	// Обязательность характеристики.
	Required bool `json:"required"`
	// Используется ли характеристика в фильтре.
	Filtering bool `json:"filtering"`
	// Является ли характеристика особенностью варианта.
	Distinctive bool `json:"distinctive"`
	// Можно ли передать сразу несколько значений.
	Multivalue bool `json:"multivalue"`
	// Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
	AllowCustomValues bool `json:"allowCustomValues"`
	// Список допустимых значений параметра. Только для характеристик типа `ENUM`.
	Values []ParameterValueOptionDTO `json:"values,omitempty"`
	Constraints *ParameterValueConstraintsDTO `json:"constraints,omitempty"`
	// Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.
	ValueRestrictions []ValueRestrictionDTO `json:"valueRestrictions,omitempty"`
}

type _CategoryParameterDTO CategoryParameterDTO

// NewCategoryParameterDTO instantiates a new CategoryParameterDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryParameterDTO(id int64, type_ ParameterType, required bool, filtering bool, distinctive bool, multivalue bool, allowCustomValues bool) *CategoryParameterDTO {
	this := CategoryParameterDTO{}
	this.Id = id
	this.Type = type_
	this.Required = required
	this.Filtering = filtering
	this.Distinctive = distinctive
	this.Multivalue = multivalue
	this.AllowCustomValues = allowCustomValues
	return &this
}

// NewCategoryParameterDTOWithDefaults instantiates a new CategoryParameterDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryParameterDTOWithDefaults() *CategoryParameterDTO {
	this := CategoryParameterDTO{}
	return &this
}

// GetId returns the Id field value
func (o *CategoryParameterDTO) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CategoryParameterDTO) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CategoryParameterDTO) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CategoryParameterDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryParameterDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CategoryParameterDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CategoryParameterDTO) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value
func (o *CategoryParameterDTO) GetType() ParameterType {
	if o == nil {
		var ret ParameterType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CategoryParameterDTO) GetTypeOk() (*ParameterType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CategoryParameterDTO) SetType(v ParameterType) {
	o.Type = v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *CategoryParameterDTO) GetUnit() CategoryParameterUnitDTO {
	if o == nil || IsNil(o.Unit) {
		var ret CategoryParameterUnitDTO
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryParameterDTO) GetUnitOk() (*CategoryParameterUnitDTO, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *CategoryParameterDTO) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given CategoryParameterUnitDTO and assigns it to the Unit field.
func (o *CategoryParameterDTO) SetUnit(v CategoryParameterUnitDTO) {
	o.Unit = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CategoryParameterDTO) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryParameterDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CategoryParameterDTO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CategoryParameterDTO) SetDescription(v string) {
	o.Description = &v
}

// GetRecommendationTypes returns the RecommendationTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CategoryParameterDTO) GetRecommendationTypes() []OfferCardRecommendationType {
	if o == nil {
		var ret []OfferCardRecommendationType
		return ret
	}
	return o.RecommendationTypes
}

// GetRecommendationTypesOk returns a tuple with the RecommendationTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CategoryParameterDTO) GetRecommendationTypesOk() ([]OfferCardRecommendationType, bool) {
	if o == nil || IsNil(o.RecommendationTypes) {
		return nil, false
	}
	return o.RecommendationTypes, true
}

// HasRecommendationTypes returns a boolean if a field has been set.
func (o *CategoryParameterDTO) HasRecommendationTypes() bool {
	if o != nil && !IsNil(o.RecommendationTypes) {
		return true
	}

	return false
}

// SetRecommendationTypes gets a reference to the given []OfferCardRecommendationType and assigns it to the RecommendationTypes field.
func (o *CategoryParameterDTO) SetRecommendationTypes(v []OfferCardRecommendationType) {
	o.RecommendationTypes = v
}

// GetRequired returns the Required field value
func (o *CategoryParameterDTO) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *CategoryParameterDTO) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *CategoryParameterDTO) SetRequired(v bool) {
	o.Required = v
}

// GetFiltering returns the Filtering field value
func (o *CategoryParameterDTO) GetFiltering() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Filtering
}

// GetFilteringOk returns a tuple with the Filtering field value
// and a boolean to check if the value has been set.
func (o *CategoryParameterDTO) GetFilteringOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filtering, true
}

// SetFiltering sets field value
func (o *CategoryParameterDTO) SetFiltering(v bool) {
	o.Filtering = v
}

// GetDistinctive returns the Distinctive field value
func (o *CategoryParameterDTO) GetDistinctive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Distinctive
}

// GetDistinctiveOk returns a tuple with the Distinctive field value
// and a boolean to check if the value has been set.
func (o *CategoryParameterDTO) GetDistinctiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distinctive, true
}

// SetDistinctive sets field value
func (o *CategoryParameterDTO) SetDistinctive(v bool) {
	o.Distinctive = v
}

// GetMultivalue returns the Multivalue field value
func (o *CategoryParameterDTO) GetMultivalue() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Multivalue
}

// GetMultivalueOk returns a tuple with the Multivalue field value
// and a boolean to check if the value has been set.
func (o *CategoryParameterDTO) GetMultivalueOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Multivalue, true
}

// SetMultivalue sets field value
func (o *CategoryParameterDTO) SetMultivalue(v bool) {
	o.Multivalue = v
}

// GetAllowCustomValues returns the AllowCustomValues field value
func (o *CategoryParameterDTO) GetAllowCustomValues() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowCustomValues
}

// GetAllowCustomValuesOk returns a tuple with the AllowCustomValues field value
// and a boolean to check if the value has been set.
func (o *CategoryParameterDTO) GetAllowCustomValuesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowCustomValues, true
}

// SetAllowCustomValues sets field value
func (o *CategoryParameterDTO) SetAllowCustomValues(v bool) {
	o.AllowCustomValues = v
}

// GetValues returns the Values field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CategoryParameterDTO) GetValues() []ParameterValueOptionDTO {
	if o == nil {
		var ret []ParameterValueOptionDTO
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CategoryParameterDTO) GetValuesOk() ([]ParameterValueOptionDTO, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *CategoryParameterDTO) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []ParameterValueOptionDTO and assigns it to the Values field.
func (o *CategoryParameterDTO) SetValues(v []ParameterValueOptionDTO) {
	o.Values = v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *CategoryParameterDTO) GetConstraints() ParameterValueConstraintsDTO {
	if o == nil || IsNil(o.Constraints) {
		var ret ParameterValueConstraintsDTO
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryParameterDTO) GetConstraintsOk() (*ParameterValueConstraintsDTO, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *CategoryParameterDTO) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given ParameterValueConstraintsDTO and assigns it to the Constraints field.
func (o *CategoryParameterDTO) SetConstraints(v ParameterValueConstraintsDTO) {
	o.Constraints = &v
}

// GetValueRestrictions returns the ValueRestrictions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CategoryParameterDTO) GetValueRestrictions() []ValueRestrictionDTO {
	if o == nil {
		var ret []ValueRestrictionDTO
		return ret
	}
	return o.ValueRestrictions
}

// GetValueRestrictionsOk returns a tuple with the ValueRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CategoryParameterDTO) GetValueRestrictionsOk() ([]ValueRestrictionDTO, bool) {
	if o == nil || IsNil(o.ValueRestrictions) {
		return nil, false
	}
	return o.ValueRestrictions, true
}

// HasValueRestrictions returns a boolean if a field has been set.
func (o *CategoryParameterDTO) HasValueRestrictions() bool {
	if o != nil && !IsNil(o.ValueRestrictions) {
		return true
	}

	return false
}

// SetValueRestrictions gets a reference to the given []ValueRestrictionDTO and assigns it to the ValueRestrictions field.
func (o *CategoryParameterDTO) SetValueRestrictions(v []ValueRestrictionDTO) {
	o.ValueRestrictions = v
}

func (o CategoryParameterDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CategoryParameterDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.RecommendationTypes != nil {
		toSerialize["recommendationTypes"] = o.RecommendationTypes
	}
	toSerialize["required"] = o.Required
	toSerialize["filtering"] = o.Filtering
	toSerialize["distinctive"] = o.Distinctive
	toSerialize["multivalue"] = o.Multivalue
	toSerialize["allowCustomValues"] = o.AllowCustomValues
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	if o.ValueRestrictions != nil {
		toSerialize["valueRestrictions"] = o.ValueRestrictions
	}
	return toSerialize, nil
}

func (o *CategoryParameterDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"required",
		"filtering",
		"distinctive",
		"multivalue",
		"allowCustomValues",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCategoryParameterDTO := _CategoryParameterDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCategoryParameterDTO)

	if err != nil {
		return err
	}

	*o = CategoryParameterDTO(varCategoryParameterDTO)

	return err
}

type NullableCategoryParameterDTO struct {
	value *CategoryParameterDTO
	isSet bool
}

func (v NullableCategoryParameterDTO) Get() *CategoryParameterDTO {
	return v.value
}

func (v *NullableCategoryParameterDTO) Set(val *CategoryParameterDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryParameterDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryParameterDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryParameterDTO(val *CategoryParameterDTO) *NullableCategoryParameterDTO {
	return &NullableCategoryParameterDTO{value: val, isSet: true}
}

func (v NullableCategoryParameterDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryParameterDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


