/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EacVerificationResultDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EacVerificationResultDTO{}

// EacVerificationResultDTO Результат выполнения запроса.
type EacVerificationResultDTO struct {
	VerificationResult *EacVerificationStatusType `json:"verificationResult,omitempty"`
	// Количество оставшихся попыток проверки кода.  Возвращается, если магазин отправил некорректный код.  Когда все попытки будут исчерпаны, код обновится. 
	AttemptsLeft *int32 `json:"attemptsLeft,omitempty"`
}

// NewEacVerificationResultDTO instantiates a new EacVerificationResultDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEacVerificationResultDTO() *EacVerificationResultDTO {
	this := EacVerificationResultDTO{}
	return &this
}

// NewEacVerificationResultDTOWithDefaults instantiates a new EacVerificationResultDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEacVerificationResultDTOWithDefaults() *EacVerificationResultDTO {
	this := EacVerificationResultDTO{}
	return &this
}

// GetVerificationResult returns the VerificationResult field value if set, zero value otherwise.
func (o *EacVerificationResultDTO) GetVerificationResult() EacVerificationStatusType {
	if o == nil || IsNil(o.VerificationResult) {
		var ret EacVerificationStatusType
		return ret
	}
	return *o.VerificationResult
}

// GetVerificationResultOk returns a tuple with the VerificationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EacVerificationResultDTO) GetVerificationResultOk() (*EacVerificationStatusType, bool) {
	if o == nil || IsNil(o.VerificationResult) {
		return nil, false
	}
	return o.VerificationResult, true
}

// HasVerificationResult returns a boolean if a field has been set.
func (o *EacVerificationResultDTO) HasVerificationResult() bool {
	if o != nil && !IsNil(o.VerificationResult) {
		return true
	}

	return false
}

// SetVerificationResult gets a reference to the given EacVerificationStatusType and assigns it to the VerificationResult field.
func (o *EacVerificationResultDTO) SetVerificationResult(v EacVerificationStatusType) {
	o.VerificationResult = &v
}

// GetAttemptsLeft returns the AttemptsLeft field value if set, zero value otherwise.
func (o *EacVerificationResultDTO) GetAttemptsLeft() int32 {
	if o == nil || IsNil(o.AttemptsLeft) {
		var ret int32
		return ret
	}
	return *o.AttemptsLeft
}

// GetAttemptsLeftOk returns a tuple with the AttemptsLeft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EacVerificationResultDTO) GetAttemptsLeftOk() (*int32, bool) {
	if o == nil || IsNil(o.AttemptsLeft) {
		return nil, false
	}
	return o.AttemptsLeft, true
}

// HasAttemptsLeft returns a boolean if a field has been set.
func (o *EacVerificationResultDTO) HasAttemptsLeft() bool {
	if o != nil && !IsNil(o.AttemptsLeft) {
		return true
	}

	return false
}

// SetAttemptsLeft gets a reference to the given int32 and assigns it to the AttemptsLeft field.
func (o *EacVerificationResultDTO) SetAttemptsLeft(v int32) {
	o.AttemptsLeft = &v
}

func (o EacVerificationResultDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EacVerificationResultDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VerificationResult) {
		toSerialize["verificationResult"] = o.VerificationResult
	}
	if !IsNil(o.AttemptsLeft) {
		toSerialize["attemptsLeft"] = o.AttemptsLeft
	}
	return toSerialize, nil
}

type NullableEacVerificationResultDTO struct {
	value *EacVerificationResultDTO
	isSet bool
}

func (v NullableEacVerificationResultDTO) Get() *EacVerificationResultDTO {
	return v.value
}

func (v *NullableEacVerificationResultDTO) Set(val *EacVerificationResultDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableEacVerificationResultDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableEacVerificationResultDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEacVerificationResultDTO(val *EacVerificationResultDTO) *NullableEacVerificationResultDTO {
	return &NullableEacVerificationResultDTO{value: val, isSet: true}
}

func (v NullableEacVerificationResultDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEacVerificationResultDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


