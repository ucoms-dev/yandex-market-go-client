/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the GetChatInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetChatInfoDTO{}

// GetChatInfoDTO Информация о чате.
type GetChatInfoDTO struct {
	// Идентификатор чата.
	ChatId int64 `json:"chatId"`
	// Идентификатор заказа.
	OrderId int64          `json:"orderId"`
	Type    ChatType       `json:"type"`
	Status  ChatStatusType `json:"status"`
	// Дата и время создания чата.  Формат даты: ISO 8601 со смещением относительно UTC.
	CreatedAt time.Time `json:"createdAt"`
	// Дата и время последнего сообщения в чате.  Формат даты: ISO 8601 со смещением относительно UTC.
	UpdatedAt time.Time `json:"updatedAt"`
}

type _GetChatInfoDTO GetChatInfoDTO

// NewGetChatInfoDTO instantiates a new GetChatInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetChatInfoDTO(chatId int64, orderId int64, type_ ChatType, status ChatStatusType, createdAt time.Time, updatedAt time.Time) *GetChatInfoDTO {
	this := GetChatInfoDTO{}
	this.ChatId = chatId
	this.OrderId = orderId
	this.Type = type_
	this.Status = status
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewGetChatInfoDTOWithDefaults instantiates a new GetChatInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetChatInfoDTOWithDefaults() *GetChatInfoDTO {
	this := GetChatInfoDTO{}
	return &this
}

// GetChatId returns the ChatId field value
func (o *GetChatInfoDTO) GetChatId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ChatId
}

// GetChatIdOk returns a tuple with the ChatId field value
// and a boolean to check if the value has been set.
func (o *GetChatInfoDTO) GetChatIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChatId, true
}

// SetChatId sets field value
func (o *GetChatInfoDTO) SetChatId(v int64) {
	o.ChatId = v
}

// GetOrderId returns the OrderId field value
func (o *GetChatInfoDTO) GetOrderId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *GetChatInfoDTO) GetOrderIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *GetChatInfoDTO) SetOrderId(v int64) {
	o.OrderId = v
}

// GetType returns the Type field value
func (o *GetChatInfoDTO) GetType() ChatType {
	if o == nil {
		var ret ChatType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GetChatInfoDTO) GetTypeOk() (*ChatType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GetChatInfoDTO) SetType(v ChatType) {
	o.Type = v
}

// GetStatus returns the Status field value
func (o *GetChatInfoDTO) GetStatus() ChatStatusType {
	if o == nil {
		var ret ChatStatusType
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GetChatInfoDTO) GetStatusOk() (*ChatStatusType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GetChatInfoDTO) SetStatus(v ChatStatusType) {
	o.Status = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *GetChatInfoDTO) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *GetChatInfoDTO) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *GetChatInfoDTO) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *GetChatInfoDTO) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *GetChatInfoDTO) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *GetChatInfoDTO) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o GetChatInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetChatInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chatId"] = o.ChatId
	toSerialize["orderId"] = o.OrderId
	toSerialize["type"] = o.Type
	toSerialize["status"] = o.Status
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *GetChatInfoDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chatId",
		"orderId",
		"type",
		"status",
		"createdAt",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetChatInfoDTO := _GetChatInfoDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetChatInfoDTO)

	if err != nil {
		return err
	}

	*o = GetChatInfoDTO(varGetChatInfoDTO)

	return err
}

type NullableGetChatInfoDTO struct {
	value *GetChatInfoDTO
	isSet bool
}

func (v NullableGetChatInfoDTO) Get() *GetChatInfoDTO {
	return v.value
}

func (v *NullableGetChatInfoDTO) Set(val *GetChatInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableGetChatInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableGetChatInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetChatInfoDTO(val *GetChatInfoDTO) *NullableGetChatInfoDTO {
	return &NullableGetChatInfoDTO{value: val, isSet: true}
}

func (v NullableGetChatInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetChatInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
