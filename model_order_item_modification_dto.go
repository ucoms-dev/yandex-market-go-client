/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrderItemModificationDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderItemModificationDTO{}

// OrderItemModificationDTO Список товаров в заказе.  Если магазин не передал информацию о товаре во входных данных, он будет удален из заказа.  Обязательный параметр. 
type OrderItemModificationDTO struct {
	// Идентификатор товара в рамках заказа.  Получить идентификатор можно с помощью ресурсов [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  Обязательный параметр. 
	Id int64 `json:"id"`
	// Новое количество товара.
	Count int32 `json:"count"`
	// Информация о маркировке единиц товара.  Передавайте в запросе все единицы товара, который подлежит маркировке.  Обязательный параметр, если в заказе от бизнеса есть товары, подлежащие маркировке в системе [«Честный ЗНАК»](https://честныйзнак.рф/) или [«ASL BELGISI»](https://aslbelgisi.uz) (для продавцов Market Yandex Go). 
	Instances []BriefOrderItemInstanceDTO `json:"instances,omitempty"`
}

type _OrderItemModificationDTO OrderItemModificationDTO

// NewOrderItemModificationDTO instantiates a new OrderItemModificationDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderItemModificationDTO(id int64, count int32) *OrderItemModificationDTO {
	this := OrderItemModificationDTO{}
	this.Id = id
	this.Count = count
	return &this
}

// NewOrderItemModificationDTOWithDefaults instantiates a new OrderItemModificationDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderItemModificationDTOWithDefaults() *OrderItemModificationDTO {
	this := OrderItemModificationDTO{}
	return &this
}

// GetId returns the Id field value
func (o *OrderItemModificationDTO) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrderItemModificationDTO) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrderItemModificationDTO) SetId(v int64) {
	o.Id = v
}

// GetCount returns the Count field value
func (o *OrderItemModificationDTO) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *OrderItemModificationDTO) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *OrderItemModificationDTO) SetCount(v int32) {
	o.Count = v
}

// GetInstances returns the Instances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItemModificationDTO) GetInstances() []BriefOrderItemInstanceDTO {
	if o == nil {
		var ret []BriefOrderItemInstanceDTO
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItemModificationDTO) GetInstancesOk() ([]BriefOrderItemInstanceDTO, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *OrderItemModificationDTO) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []BriefOrderItemInstanceDTO and assigns it to the Instances field.
func (o *OrderItemModificationDTO) SetInstances(v []BriefOrderItemInstanceDTO) {
	o.Instances = v
}

func (o OrderItemModificationDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderItemModificationDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["count"] = o.Count
	if o.Instances != nil {
		toSerialize["instances"] = o.Instances
	}
	return toSerialize, nil
}

func (o *OrderItemModificationDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderItemModificationDTO := _OrderItemModificationDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrderItemModificationDTO)

	if err != nil {
		return err
	}

	*o = OrderItemModificationDTO(varOrderItemModificationDTO)

	return err
}

type NullableOrderItemModificationDTO struct {
	value *OrderItemModificationDTO
	isSet bool
}

func (v NullableOrderItemModificationDTO) Get() *OrderItemModificationDTO {
	return v.value
}

func (v *NullableOrderItemModificationDTO) Set(val *OrderItemModificationDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderItemModificationDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderItemModificationDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderItemModificationDTO(val *OrderItemModificationDTO) *NullableOrderItemModificationDTO {
	return &NullableOrderItemModificationDTO{value: val, isSet: true}
}

func (v NullableOrderItemModificationDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderItemModificationDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


