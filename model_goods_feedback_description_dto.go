/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GoodsFeedbackDescriptionDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoodsFeedbackDescriptionDTO{}

// GoodsFeedbackDescriptionDTO Текстовая часть отзыва.
type GoodsFeedbackDescriptionDTO struct {
	// Описание плюсов товара в отзыве.
	Advantages *string `json:"advantages,omitempty"`
	// Описание минусов товара в отзыве.
	Disadvantages *string `json:"disadvantages,omitempty"`
	// Комментарий в отзыве.
	Comment *string `json:"comment,omitempty"`
}

// NewGoodsFeedbackDescriptionDTO instantiates a new GoodsFeedbackDescriptionDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoodsFeedbackDescriptionDTO() *GoodsFeedbackDescriptionDTO {
	this := GoodsFeedbackDescriptionDTO{}
	return &this
}

// NewGoodsFeedbackDescriptionDTOWithDefaults instantiates a new GoodsFeedbackDescriptionDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoodsFeedbackDescriptionDTOWithDefaults() *GoodsFeedbackDescriptionDTO {
	this := GoodsFeedbackDescriptionDTO{}
	return &this
}

// GetAdvantages returns the Advantages field value if set, zero value otherwise.
func (o *GoodsFeedbackDescriptionDTO) GetAdvantages() string {
	if o == nil || IsNil(o.Advantages) {
		var ret string
		return ret
	}
	return *o.Advantages
}

// GetAdvantagesOk returns a tuple with the Advantages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsFeedbackDescriptionDTO) GetAdvantagesOk() (*string, bool) {
	if o == nil || IsNil(o.Advantages) {
		return nil, false
	}
	return o.Advantages, true
}

// HasAdvantages returns a boolean if a field has been set.
func (o *GoodsFeedbackDescriptionDTO) HasAdvantages() bool {
	if o != nil && !IsNil(o.Advantages) {
		return true
	}

	return false
}

// SetAdvantages gets a reference to the given string and assigns it to the Advantages field.
func (o *GoodsFeedbackDescriptionDTO) SetAdvantages(v string) {
	o.Advantages = &v
}

// GetDisadvantages returns the Disadvantages field value if set, zero value otherwise.
func (o *GoodsFeedbackDescriptionDTO) GetDisadvantages() string {
	if o == nil || IsNil(o.Disadvantages) {
		var ret string
		return ret
	}
	return *o.Disadvantages
}

// GetDisadvantagesOk returns a tuple with the Disadvantages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsFeedbackDescriptionDTO) GetDisadvantagesOk() (*string, bool) {
	if o == nil || IsNil(o.Disadvantages) {
		return nil, false
	}
	return o.Disadvantages, true
}

// HasDisadvantages returns a boolean if a field has been set.
func (o *GoodsFeedbackDescriptionDTO) HasDisadvantages() bool {
	if o != nil && !IsNil(o.Disadvantages) {
		return true
	}

	return false
}

// SetDisadvantages gets a reference to the given string and assigns it to the Disadvantages field.
func (o *GoodsFeedbackDescriptionDTO) SetDisadvantages(v string) {
	o.Disadvantages = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *GoodsFeedbackDescriptionDTO) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsFeedbackDescriptionDTO) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *GoodsFeedbackDescriptionDTO) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *GoodsFeedbackDescriptionDTO) SetComment(v string) {
	o.Comment = &v
}

func (o GoodsFeedbackDescriptionDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoodsFeedbackDescriptionDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Advantages) {
		toSerialize["advantages"] = o.Advantages
	}
	if !IsNil(o.Disadvantages) {
		toSerialize["disadvantages"] = o.Disadvantages
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

type NullableGoodsFeedbackDescriptionDTO struct {
	value *GoodsFeedbackDescriptionDTO
	isSet bool
}

func (v NullableGoodsFeedbackDescriptionDTO) Get() *GoodsFeedbackDescriptionDTO {
	return v.value
}

func (v *NullableGoodsFeedbackDescriptionDTO) Set(val *GoodsFeedbackDescriptionDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableGoodsFeedbackDescriptionDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableGoodsFeedbackDescriptionDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoodsFeedbackDescriptionDTO(val *GoodsFeedbackDescriptionDTO) *NullableGoodsFeedbackDescriptionDTO {
	return &NullableGoodsFeedbackDescriptionDTO{value: val, isSet: true}
}

func (v NullableGoodsFeedbackDescriptionDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoodsFeedbackDescriptionDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


