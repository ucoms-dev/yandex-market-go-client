/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MediaFileUploadStateType Состояние загрузки медиафайла:  * `UPLOADING` — загружается. * `UPLOADED` — успешно загружен. * `FAILED` — при загрузке произошла ошибка. Повторите попытку позже.
type MediaFileUploadStateType string

// List of MediaFileUploadStateType
const (
	UPLOADING MediaFileUploadStateType = "UPLOADING"
	UPLOADED  MediaFileUploadStateType = "UPLOADED"
	FAILED    MediaFileUploadStateType = "FAILED"
)

// All allowed values of MediaFileUploadStateType enum
var AllowedMediaFileUploadStateTypeEnumValues = []MediaFileUploadStateType{
	"UPLOADING",
	"UPLOADED",
	"FAILED",
}

func (v *MediaFileUploadStateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MediaFileUploadStateType(value)
	for _, existing := range AllowedMediaFileUploadStateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MediaFileUploadStateType", value)
}

// NewMediaFileUploadStateTypeFromValue returns a pointer to a valid MediaFileUploadStateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMediaFileUploadStateTypeFromValue(v string) (*MediaFileUploadStateType, error) {
	ev := MediaFileUploadStateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MediaFileUploadStateType: valid values are %v", v, AllowedMediaFileUploadStateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MediaFileUploadStateType) IsValid() bool {
	for _, existing := range AllowedMediaFileUploadStateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MediaFileUploadStateType value
func (v MediaFileUploadStateType) Ptr() *MediaFileUploadStateType {
	return &v
}

type NullableMediaFileUploadStateType struct {
	value *MediaFileUploadStateType
	isSet bool
}

func (v NullableMediaFileUploadStateType) Get() *MediaFileUploadStateType {
	return v.value
}

func (v *NullableMediaFileUploadStateType) Set(val *MediaFileUploadStateType) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaFileUploadStateType) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaFileUploadStateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaFileUploadStateType(val *MediaFileUploadStateType) *NullableMediaFileUploadStateType {
	return &NullableMediaFileUploadStateType{value: val, isSet: true}
}

func (v NullableMediaFileUploadStateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaFileUploadStateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
