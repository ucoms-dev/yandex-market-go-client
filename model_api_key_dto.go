/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ApiKeyDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiKeyDTO{}

// ApiKeyDTO Информация о Api-Key-токене.
type ApiKeyDTO struct {
	// Название токена.
	Name string `json:"name"`
	// Доступы к методам по Api-Key-токену.
	AuthScopes []ApiKeyScopeType `json:"authScopes"`
}

type _ApiKeyDTO ApiKeyDTO

// NewApiKeyDTO instantiates a new ApiKeyDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiKeyDTO(name string, authScopes []ApiKeyScopeType) *ApiKeyDTO {
	this := ApiKeyDTO{}
	this.Name = name
	this.AuthScopes = authScopes
	return &this
}

// NewApiKeyDTOWithDefaults instantiates a new ApiKeyDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiKeyDTOWithDefaults() *ApiKeyDTO {
	this := ApiKeyDTO{}
	return &this
}

// GetName returns the Name field value
func (o *ApiKeyDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiKeyDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiKeyDTO) SetName(v string) {
	o.Name = v
}

// GetAuthScopes returns the AuthScopes field value
func (o *ApiKeyDTO) GetAuthScopes() []ApiKeyScopeType {
	if o == nil {
		var ret []ApiKeyScopeType
		return ret
	}

	return o.AuthScopes
}

// GetAuthScopesOk returns a tuple with the AuthScopes field value
// and a boolean to check if the value has been set.
func (o *ApiKeyDTO) GetAuthScopesOk() ([]ApiKeyScopeType, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthScopes, true
}

// SetAuthScopes sets field value
func (o *ApiKeyDTO) SetAuthScopes(v []ApiKeyScopeType) {
	o.AuthScopes = v
}

func (o ApiKeyDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiKeyDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["authScopes"] = o.AuthScopes
	return toSerialize, nil
}

func (o *ApiKeyDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"authScopes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiKeyDTO := _ApiKeyDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiKeyDTO)

	if err != nil {
		return err
	}

	*o = ApiKeyDTO(varApiKeyDTO)

	return err
}

type NullableApiKeyDTO struct {
	value *ApiKeyDTO
	isSet bool
}

func (v NullableApiKeyDTO) Get() *ApiKeyDTO {
	return v.value
}

func (v *NullableApiKeyDTO) Set(val *ApiKeyDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableApiKeyDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableApiKeyDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiKeyDTO(val *ApiKeyDTO) *NullableApiKeyDTO {
	return &NullableApiKeyDTO{value: val, isSet: true}
}

func (v NullableApiKeyDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiKeyDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
