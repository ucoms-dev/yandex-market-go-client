/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OrderBoxLayoutItemDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderBoxLayoutItemDTO{}

// OrderBoxLayoutItemDTO Информация о товаре в коробке.
type OrderBoxLayoutItemDTO struct {
	// Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) — параметр `id` в `items`.
	Id int64 `json:"id"`
	// Количество единиц товара в коробке.  Используйте это поле, если в коробке поедут целые товары, не разделенные на части. Не используйте это поле одновременно с `partialCount`.
	FullCount    *int32                         `json:"fullCount,omitempty"`
	PartialCount *OrderBoxLayoutPartialCountDTO `json:"partialCount,omitempty"`
	// Переданные вами коды маркировки.
	Instances []BriefOrderItemInstanceDTO `json:"instances,omitempty"`
}

type _OrderBoxLayoutItemDTO OrderBoxLayoutItemDTO

// NewOrderBoxLayoutItemDTO instantiates a new OrderBoxLayoutItemDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderBoxLayoutItemDTO(id int64) *OrderBoxLayoutItemDTO {
	this := OrderBoxLayoutItemDTO{}
	this.Id = id
	return &this
}

// NewOrderBoxLayoutItemDTOWithDefaults instantiates a new OrderBoxLayoutItemDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderBoxLayoutItemDTOWithDefaults() *OrderBoxLayoutItemDTO {
	this := OrderBoxLayoutItemDTO{}
	return &this
}

// GetId returns the Id field value
func (o *OrderBoxLayoutItemDTO) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrderBoxLayoutItemDTO) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrderBoxLayoutItemDTO) SetId(v int64) {
	o.Id = v
}

// GetFullCount returns the FullCount field value if set, zero value otherwise.
func (o *OrderBoxLayoutItemDTO) GetFullCount() int32 {
	if o == nil || IsNil(o.FullCount) {
		var ret int32
		return ret
	}
	return *o.FullCount
}

// GetFullCountOk returns a tuple with the FullCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBoxLayoutItemDTO) GetFullCountOk() (*int32, bool) {
	if o == nil || IsNil(o.FullCount) {
		return nil, false
	}
	return o.FullCount, true
}

// HasFullCount returns a boolean if a field has been set.
func (o *OrderBoxLayoutItemDTO) HasFullCount() bool {
	if o != nil && !IsNil(o.FullCount) {
		return true
	}

	return false
}

// SetFullCount gets a reference to the given int32 and assigns it to the FullCount field.
func (o *OrderBoxLayoutItemDTO) SetFullCount(v int32) {
	o.FullCount = &v
}

// GetPartialCount returns the PartialCount field value if set, zero value otherwise.
func (o *OrderBoxLayoutItemDTO) GetPartialCount() OrderBoxLayoutPartialCountDTO {
	if o == nil || IsNil(o.PartialCount) {
		var ret OrderBoxLayoutPartialCountDTO
		return ret
	}
	return *o.PartialCount
}

// GetPartialCountOk returns a tuple with the PartialCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBoxLayoutItemDTO) GetPartialCountOk() (*OrderBoxLayoutPartialCountDTO, bool) {
	if o == nil || IsNil(o.PartialCount) {
		return nil, false
	}
	return o.PartialCount, true
}

// HasPartialCount returns a boolean if a field has been set.
func (o *OrderBoxLayoutItemDTO) HasPartialCount() bool {
	if o != nil && !IsNil(o.PartialCount) {
		return true
	}

	return false
}

// SetPartialCount gets a reference to the given OrderBoxLayoutPartialCountDTO and assigns it to the PartialCount field.
func (o *OrderBoxLayoutItemDTO) SetPartialCount(v OrderBoxLayoutPartialCountDTO) {
	o.PartialCount = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderBoxLayoutItemDTO) GetInstances() []BriefOrderItemInstanceDTO {
	if o == nil {
		var ret []BriefOrderItemInstanceDTO
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderBoxLayoutItemDTO) GetInstancesOk() ([]BriefOrderItemInstanceDTO, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *OrderBoxLayoutItemDTO) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []BriefOrderItemInstanceDTO and assigns it to the Instances field.
func (o *OrderBoxLayoutItemDTO) SetInstances(v []BriefOrderItemInstanceDTO) {
	o.Instances = v
}

func (o OrderBoxLayoutItemDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderBoxLayoutItemDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.FullCount) {
		toSerialize["fullCount"] = o.FullCount
	}
	if !IsNil(o.PartialCount) {
		toSerialize["partialCount"] = o.PartialCount
	}
	if o.Instances != nil {
		toSerialize["instances"] = o.Instances
	}
	return toSerialize, nil
}

func (o *OrderBoxLayoutItemDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderBoxLayoutItemDTO := _OrderBoxLayoutItemDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrderBoxLayoutItemDTO)

	if err != nil {
		return err
	}

	*o = OrderBoxLayoutItemDTO(varOrderBoxLayoutItemDTO)

	return err
}

type NullableOrderBoxLayoutItemDTO struct {
	value *OrderBoxLayoutItemDTO
	isSet bool
}

func (v NullableOrderBoxLayoutItemDTO) Get() *OrderBoxLayoutItemDTO {
	return v.value
}

func (v *NullableOrderBoxLayoutItemDTO) Set(val *OrderBoxLayoutItemDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderBoxLayoutItemDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderBoxLayoutItemDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderBoxLayoutItemDTO(val *OrderBoxLayoutItemDTO) *NullableOrderBoxLayoutItemDTO {
	return &NullableOrderBoxLayoutItemDTO{value: val, isSet: true}
}

func (v NullableOrderBoxLayoutItemDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderBoxLayoutItemDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
