/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderStatusType Статус заказа:  * `PLACING` — оформляется, подготовка к резервированию.  * `RESERVED` — зарезервирован, но недооформлен.  * `UNPAID` — оформлен, но еще не оплачен (если выбрана оплата при оформлении).  * `PROCESSING` — находится в обработке.  * `DELIVERY` — передан в службу доставки.  * `PICKUP` — доставлен в пункт самовывоза.  * `DELIVERED` — получен покупателем.  * `CANCELLED` — отменен.  * `PENDING` — ожидает обработки со стороны продавца.  * `PARTIALLY_RETURNED` — возвращен частично.  * `RETURNED` — возвращен полностью.  * `UNKNOWN` — неизвестный статус.  Также могут возвращаться другие значения. Обрабатывать их не требуется.
type OrderStatusType string

// List of OrderStatusType
const (
	OrderStatusType_PLACING            OrderStatusType = "PLACING"
	OrderStatusType_RESERVED           OrderStatusType = "RESERVED"
	OrderStatusType_UNPAID             OrderStatusType = "UNPAID"
	OrderStatusType_PROCESSING         OrderStatusType = "PROCESSING"
	OrderStatusType_DELIVERY           OrderStatusType = "DELIVERY"
	OrderStatusType_PICKUP             OrderStatusType = "PICKUP"
	OrderStatusType_DELIVERED          OrderStatusType = "DELIVERED"
	OrderStatusType_CANCELLED          OrderStatusType = "CANCELLED"
	OrderStatusType_PENDING            OrderStatusType = "PENDING"
	OrderStatusType_PARTIALLY_RETURNED OrderStatusType = "PARTIALLY_RETURNED"
	OrderStatusType_RETURNED           OrderStatusType = "RETURNED"
	OrderStatusType_UNKNOWN            OrderStatusType = "UNKNOWN"
)

// All allowed values of OrderStatusType enum
var AllowedOrderStatusTypeEnumValues = []OrderStatusType{
	"PLACING",
	"RESERVED",
	"UNPAID",
	"PROCESSING",
	"DELIVERY",
	"PICKUP",
	"DELIVERED",
	"CANCELLED",
	"PENDING",
	"PARTIALLY_RETURNED",
	"RETURNED",
	"UNKNOWN",
}

func (v *OrderStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderStatusType(value)
	for _, existing := range AllowedOrderStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderStatusType", value)
}

// NewOrderStatusTypeFromValue returns a pointer to a valid OrderStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderStatusTypeFromValue(v string) (*OrderStatusType, error) {
	ev := OrderStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderStatusType: valid values are %v", v, AllowedOrderStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderStatusType) IsValid() bool {
	for _, existing := range AllowedOrderStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderStatusType value
func (v OrderStatusType) Ptr() *OrderStatusType {
	return &v
}

type NullableOrderStatusType struct {
	value *OrderStatusType
	isSet bool
}

func (v NullableOrderStatusType) Get() *OrderStatusType {
	return v.value
}

func (v *NullableOrderStatusType) Set(val *OrderStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderStatusType(val *OrderStatusType) *NullableOrderStatusType {
	return &NullableOrderStatusType{value: val, isSet: true}
}

func (v NullableOrderStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
