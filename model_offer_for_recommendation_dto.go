/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OfferForRecommendationDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferForRecommendationDTO{}

// OfferForRecommendationDTO Информация о состоянии цены на товар.
type OfferForRecommendationDTO struct {
	// Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
	OfferId         *string                   `json:"offerId,omitempty" validate:"regexp=^(?=.*\\\\S.*)[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`
	Price           *BasePriceDTO             `json:"price,omitempty"`
	CofinancePrice  *GetPriceDTO              `json:"cofinancePrice,omitempty"`
	Competitiveness *PriceCompetitivenessType `json:"competitiveness,omitempty"`
	// Количество показов карточки товара за последние 7 дней.
	Shows *int64 `json:"shows,omitempty"`
}

// NewOfferForRecommendationDTO instantiates a new OfferForRecommendationDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferForRecommendationDTO() *OfferForRecommendationDTO {
	this := OfferForRecommendationDTO{}
	return &this
}

// NewOfferForRecommendationDTOWithDefaults instantiates a new OfferForRecommendationDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferForRecommendationDTOWithDefaults() *OfferForRecommendationDTO {
	this := OfferForRecommendationDTO{}
	return &this
}

// GetOfferId returns the OfferId field value if set, zero value otherwise.
func (o *OfferForRecommendationDTO) GetOfferId() string {
	if o == nil || IsNil(o.OfferId) {
		var ret string
		return ret
	}
	return *o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferForRecommendationDTO) GetOfferIdOk() (*string, bool) {
	if o == nil || IsNil(o.OfferId) {
		return nil, false
	}
	return o.OfferId, true
}

// HasOfferId returns a boolean if a field has been set.
func (o *OfferForRecommendationDTO) HasOfferId() bool {
	if o != nil && !IsNil(o.OfferId) {
		return true
	}

	return false
}

// SetOfferId gets a reference to the given string and assigns it to the OfferId field.
func (o *OfferForRecommendationDTO) SetOfferId(v string) {
	o.OfferId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OfferForRecommendationDTO) GetPrice() BasePriceDTO {
	if o == nil || IsNil(o.Price) {
		var ret BasePriceDTO
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferForRecommendationDTO) GetPriceOk() (*BasePriceDTO, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OfferForRecommendationDTO) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given BasePriceDTO and assigns it to the Price field.
func (o *OfferForRecommendationDTO) SetPrice(v BasePriceDTO) {
	o.Price = &v
}

// GetCofinancePrice returns the CofinancePrice field value if set, zero value otherwise.
func (o *OfferForRecommendationDTO) GetCofinancePrice() GetPriceDTO {
	if o == nil || IsNil(o.CofinancePrice) {
		var ret GetPriceDTO
		return ret
	}
	return *o.CofinancePrice
}

// GetCofinancePriceOk returns a tuple with the CofinancePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferForRecommendationDTO) GetCofinancePriceOk() (*GetPriceDTO, bool) {
	if o == nil || IsNil(o.CofinancePrice) {
		return nil, false
	}
	return o.CofinancePrice, true
}

// HasCofinancePrice returns a boolean if a field has been set.
func (o *OfferForRecommendationDTO) HasCofinancePrice() bool {
	if o != nil && !IsNil(o.CofinancePrice) {
		return true
	}

	return false
}

// SetCofinancePrice gets a reference to the given GetPriceDTO and assigns it to the CofinancePrice field.
func (o *OfferForRecommendationDTO) SetCofinancePrice(v GetPriceDTO) {
	o.CofinancePrice = &v
}

// GetCompetitiveness returns the Competitiveness field value if set, zero value otherwise.
func (o *OfferForRecommendationDTO) GetCompetitiveness() PriceCompetitivenessType {
	if o == nil || IsNil(o.Competitiveness) {
		var ret PriceCompetitivenessType
		return ret
	}
	return *o.Competitiveness
}

// GetCompetitivenessOk returns a tuple with the Competitiveness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferForRecommendationDTO) GetCompetitivenessOk() (*PriceCompetitivenessType, bool) {
	if o == nil || IsNil(o.Competitiveness) {
		return nil, false
	}
	return o.Competitiveness, true
}

// HasCompetitiveness returns a boolean if a field has been set.
func (o *OfferForRecommendationDTO) HasCompetitiveness() bool {
	if o != nil && !IsNil(o.Competitiveness) {
		return true
	}

	return false
}

// SetCompetitiveness gets a reference to the given PriceCompetitivenessType and assigns it to the Competitiveness field.
func (o *OfferForRecommendationDTO) SetCompetitiveness(v PriceCompetitivenessType) {
	o.Competitiveness = &v
}

// GetShows returns the Shows field value if set, zero value otherwise.
func (o *OfferForRecommendationDTO) GetShows() int64 {
	if o == nil || IsNil(o.Shows) {
		var ret int64
		return ret
	}
	return *o.Shows
}

// GetShowsOk returns a tuple with the Shows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferForRecommendationDTO) GetShowsOk() (*int64, bool) {
	if o == nil || IsNil(o.Shows) {
		return nil, false
	}
	return o.Shows, true
}

// HasShows returns a boolean if a field has been set.
func (o *OfferForRecommendationDTO) HasShows() bool {
	if o != nil && !IsNil(o.Shows) {
		return true
	}

	return false
}

// SetShows gets a reference to the given int64 and assigns it to the Shows field.
func (o *OfferForRecommendationDTO) SetShows(v int64) {
	o.Shows = &v
}

func (o OfferForRecommendationDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferForRecommendationDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OfferId) {
		toSerialize["offerId"] = o.OfferId
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.CofinancePrice) {
		toSerialize["cofinancePrice"] = o.CofinancePrice
	}
	if !IsNil(o.Competitiveness) {
		toSerialize["competitiveness"] = o.Competitiveness
	}
	if !IsNil(o.Shows) {
		toSerialize["shows"] = o.Shows
	}
	return toSerialize, nil
}

type NullableOfferForRecommendationDTO struct {
	value *OfferForRecommendationDTO
	isSet bool
}

func (v NullableOfferForRecommendationDTO) Get() *OfferForRecommendationDTO {
	return v.value
}

func (v *NullableOfferForRecommendationDTO) Set(val *OfferForRecommendationDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferForRecommendationDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferForRecommendationDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferForRecommendationDTO(val *OfferForRecommendationDTO) *NullableOfferForRecommendationDTO {
	return &NullableOfferForRecommendationDTO{value: val, isSet: true}
}

func (v NullableOfferForRecommendationDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferForRecommendationDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
