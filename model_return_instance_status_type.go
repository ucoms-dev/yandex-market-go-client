/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReturnInstanceStatusType Логистический статус конкретного товара:  * `CREATED` — возврат создан.  * `RECEIVED` — возврат принят у отправителя.  * `IN_TRANSIT` — возврат в пути.  * `READY_FOR_PICKUP` — возврат готов к выдаче магазину.  * `PICKED` — возврат выдан магазину.  * `RECEIVED_ON_FULFILLMENT` — возврат принят на складе Маркета.  * `CANCELLED` — возврат отменен.  * `LOST` — возврат утерян.  * `UTILIZED` — возврат утилизирован.  * `PREPARED_FOR_UTILIZATION` — возврат готов к утилизации.  * `EXPROPRIATED` — товары в возврате направлены на перепродажу.  * `NOT_IN_DEMAND` — возврат не забрали с почты.
type ReturnInstanceStatusType string

// List of ReturnInstanceStatusType
const (
	CREATED                  ReturnInstanceStatusType = "CREATED"
	RECEIVED                 ReturnInstanceStatusType = "RECEIVED"
	IN_TRANSIT               ReturnInstanceStatusType = "IN_TRANSIT"
	READY_FOR_PICKUP         ReturnInstanceStatusType = "READY_FOR_PICKUP"
	PICKED                   ReturnInstanceStatusType = "PICKED"
	RECEIVED_ON_FULFILLMENT  ReturnInstanceStatusType = "RECEIVED_ON_FULFILLMENT"
	CANCELLED                ReturnInstanceStatusType = "CANCELLED"
	LOST                     ReturnInstanceStatusType = "LOST"
	UTILIZED                 ReturnInstanceStatusType = "UTILIZED"
	PREPARED_FOR_UTILIZATION ReturnInstanceStatusType = "PREPARED_FOR_UTILIZATION"
	EXPROPRIATED             ReturnInstanceStatusType = "EXPROPRIATED"
	NOT_IN_DEMAND            ReturnInstanceStatusType = "NOT_IN_DEMAND"
)

// All allowed values of ReturnInstanceStatusType enum
var AllowedReturnInstanceStatusTypeEnumValues = []ReturnInstanceStatusType{
	"CREATED",
	"RECEIVED",
	"IN_TRANSIT",
	"READY_FOR_PICKUP",
	"PICKED",
	"RECEIVED_ON_FULFILLMENT",
	"CANCELLED",
	"LOST",
	"UTILIZED",
	"PREPARED_FOR_UTILIZATION",
	"EXPROPRIATED",
	"NOT_IN_DEMAND",
}

func (v *ReturnInstanceStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReturnInstanceStatusType(value)
	for _, existing := range AllowedReturnInstanceStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReturnInstanceStatusType", value)
}

// NewReturnInstanceStatusTypeFromValue returns a pointer to a valid ReturnInstanceStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReturnInstanceStatusTypeFromValue(v string) (*ReturnInstanceStatusType, error) {
	ev := ReturnInstanceStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReturnInstanceStatusType: valid values are %v", v, AllowedReturnInstanceStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReturnInstanceStatusType) IsValid() bool {
	for _, existing := range AllowedReturnInstanceStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReturnInstanceStatusType value
func (v ReturnInstanceStatusType) Ptr() *ReturnInstanceStatusType {
	return &v
}

type NullableReturnInstanceStatusType struct {
	value *ReturnInstanceStatusType
	isSet bool
}

func (v NullableReturnInstanceStatusType) Get() *ReturnInstanceStatusType {
	return v.value
}

func (v *NullableReturnInstanceStatusType) Set(val *ReturnInstanceStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnInstanceStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnInstanceStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnInstanceStatusType(val *ReturnInstanceStatusType) *NullableReturnInstanceStatusType {
	return &NullableReturnInstanceStatusType{value: val, isSet: true}
}

func (v NullableReturnInstanceStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnInstanceStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
