/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderPromoType Тип скидки:  * `DIRECT_DISCOUNT` — прямая скидка, которую устанавливает продавец или Маркет.  * `BLUE_SET` — комплекты.  * `BLUE_FLASH` — флеш-акция.  * `MARKET_COUPON` — скидка по промокоду Маркета.  * `MARKET_PROMOCODE` — скидка по промокоду магазина.  * `MARKET_BLUE` — скидка на Маркете.  * `CHEAPEST_AS_GIFT` — самый дешевый товар в подарок.  * `CASHBACK` — кешбэк.  * `SPREAD_DISCOUNT_COUNT` — скидка за количество одинаковых товаров.  * `SPREAD_DISCOUNT_RECEIPT` — скидка от суммы чека.  * `DISCOUNT_BY_PAYMENT_TYPE` — прямая скидка при оплате картой Плюса.  * `PERCENT_DISCOUNT` — прямая скидка в процентах.  * `DCO_EXTRA_DISCOUNT` — дополнительная скидка, необходимая для расчета субсидии от Маркета.  * `UNKNOWN` — неизвестный тип.  Устаревшие типы:  * `GENERIC_BUNDLE`.  * `MARKET_COIN`.  * `PRICE_DROP_AS_YOU_SHOP`.  * `SECRET_SALE`.
type OrderPromoType string

// List of OrderPromoType
const (
	OrderPromoType_DIRECT_DISCOUNT          OrderPromoType = "DIRECT_DISCOUNT"
	OrderPromoType_BLUE_SET                 OrderPromoType = "BLUE_SET"
	OrderPromoType_BLUE_FLASH               OrderPromoType = "BLUE_FLASH"
	OrderPromoType_GENERIC_BUNDLE           OrderPromoType = "GENERIC_BUNDLE"
	OrderPromoType_MARKET_COUPON            OrderPromoType = "MARKET_COUPON"
	OrderPromoType_MARKET_PROMOCODE         OrderPromoType = "MARKET_PROMOCODE"
	OrderPromoType_MARKET_BLUE              OrderPromoType = "MARKET_BLUE"
	OrderPromoType_MARKET_COIN              OrderPromoType = "MARKET_COIN"
	OrderPromoType_PRICE_DROP_AS_YOU_SHOP   OrderPromoType = "PRICE_DROP_AS_YOU_SHOP"
	OrderPromoType_SECRET_SALE              OrderPromoType = "SECRET_SALE"
	OrderPromoType_CHEAPEST_AS_GIFT         OrderPromoType = "CHEAPEST_AS_GIFT"
	OrderPromoType_CASHBACK                 OrderPromoType = "CASHBACK"
	OrderPromoType_SPREAD_DISCOUNT_COUNT    OrderPromoType = "SPREAD_DISCOUNT_COUNT"
	OrderPromoType_SPREAD_DISCOUNT_RECEIPT  OrderPromoType = "SPREAD_DISCOUNT_RECEIPT"
	OrderPromoType_DISCOUNT_BY_PAYMENT_TYPE OrderPromoType = "DISCOUNT_BY_PAYMENT_TYPE"
	OrderPromoType_PERCENT_DISCOUNT         OrderPromoType = "PERCENT_DISCOUNT"
	OrderPromoType_DCO_EXTRA_DISCOUNT       OrderPromoType = "DCO_EXTRA_DISCOUNT"
	OrderPromoType_UNKNOWN                  OrderPromoType = "UNKNOWN"
)

// All allowed values of OrderPromoType enum
var AllowedOrderPromoTypeEnumValues = []OrderPromoType{
	"DIRECT_DISCOUNT",
	"BLUE_SET",
	"BLUE_FLASH",
	"GENERIC_BUNDLE",
	"MARKET_COUPON",
	"MARKET_PROMOCODE",
	"MARKET_BLUE",
	"MARKET_COIN",
	"PRICE_DROP_AS_YOU_SHOP",
	"SECRET_SALE",
	"CHEAPEST_AS_GIFT",
	"CASHBACK",
	"SPREAD_DISCOUNT_COUNT",
	"SPREAD_DISCOUNT_RECEIPT",
	"DISCOUNT_BY_PAYMENT_TYPE",
	"PERCENT_DISCOUNT",
	"DCO_EXTRA_DISCOUNT",
	"UNKNOWN",
}

func (v *OrderPromoType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderPromoType(value)
	for _, existing := range AllowedOrderPromoTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderPromoType", value)
}

// NewOrderPromoTypeFromValue returns a pointer to a valid OrderPromoType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderPromoTypeFromValue(v string) (*OrderPromoType, error) {
	ev := OrderPromoType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderPromoType: valid values are %v", v, AllowedOrderPromoTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderPromoType) IsValid() bool {
	for _, existing := range AllowedOrderPromoTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderPromoType value
func (v OrderPromoType) Ptr() *OrderPromoType {
	return &v
}

type NullableOrderPromoType struct {
	value *OrderPromoType
	isSet bool
}

func (v NullableOrderPromoType) Get() *OrderPromoType {
	return v.value
}

func (v *NullableOrderPromoType) Set(val *OrderPromoType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderPromoType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderPromoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderPromoType(val *OrderPromoType) *NullableOrderPromoType {
	return &NullableOrderPromoType{value: val, isSet: true}
}

func (v NullableOrderPromoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderPromoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
