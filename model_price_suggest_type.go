/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PriceSuggestType Тип цены:  * `BUYBOX` — самая низкая цена на товар, по которой он продается сейчас. Эта цена обновляется в режиме реального времени. Если вы установите цену ниже, начнет показываться ваше предложение. Если для этого значения в параметре `price` указана цена, которая совпадает с вашей, значит, ваш товар уже показывается на витрине. Если кроме вас этот товар продают другие продавцы по такой же цене, их предложения также будут отображаться вместе с вашими по очереди. * `DEFAULT_OFFER` — рекомендованная Маркетом цена, которая привлекает покупателей. Рассчитывается только для популярных на сервисе товаров и обновляется раз в четыре часа. * `MIN_PRICE_MARKET` — минимальная цена на Маркете. Самая низкая цена среди всех предложений товара на Маркете во всех регионах, включая те, которые не видны на витрине. Эта цена обновляется в режиме реального времени и обеспечивает большее количество показов на Маркете, чем самая низкая или рекомендованная цена. 
type PriceSuggestType string

// List of PriceSuggestType
const (
	BUYBOX PriceSuggestType = "BUYBOX"
	DEFAULT_OFFER PriceSuggestType = "DEFAULT_OFFER"
	MIN_PRICE_MARKET PriceSuggestType = "MIN_PRICE_MARKET"
)

// All allowed values of PriceSuggestType enum
var AllowedPriceSuggestTypeEnumValues = []PriceSuggestType{
	"BUYBOX",
	"DEFAULT_OFFER",
	"MIN_PRICE_MARKET",
}

func (v *PriceSuggestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceSuggestType(value)
	for _, existing := range AllowedPriceSuggestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceSuggestType", value)
}

// NewPriceSuggestTypeFromValue returns a pointer to a valid PriceSuggestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceSuggestTypeFromValue(v string) (*PriceSuggestType, error) {
	ev := PriceSuggestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceSuggestType: valid values are %v", v, AllowedPriceSuggestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceSuggestType) IsValid() bool {
	for _, existing := range AllowedPriceSuggestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PriceSuggestType value
func (v PriceSuggestType) Ptr() *PriceSuggestType {
	return &v
}

type NullablePriceSuggestType struct {
	value *PriceSuggestType
	isSet bool
}

func (v NullablePriceSuggestType) Get() *PriceSuggestType {
	return v.value
}

func (v *NullablePriceSuggestType) Set(val *PriceSuggestType) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceSuggestType) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceSuggestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceSuggestType(val *PriceSuggestType) *NullablePriceSuggestType {
	return &NullablePriceSuggestType{value: val, isSet: true}
}

func (v NullablePriceSuggestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceSuggestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

