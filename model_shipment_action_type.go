/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ShipmentActionType Действия с отгрузкой:  * `CONFIRM` — подтвердить отгрузку. * `DOWNLOAD_ACT` — скачать акт приема-передачи отгрузки. * `DOWNLOAD_INBOUND_ACT` — скачать список принятых заказов. * `DOWNLOAD_DISCREPANCY_ACT` — скачать акт расхождений. * `CHANGE_PALLETS_COUNT` — указать количество палет. 
type ShipmentActionType string

// List of ShipmentActionType
const (
	CONFIRM ShipmentActionType = "CONFIRM"
	DOWNLOAD_ACT ShipmentActionType = "DOWNLOAD_ACT"
	DOWNLOAD_INBOUND_ACT ShipmentActionType = "DOWNLOAD_INBOUND_ACT"
	DOWNLOAD_DISCREPANCY_ACT ShipmentActionType = "DOWNLOAD_DISCREPANCY_ACT"
	CHANGE_PALLETS_COUNT ShipmentActionType = "CHANGE_PALLETS_COUNT"
)

// All allowed values of ShipmentActionType enum
var AllowedShipmentActionTypeEnumValues = []ShipmentActionType{
	"CONFIRM",
	"DOWNLOAD_ACT",
	"DOWNLOAD_INBOUND_ACT",
	"DOWNLOAD_DISCREPANCY_ACT",
	"CHANGE_PALLETS_COUNT",
}

func (v *ShipmentActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShipmentActionType(value)
	for _, existing := range AllowedShipmentActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShipmentActionType", value)
}

// NewShipmentActionTypeFromValue returns a pointer to a valid ShipmentActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShipmentActionTypeFromValue(v string) (*ShipmentActionType, error) {
	ev := ShipmentActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShipmentActionType: valid values are %v", v, AllowedShipmentActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShipmentActionType) IsValid() bool {
	for _, existing := range AllowedShipmentActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShipmentActionType value
func (v ShipmentActionType) Ptr() *ShipmentActionType {
	return &v
}

type NullableShipmentActionType struct {
	value *ShipmentActionType
	isSet bool
}

func (v NullableShipmentActionType) Get() *ShipmentActionType {
	return v.value
}

func (v *NullableShipmentActionType) Set(val *ShipmentActionType) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentActionType) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentActionType(val *ShipmentActionType) *NullableShipmentActionType {
	return &NullableShipmentActionType{value: val, isSet: true}
}

func (v NullableShipmentActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

