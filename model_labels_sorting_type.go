/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// LabelsSortingType Тип сортировки ярлыков:  * `SORT_BY_GIVEN_ORDER` — ярлыки заказов будут расположены в том же порядке, в каком были переданы идентификаторы заказов в запросе. * `SORT_BY_ORDER_CREATED_AT` — ярлыки будут расположены в соответствии с датой создания заказа с группировкой по магазинам.  Если параметр не указан, ярлыки сортируются по дате создания.
type LabelsSortingType string

// List of LabelsSortingType
const (
	LabelsSortingType_SORT_BY_GIVEN_ORDER      LabelsSortingType = "SORT_BY_GIVEN_ORDER"
	LabelsSortingType_SORT_BY_ORDER_CREATED_AT LabelsSortingType = "SORT_BY_ORDER_CREATED_AT"
)

// All allowed values of LabelsSortingType enum
var AllowedLabelsSortingTypeEnumValues = []LabelsSortingType{
	"SORT_BY_GIVEN_ORDER",
	"SORT_BY_ORDER_CREATED_AT",
}

func (v *LabelsSortingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LabelsSortingType(value)
	for _, existing := range AllowedLabelsSortingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LabelsSortingType", value)
}

// NewLabelsSortingTypeFromValue returns a pointer to a valid LabelsSortingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLabelsSortingTypeFromValue(v string) (*LabelsSortingType, error) {
	ev := LabelsSortingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LabelsSortingType: valid values are %v", v, AllowedLabelsSortingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LabelsSortingType) IsValid() bool {
	for _, existing := range AllowedLabelsSortingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LabelsSortingType value
func (v LabelsSortingType) Ptr() *LabelsSortingType {
	return &v
}

type NullableLabelsSortingType struct {
	value *LabelsSortingType
	isSet bool
}

func (v NullableLabelsSortingType) Get() *LabelsSortingType {
	return v.value
}

func (v *NullableLabelsSortingType) Set(val *LabelsSortingType) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelsSortingType) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelsSortingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelsSortingType(val *LabelsSortingType) *NullableLabelsSortingType {
	return &NullableLabelsSortingType{value: val, isSet: true}
}

func (v NullableLabelsSortingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelsSortingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
