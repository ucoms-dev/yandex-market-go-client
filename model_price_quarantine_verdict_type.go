/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PriceQuarantineVerdictType Типы карантина:  * `PRICE_CHANGE` — новая цена слишком сильно отличается от прежней. В поле `params` будет  новая цена `CURRENT_PRICE` и последняя цена до попадания в карантин `LAST_VALID_PRICE`. * `LOW_PRICE` — установленная цена слишком сильно отличается от рыночной. В поле `params` будет установленная вами цена `CURRENT_PRICE` и порог попадания в карантин `MIN_PRICE`. * `LOW_PRICE_PROMO` — цена после применения акций слишком сильно отличается от рыночной. В поле `params` будет цена после применения акций `CURRENT_PRICE` и порог попадания в карантин `MIN_PRICE`. 
type PriceQuarantineVerdictType string

// List of PriceQuarantineVerdictType
const (
	PRICE_CHANGE PriceQuarantineVerdictType = "PRICE_CHANGE"
	LOW_PRICE PriceQuarantineVerdictType = "LOW_PRICE"
	LOW_PRICE_PROMO PriceQuarantineVerdictType = "LOW_PRICE_PROMO"
)

// All allowed values of PriceQuarantineVerdictType enum
var AllowedPriceQuarantineVerdictTypeEnumValues = []PriceQuarantineVerdictType{
	"PRICE_CHANGE",
	"LOW_PRICE",
	"LOW_PRICE_PROMO",
}

func (v *PriceQuarantineVerdictType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceQuarantineVerdictType(value)
	for _, existing := range AllowedPriceQuarantineVerdictTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceQuarantineVerdictType", value)
}

// NewPriceQuarantineVerdictTypeFromValue returns a pointer to a valid PriceQuarantineVerdictType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceQuarantineVerdictTypeFromValue(v string) (*PriceQuarantineVerdictType, error) {
	ev := PriceQuarantineVerdictType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceQuarantineVerdictType: valid values are %v", v, AllowedPriceQuarantineVerdictTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceQuarantineVerdictType) IsValid() bool {
	for _, existing := range AllowedPriceQuarantineVerdictTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PriceQuarantineVerdictType value
func (v PriceQuarantineVerdictType) Ptr() *PriceQuarantineVerdictType {
	return &v
}

type NullablePriceQuarantineVerdictType struct {
	value *PriceQuarantineVerdictType
	isSet bool
}

func (v NullablePriceQuarantineVerdictType) Get() *PriceQuarantineVerdictType {
	return v.value
}

func (v *NullablePriceQuarantineVerdictType) Set(val *PriceQuarantineVerdictType) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceQuarantineVerdictType) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceQuarantineVerdictType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceQuarantineVerdictType(val *PriceQuarantineVerdictType) *NullablePriceQuarantineVerdictType {
	return &NullablePriceQuarantineVerdictType{value: val, isSet: true}
}

func (v NullablePriceQuarantineVerdictType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceQuarantineVerdictType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

