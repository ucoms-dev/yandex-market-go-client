/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MonthOfYearDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonthOfYearDTO{}

// MonthOfYearDTO Месяц, за который нужен отчет о баллах Маркета.
type MonthOfYearDTO struct {
	// Год.
	Year int32 `json:"year"`
	// Номер месяца.
	Month int32 `json:"month"`
}

type _MonthOfYearDTO MonthOfYearDTO

// NewMonthOfYearDTO instantiates a new MonthOfYearDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthOfYearDTO(year int32, month int32) *MonthOfYearDTO {
	this := MonthOfYearDTO{}
	this.Year = year
	this.Month = month
	return &this
}

// NewMonthOfYearDTOWithDefaults instantiates a new MonthOfYearDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthOfYearDTOWithDefaults() *MonthOfYearDTO {
	this := MonthOfYearDTO{}
	return &this
}

// GetYear returns the Year field value
func (o *MonthOfYearDTO) GetYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *MonthOfYearDTO) GetYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *MonthOfYearDTO) SetYear(v int32) {
	o.Year = v
}

// GetMonth returns the Month field value
func (o *MonthOfYearDTO) GetMonth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *MonthOfYearDTO) GetMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *MonthOfYearDTO) SetMonth(v int32) {
	o.Month = v
}

func (o MonthOfYearDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonthOfYearDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["year"] = o.Year
	toSerialize["month"] = o.Month
	return toSerialize, nil
}

func (o *MonthOfYearDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"year",
		"month",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMonthOfYearDTO := _MonthOfYearDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMonthOfYearDTO)

	if err != nil {
		return err
	}

	*o = MonthOfYearDTO(varMonthOfYearDTO)

	return err
}

type NullableMonthOfYearDTO struct {
	value *MonthOfYearDTO
	isSet bool
}

func (v NullableMonthOfYearDTO) Get() *MonthOfYearDTO {
	return v.value
}

func (v *NullableMonthOfYearDTO) Set(val *MonthOfYearDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthOfYearDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthOfYearDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthOfYearDTO(val *MonthOfYearDTO) *NullableMonthOfYearDTO {
	return &NullableMonthOfYearDTO{value: val, isSet: true}
}

func (v NullableMonthOfYearDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthOfYearDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
