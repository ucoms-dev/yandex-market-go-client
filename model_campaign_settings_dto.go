/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CampaignSettingsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CampaignSettingsDTO{}

// CampaignSettingsDTO Настройки магазина.
type CampaignSettingsDTO struct {
	// Идентификатор региона, в котором находится магазин.
	CountryRegion *int64 `json:"countryRegion,omitempty"`
	// Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — `null`. 
	ShopName *string `json:"shopName,omitempty"`
	// Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * `false` — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * `true` — магазин размещен на сайтах партнеров Яндекс Дистрибуции. 
	ShowInContext *bool `json:"showInContext,omitempty"`
	// Признак показа предложений магазина в блоке над результатами поиска (cпецразмещение). Возможные значения: * `false` — предложения не показываются в блоке cпецразмещения. * `true` — предложения показываются в блоке cпецразмещения. 
	ShowInPremium *bool `json:"showInPremium,omitempty"`
	// Признак использования внешней интернет-статистики. Возможные значения: * `false` — внешняя интернет-статистика не используется. * `true` — внешняя интернет-статистика используется. 
	UseOpenStat *bool `json:"useOpenStat,omitempty"`
	LocalRegion *CampaignSettingsLocalRegionDTO `json:"localRegion,omitempty"`
}

// NewCampaignSettingsDTO instantiates a new CampaignSettingsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCampaignSettingsDTO() *CampaignSettingsDTO {
	this := CampaignSettingsDTO{}
	return &this
}

// NewCampaignSettingsDTOWithDefaults instantiates a new CampaignSettingsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCampaignSettingsDTOWithDefaults() *CampaignSettingsDTO {
	this := CampaignSettingsDTO{}
	return &this
}

// GetCountryRegion returns the CountryRegion field value if set, zero value otherwise.
func (o *CampaignSettingsDTO) GetCountryRegion() int64 {
	if o == nil || IsNil(o.CountryRegion) {
		var ret int64
		return ret
	}
	return *o.CountryRegion
}

// GetCountryRegionOk returns a tuple with the CountryRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignSettingsDTO) GetCountryRegionOk() (*int64, bool) {
	if o == nil || IsNil(o.CountryRegion) {
		return nil, false
	}
	return o.CountryRegion, true
}

// HasCountryRegion returns a boolean if a field has been set.
func (o *CampaignSettingsDTO) HasCountryRegion() bool {
	if o != nil && !IsNil(o.CountryRegion) {
		return true
	}

	return false
}

// SetCountryRegion gets a reference to the given int64 and assigns it to the CountryRegion field.
func (o *CampaignSettingsDTO) SetCountryRegion(v int64) {
	o.CountryRegion = &v
}

// GetShopName returns the ShopName field value if set, zero value otherwise.
func (o *CampaignSettingsDTO) GetShopName() string {
	if o == nil || IsNil(o.ShopName) {
		var ret string
		return ret
	}
	return *o.ShopName
}

// GetShopNameOk returns a tuple with the ShopName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignSettingsDTO) GetShopNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShopName) {
		return nil, false
	}
	return o.ShopName, true
}

// HasShopName returns a boolean if a field has been set.
func (o *CampaignSettingsDTO) HasShopName() bool {
	if o != nil && !IsNil(o.ShopName) {
		return true
	}

	return false
}

// SetShopName gets a reference to the given string and assigns it to the ShopName field.
func (o *CampaignSettingsDTO) SetShopName(v string) {
	o.ShopName = &v
}

// GetShowInContext returns the ShowInContext field value if set, zero value otherwise.
func (o *CampaignSettingsDTO) GetShowInContext() bool {
	if o == nil || IsNil(o.ShowInContext) {
		var ret bool
		return ret
	}
	return *o.ShowInContext
}

// GetShowInContextOk returns a tuple with the ShowInContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignSettingsDTO) GetShowInContextOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowInContext) {
		return nil, false
	}
	return o.ShowInContext, true
}

// HasShowInContext returns a boolean if a field has been set.
func (o *CampaignSettingsDTO) HasShowInContext() bool {
	if o != nil && !IsNil(o.ShowInContext) {
		return true
	}

	return false
}

// SetShowInContext gets a reference to the given bool and assigns it to the ShowInContext field.
func (o *CampaignSettingsDTO) SetShowInContext(v bool) {
	o.ShowInContext = &v
}

// GetShowInPremium returns the ShowInPremium field value if set, zero value otherwise.
func (o *CampaignSettingsDTO) GetShowInPremium() bool {
	if o == nil || IsNil(o.ShowInPremium) {
		var ret bool
		return ret
	}
	return *o.ShowInPremium
}

// GetShowInPremiumOk returns a tuple with the ShowInPremium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignSettingsDTO) GetShowInPremiumOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowInPremium) {
		return nil, false
	}
	return o.ShowInPremium, true
}

// HasShowInPremium returns a boolean if a field has been set.
func (o *CampaignSettingsDTO) HasShowInPremium() bool {
	if o != nil && !IsNil(o.ShowInPremium) {
		return true
	}

	return false
}

// SetShowInPremium gets a reference to the given bool and assigns it to the ShowInPremium field.
func (o *CampaignSettingsDTO) SetShowInPremium(v bool) {
	o.ShowInPremium = &v
}

// GetUseOpenStat returns the UseOpenStat field value if set, zero value otherwise.
func (o *CampaignSettingsDTO) GetUseOpenStat() bool {
	if o == nil || IsNil(o.UseOpenStat) {
		var ret bool
		return ret
	}
	return *o.UseOpenStat
}

// GetUseOpenStatOk returns a tuple with the UseOpenStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignSettingsDTO) GetUseOpenStatOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOpenStat) {
		return nil, false
	}
	return o.UseOpenStat, true
}

// HasUseOpenStat returns a boolean if a field has been set.
func (o *CampaignSettingsDTO) HasUseOpenStat() bool {
	if o != nil && !IsNil(o.UseOpenStat) {
		return true
	}

	return false
}

// SetUseOpenStat gets a reference to the given bool and assigns it to the UseOpenStat field.
func (o *CampaignSettingsDTO) SetUseOpenStat(v bool) {
	o.UseOpenStat = &v
}

// GetLocalRegion returns the LocalRegion field value if set, zero value otherwise.
func (o *CampaignSettingsDTO) GetLocalRegion() CampaignSettingsLocalRegionDTO {
	if o == nil || IsNil(o.LocalRegion) {
		var ret CampaignSettingsLocalRegionDTO
		return ret
	}
	return *o.LocalRegion
}

// GetLocalRegionOk returns a tuple with the LocalRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignSettingsDTO) GetLocalRegionOk() (*CampaignSettingsLocalRegionDTO, bool) {
	if o == nil || IsNil(o.LocalRegion) {
		return nil, false
	}
	return o.LocalRegion, true
}

// HasLocalRegion returns a boolean if a field has been set.
func (o *CampaignSettingsDTO) HasLocalRegion() bool {
	if o != nil && !IsNil(o.LocalRegion) {
		return true
	}

	return false
}

// SetLocalRegion gets a reference to the given CampaignSettingsLocalRegionDTO and assigns it to the LocalRegion field.
func (o *CampaignSettingsDTO) SetLocalRegion(v CampaignSettingsLocalRegionDTO) {
	o.LocalRegion = &v
}

func (o CampaignSettingsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CampaignSettingsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountryRegion) {
		toSerialize["countryRegion"] = o.CountryRegion
	}
	if !IsNil(o.ShopName) {
		toSerialize["shopName"] = o.ShopName
	}
	if !IsNil(o.ShowInContext) {
		toSerialize["showInContext"] = o.ShowInContext
	}
	if !IsNil(o.ShowInPremium) {
		toSerialize["showInPremium"] = o.ShowInPremium
	}
	if !IsNil(o.UseOpenStat) {
		toSerialize["useOpenStat"] = o.UseOpenStat
	}
	if !IsNil(o.LocalRegion) {
		toSerialize["localRegion"] = o.LocalRegion
	}
	return toSerialize, nil
}

type NullableCampaignSettingsDTO struct {
	value *CampaignSettingsDTO
	isSet bool
}

func (v NullableCampaignSettingsDTO) Get() *CampaignSettingsDTO {
	return v.value
}

func (v *NullableCampaignSettingsDTO) Set(val *CampaignSettingsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignSettingsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignSettingsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignSettingsDTO(val *CampaignSettingsDTO) *NullableCampaignSettingsDTO {
	return &NullableCampaignSettingsDTO{value: val, isSet: true}
}

func (v NullableCampaignSettingsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignSettingsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


