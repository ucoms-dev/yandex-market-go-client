/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrdersStatsSubsidyType Источник баллов, которые используются для уменьшения стоимости размещения:  * `YANDEX_CASHBACK` — скидка по подписке Яндекс Плюс.  * `SUBSIDY` — скидка Маркета (по акциям, промокодам, купонам и т. д.)  * `DELIVERY` — скидка за доставку (DBS). 
type OrdersStatsSubsidyType string

// List of OrdersStatsSubsidyType
const (
	YANDEX_CASHBACK OrdersStatsSubsidyType = "YANDEX_CASHBACK"
	SUBSIDY OrdersStatsSubsidyType = "SUBSIDY"
	DELIVERY OrdersStatsSubsidyType = "DELIVERY"
)

// All allowed values of OrdersStatsSubsidyType enum
var AllowedOrdersStatsSubsidyTypeEnumValues = []OrdersStatsSubsidyType{
	"YANDEX_CASHBACK",
	"SUBSIDY",
	"DELIVERY",
}

func (v *OrdersStatsSubsidyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrdersStatsSubsidyType(value)
	for _, existing := range AllowedOrdersStatsSubsidyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrdersStatsSubsidyType", value)
}

// NewOrdersStatsSubsidyTypeFromValue returns a pointer to a valid OrdersStatsSubsidyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersStatsSubsidyTypeFromValue(v string) (*OrdersStatsSubsidyType, error) {
	ev := OrdersStatsSubsidyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrdersStatsSubsidyType: valid values are %v", v, AllowedOrdersStatsSubsidyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersStatsSubsidyType) IsValid() bool {
	for _, existing := range AllowedOrdersStatsSubsidyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrdersStatsSubsidyType value
func (v OrdersStatsSubsidyType) Ptr() *OrdersStatsSubsidyType {
	return &v
}

type NullableOrdersStatsSubsidyType struct {
	value *OrdersStatsSubsidyType
	isSet bool
}

func (v NullableOrdersStatsSubsidyType) Get() *OrdersStatsSubsidyType {
	return v.value
}

func (v *NullableOrdersStatsSubsidyType) Set(val *OrdersStatsSubsidyType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersStatsSubsidyType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersStatsSubsidyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersStatsSubsidyType(val *OrdersStatsSubsidyType) *NullableOrdersStatsSubsidyType {
	return &NullableOrdersStatsSubsidyType{value: val, isSet: true}
}

func (v NullableOrdersStatsSubsidyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersStatsSubsidyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

