/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReturnDecisionSubreasonType Детали причин возврата:   * `DOES_NOT_FIT`:     * `USER_DID_NOT_LIKE` — товар не понравился.     * `USER_CHANGED_MIND` — передумал покупать.     * `DELIVERED_TOO_LONG` — передумал покупать из-за длительного срока доставки.    * `BAD_QUALITY`:     * `BAD_PACKAGE` — заводская упаковка повреждена.     * `DAMAGED` — царапины, сколы.     * `NOT_WORKING` — не включается, не работает.     * `INCOMPLETENESS` — некомплект (не хватает детали в наборе, к товару).     * `WRAPPING_DAMAGED` — транспортная упаковка повреждена.     * `ITEM_WAS_USED` — следы использования на товаре.     * `BROKEN` — товар разбит.     * `BAD_FLOWERS` — некачественные цветы.    * `WRONG_ITEM`:     * `WRONG_ITEM` — не тот товар.     * `WRONG_COLOR` — цвет не соответствует заявленному.     * `DID_NOT_MATCH_DESCRIPTION` — описание или характеристики не соответствуют заявленным.     * `WRONG_ORDER` — доставили чужой заказ.     * `WRONG_AMOUNT_DELIVERED` — неверное количество товара.     * `PARCEL_MISSING` — часть заказа отсутствует.     * `INCOMPLETE` — заказ не привезли полностью.    * `UNKNOWN` — детали причины не указаны. 
type ReturnDecisionSubreasonType string

// List of ReturnDecisionSubreasonType
const (
	USER_DID_NOT_LIKE ReturnDecisionSubreasonType = "USER_DID_NOT_LIKE"
	USER_CHANGED_MIND ReturnDecisionSubreasonType = "USER_CHANGED_MIND"
	DELIVERED_TOO_LONG ReturnDecisionSubreasonType = "DELIVERED_TOO_LONG"
	BAD_PACKAGE ReturnDecisionSubreasonType = "BAD_PACKAGE"
	DAMAGED ReturnDecisionSubreasonType = "DAMAGED"
	NOT_WORKING ReturnDecisionSubreasonType = "NOT_WORKING"
	INCOMPLETENESS ReturnDecisionSubreasonType = "INCOMPLETENESS"
	WRONG_ITEM ReturnDecisionSubreasonType = "WRONG_ITEM"
	WRONG_COLOR ReturnDecisionSubreasonType = "WRONG_COLOR"
	DID_NOT_MATCH_DESCRIPTION ReturnDecisionSubreasonType = "DID_NOT_MATCH_DESCRIPTION"
	WRONG_ORDER ReturnDecisionSubreasonType = "WRONG_ORDER"
	WRONG_AMOUNT_DELIVERED ReturnDecisionSubreasonType = "WRONG_AMOUNT_DELIVERED"
	WRAPPING_DAMAGED ReturnDecisionSubreasonType = "WRAPPING_DAMAGED"
	ITEM_WAS_USED ReturnDecisionSubreasonType = "ITEM_WAS_USED"
	BROKEN ReturnDecisionSubreasonType = "BROKEN"
	BAD_FLOWERS ReturnDecisionSubreasonType = "BAD_FLOWERS"
	PARCEL_MISSING ReturnDecisionSubreasonType = "PARCEL_MISSING"
	INCOMPLETE ReturnDecisionSubreasonType = "INCOMPLETE"
	UNKNOWN ReturnDecisionSubreasonType = "UNKNOWN"
)

// All allowed values of ReturnDecisionSubreasonType enum
var AllowedReturnDecisionSubreasonTypeEnumValues = []ReturnDecisionSubreasonType{
	"USER_DID_NOT_LIKE",
	"USER_CHANGED_MIND",
	"DELIVERED_TOO_LONG",
	"BAD_PACKAGE",
	"DAMAGED",
	"NOT_WORKING",
	"INCOMPLETENESS",
	"WRONG_ITEM",
	"WRONG_COLOR",
	"DID_NOT_MATCH_DESCRIPTION",
	"WRONG_ORDER",
	"WRONG_AMOUNT_DELIVERED",
	"WRAPPING_DAMAGED",
	"ITEM_WAS_USED",
	"BROKEN",
	"BAD_FLOWERS",
	"PARCEL_MISSING",
	"INCOMPLETE",
	"UNKNOWN",
}

func (v *ReturnDecisionSubreasonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReturnDecisionSubreasonType(value)
	for _, existing := range AllowedReturnDecisionSubreasonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReturnDecisionSubreasonType", value)
}

// NewReturnDecisionSubreasonTypeFromValue returns a pointer to a valid ReturnDecisionSubreasonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReturnDecisionSubreasonTypeFromValue(v string) (*ReturnDecisionSubreasonType, error) {
	ev := ReturnDecisionSubreasonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReturnDecisionSubreasonType: valid values are %v", v, AllowedReturnDecisionSubreasonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReturnDecisionSubreasonType) IsValid() bool {
	for _, existing := range AllowedReturnDecisionSubreasonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReturnDecisionSubreasonType value
func (v ReturnDecisionSubreasonType) Ptr() *ReturnDecisionSubreasonType {
	return &v
}

type NullableReturnDecisionSubreasonType struct {
	value *ReturnDecisionSubreasonType
	isSet bool
}

func (v NullableReturnDecisionSubreasonType) Get() *ReturnDecisionSubreasonType {
	return v.value
}

func (v *NullableReturnDecisionSubreasonType) Set(val *ReturnDecisionSubreasonType) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnDecisionSubreasonType) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnDecisionSubreasonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnDecisionSubreasonType(val *ReturnDecisionSubreasonType) *NullableReturnDecisionSubreasonType {
	return &NullableReturnDecisionSubreasonType{value: val, isSet: true}
}

func (v NullableReturnDecisionSubreasonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnDecisionSubreasonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

