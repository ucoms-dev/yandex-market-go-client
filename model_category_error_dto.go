/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CategoryErrorDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CategoryErrorDTO{}

// CategoryErrorDTO Текст ошибки.
type CategoryErrorDTO struct {
	// Идентификатор категории.
	CategoryId *int64 `json:"categoryId,omitempty"`
	Type *CategoryErrorType `json:"type,omitempty"`
}

// NewCategoryErrorDTO instantiates a new CategoryErrorDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryErrorDTO() *CategoryErrorDTO {
	this := CategoryErrorDTO{}
	return &this
}

// NewCategoryErrorDTOWithDefaults instantiates a new CategoryErrorDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryErrorDTOWithDefaults() *CategoryErrorDTO {
	this := CategoryErrorDTO{}
	return &this
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *CategoryErrorDTO) GetCategoryId() int64 {
	if o == nil || IsNil(o.CategoryId) {
		var ret int64
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryErrorDTO) GetCategoryIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *CategoryErrorDTO) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given int64 and assigns it to the CategoryId field.
func (o *CategoryErrorDTO) SetCategoryId(v int64) {
	o.CategoryId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CategoryErrorDTO) GetType() CategoryErrorType {
	if o == nil || IsNil(o.Type) {
		var ret CategoryErrorType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryErrorDTO) GetTypeOk() (*CategoryErrorType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CategoryErrorDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CategoryErrorType and assigns it to the Type field.
func (o *CategoryErrorDTO) SetType(v CategoryErrorType) {
	o.Type = &v
}

func (o CategoryErrorDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CategoryErrorDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CategoryId) {
		toSerialize["categoryId"] = o.CategoryId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCategoryErrorDTO struct {
	value *CategoryErrorDTO
	isSet bool
}

func (v NullableCategoryErrorDTO) Get() *CategoryErrorDTO {
	return v.value
}

func (v *NullableCategoryErrorDTO) Set(val *CategoryErrorDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryErrorDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryErrorDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryErrorDTO(val *CategoryErrorDTO) *NullableCategoryErrorDTO {
	return &NullableCategoryErrorDTO{value: val, isSet: true}
}

func (v NullableCategoryErrorDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryErrorDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


