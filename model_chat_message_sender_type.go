/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ChatMessageSenderType Кто отправил сообщение:  * `PARTNER` — магазин. * `CUSTOMER` — покупатель. * `MARKET` — Маркет. * `SUPPORT` — сотрудник службы поддержки Маркета. 
type ChatMessageSenderType string

// List of ChatMessageSenderType
const (
	PARTNER ChatMessageSenderType = "PARTNER"
	CUSTOMER ChatMessageSenderType = "CUSTOMER"
	MARKET ChatMessageSenderType = "MARKET"
	SUPPORT ChatMessageSenderType = "SUPPORT"
)

// All allowed values of ChatMessageSenderType enum
var AllowedChatMessageSenderTypeEnumValues = []ChatMessageSenderType{
	"PARTNER",
	"CUSTOMER",
	"MARKET",
	"SUPPORT",
}

func (v *ChatMessageSenderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChatMessageSenderType(value)
	for _, existing := range AllowedChatMessageSenderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChatMessageSenderType", value)
}

// NewChatMessageSenderTypeFromValue returns a pointer to a valid ChatMessageSenderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChatMessageSenderTypeFromValue(v string) (*ChatMessageSenderType, error) {
	ev := ChatMessageSenderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChatMessageSenderType: valid values are %v", v, AllowedChatMessageSenderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChatMessageSenderType) IsValid() bool {
	for _, existing := range AllowedChatMessageSenderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChatMessageSenderType value
func (v ChatMessageSenderType) Ptr() *ChatMessageSenderType {
	return &v
}

type NullableChatMessageSenderType struct {
	value *ChatMessageSenderType
	isSet bool
}

func (v NullableChatMessageSenderType) Get() *ChatMessageSenderType {
	return v.value
}

func (v *NullableChatMessageSenderType) Set(val *ChatMessageSenderType) {
	v.value = val
	v.isSet = true
}

func (v NullableChatMessageSenderType) IsSet() bool {
	return v.isSet
}

func (v *NullableChatMessageSenderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatMessageSenderType(val *ChatMessageSenderType) *NullableChatMessageSenderType {
	return &NullableChatMessageSenderType{value: val, isSet: true}
}

func (v NullableChatMessageSenderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatMessageSenderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

