/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OutletVisibilityType Состояние точки продаж.  Возможные значения:  * `HIDDEN` — точка продаж выключена. * `VISIBLE` — точка продаж включена. * `UNKNOWN` — неизвестное состояние точки продажи. При определении состояния произошла ошибка.
type OutletVisibilityType string

// List of OutletVisibilityType
const (
	HIDDEN  OutletVisibilityType = "HIDDEN"
	VISIBLE OutletVisibilityType = "VISIBLE"
	UNKNOWN OutletVisibilityType = "UNKNOWN"
)

// All allowed values of OutletVisibilityType enum
var AllowedOutletVisibilityTypeEnumValues = []OutletVisibilityType{
	"HIDDEN",
	"VISIBLE",
	"UNKNOWN",
}

func (v *OutletVisibilityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OutletVisibilityType(value)
	for _, existing := range AllowedOutletVisibilityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OutletVisibilityType", value)
}

// NewOutletVisibilityTypeFromValue returns a pointer to a valid OutletVisibilityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOutletVisibilityTypeFromValue(v string) (*OutletVisibilityType, error) {
	ev := OutletVisibilityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OutletVisibilityType: valid values are %v", v, AllowedOutletVisibilityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OutletVisibilityType) IsValid() bool {
	for _, existing := range AllowedOutletVisibilityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OutletVisibilityType value
func (v OutletVisibilityType) Ptr() *OutletVisibilityType {
	return &v
}

type NullableOutletVisibilityType struct {
	value *OutletVisibilityType
	isSet bool
}

func (v NullableOutletVisibilityType) Get() *OutletVisibilityType {
	return v.value
}

func (v *NullableOutletVisibilityType) Set(val *OutletVisibilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableOutletVisibilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableOutletVisibilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutletVisibilityType(val *OutletVisibilityType) *NullableOutletVisibilityType {
	return &NullableOutletVisibilityType{value: val, isSet: true}
}

func (v NullableOutletVisibilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutletVisibilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
