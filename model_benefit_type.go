/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BenefitType Типы дополнительных инструментов продвижения:  * `BESTS` — участие в акции «Бестселлеры Маркета». * `SPLIT_0_0_4` — возможность оплаты со Сплитом сроком на 4 месяца. * `SPLIT_0_0_6` — возможность оплаты со Сплитом сроком на 6 месяцев. * `SPLIT_0_0_12` — возможность оплаты со Сплитом сроком на 12 месяцев. * `MARKET_SUBSIDY_1_4` — скидка от Маркета от 1 до 4%. * `MARKET_SUBSIDY_5_9` — скидка от Маркета от 5 до 9%. * `MARKET_SUBSIDY_10` — скидка от Маркета от 10%.
type BenefitType string

// List of BenefitType
const (
	BESTS              BenefitType = "BESTS"
	SPLIT_0_0_4        BenefitType = "SPLIT_0_0_4"
	SPLIT_0_0_6        BenefitType = "SPLIT_0_0_6"
	SPLIT_0_0_12       BenefitType = "SPLIT_0_0_12"
	MARKET_SUBSIDY_1_4 BenefitType = "MARKET_SUBSIDY_1_4"
	MARKET_SUBSIDY_5_9 BenefitType = "MARKET_SUBSIDY_5_9"
	MARKET_SUBSIDY_10  BenefitType = "MARKET_SUBSIDY_10"
)

// All allowed values of BenefitType enum
var AllowedBenefitTypeEnumValues = []BenefitType{
	"BESTS",
	"SPLIT_0_0_4",
	"SPLIT_0_0_6",
	"SPLIT_0_0_12",
	"MARKET_SUBSIDY_1_4",
	"MARKET_SUBSIDY_5_9",
	"MARKET_SUBSIDY_10",
}

func (v *BenefitType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BenefitType(value)
	for _, existing := range AllowedBenefitTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BenefitType", value)
}

// NewBenefitTypeFromValue returns a pointer to a valid BenefitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBenefitTypeFromValue(v string) (*BenefitType, error) {
	ev := BenefitType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BenefitType: valid values are %v", v, AllowedBenefitTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BenefitType) IsValid() bool {
	for _, existing := range AllowedBenefitTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BenefitType value
func (v BenefitType) Ptr() *BenefitType {
	return &v
}

type NullableBenefitType struct {
	value *BenefitType
	isSet bool
}

func (v NullableBenefitType) Get() *BenefitType {
	return v.value
}

func (v *NullableBenefitType) Set(val *BenefitType) {
	v.value = val
	v.isSet = true
}

func (v NullableBenefitType) IsSet() bool {
	return v.isSet
}

func (v *NullableBenefitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBenefitType(val *BenefitType) *NullableBenefitType {
	return &NullableBenefitType{value: val, isSet: true}
}

func (v NullableBenefitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBenefitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
