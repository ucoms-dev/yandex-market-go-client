/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QualityRatingDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QualityRatingDTO{}

// QualityRatingDTO Информация об индексе качества.
type QualityRatingDTO struct {
	// Значение индекса качества.
	Rating int64 `json:"rating"`
	// Дата вычисления.  Формат даты: `ГГГГ‑ММ‑ДД`. 
	CalculationDate string `json:"calculationDate"`
	// Составляющие индекса качества.
	Components []QualityRatingComponentDTO `json:"components"`
}

type _QualityRatingDTO QualityRatingDTO

// NewQualityRatingDTO instantiates a new QualityRatingDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQualityRatingDTO(rating int64, calculationDate string, components []QualityRatingComponentDTO) *QualityRatingDTO {
	this := QualityRatingDTO{}
	this.Rating = rating
	this.CalculationDate = calculationDate
	this.Components = components
	return &this
}

// NewQualityRatingDTOWithDefaults instantiates a new QualityRatingDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQualityRatingDTOWithDefaults() *QualityRatingDTO {
	this := QualityRatingDTO{}
	return &this
}

// GetRating returns the Rating field value
func (o *QualityRatingDTO) GetRating() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value
// and a boolean to check if the value has been set.
func (o *QualityRatingDTO) GetRatingOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rating, true
}

// SetRating sets field value
func (o *QualityRatingDTO) SetRating(v int64) {
	o.Rating = v
}

// GetCalculationDate returns the CalculationDate field value
func (o *QualityRatingDTO) GetCalculationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CalculationDate
}

// GetCalculationDateOk returns a tuple with the CalculationDate field value
// and a boolean to check if the value has been set.
func (o *QualityRatingDTO) GetCalculationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CalculationDate, true
}

// SetCalculationDate sets field value
func (o *QualityRatingDTO) SetCalculationDate(v string) {
	o.CalculationDate = v
}

// GetComponents returns the Components field value
func (o *QualityRatingDTO) GetComponents() []QualityRatingComponentDTO {
	if o == nil {
		var ret []QualityRatingComponentDTO
		return ret
	}

	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value
// and a boolean to check if the value has been set.
func (o *QualityRatingDTO) GetComponentsOk() ([]QualityRatingComponentDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Components, true
}

// SetComponents sets field value
func (o *QualityRatingDTO) SetComponents(v []QualityRatingComponentDTO) {
	o.Components = v
}

func (o QualityRatingDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QualityRatingDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rating"] = o.Rating
	toSerialize["calculationDate"] = o.CalculationDate
	toSerialize["components"] = o.Components
	return toSerialize, nil
}

func (o *QualityRatingDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rating",
		"calculationDate",
		"components",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQualityRatingDTO := _QualityRatingDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQualityRatingDTO)

	if err != nil {
		return err
	}

	*o = QualityRatingDTO(varQualityRatingDTO)

	return err
}

type NullableQualityRatingDTO struct {
	value *QualityRatingDTO
	isSet bool
}

func (v NullableQualityRatingDTO) Get() *QualityRatingDTO {
	return v.value
}

func (v *NullableQualityRatingDTO) Set(val *QualityRatingDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableQualityRatingDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableQualityRatingDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQualityRatingDTO(val *QualityRatingDTO) *NullableQualityRatingDTO {
	return &NullableQualityRatingDTO{value: val, isSet: true}
}

func (v NullableQualityRatingDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQualityRatingDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


