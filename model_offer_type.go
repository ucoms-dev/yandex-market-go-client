/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OfferType Особый тип товара:  * `DEFAULT` — товары, для которых вы передавали особый тип ранее и хотите убрать его. * `MEDICINE` — лекарства. * `BOOK` — бумажные и электронные книги. * `AUDIOBOOK` — аудиокниги. * `ARTIST_TITLE` — музыкальная и видеопродукция. * `ON_DEMAND` — товары на заказ. * `ALCOHOL` — алкоголь.  {% note info \"Если ваш товар — книга\" %}  Укажите год издания в характеристиках товара. [Подробнее о параметре](../../reference/business-assortment/updateOfferMappings.md#offerparamdto)  {% endnote %}
type OfferType string

// List of OfferType
const (
	DEFAULT      OfferType = "DEFAULT"
	MEDICINE     OfferType = "MEDICINE"
	BOOK         OfferType = "BOOK"
	AUDIOBOOK    OfferType = "AUDIOBOOK"
	ARTIST_TITLE OfferType = "ARTIST_TITLE"
	ON_DEMAND    OfferType = "ON_DEMAND"
	ALCOHOL      OfferType = "ALCOHOL"
)

// All allowed values of OfferType enum
var AllowedOfferTypeEnumValues = []OfferType{
	"DEFAULT",
	"MEDICINE",
	"BOOK",
	"AUDIOBOOK",
	"ARTIST_TITLE",
	"ON_DEMAND",
	"ALCOHOL",
}

func (v *OfferType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OfferType(value)
	for _, existing := range AllowedOfferTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OfferType", value)
}

// NewOfferTypeFromValue returns a pointer to a valid OfferType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOfferTypeFromValue(v string) (*OfferType, error) {
	ev := OfferType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OfferType: valid values are %v", v, AllowedOfferTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OfferType) IsValid() bool {
	for _, existing := range AllowedOfferTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OfferType value
func (v OfferType) Ptr() *OfferType {
	return &v
}

type NullableOfferType struct {
	value *OfferType
	isSet bool
}

func (v NullableOfferType) Get() *OfferType {
	return v.value
}

func (v *NullableOfferType) Set(val *OfferType) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferType) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferType(val *OfferType) *NullableOfferType {
	return &NullableOfferType{value: val, isSet: true}
}

func (v NullableOfferType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
