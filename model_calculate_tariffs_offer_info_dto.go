/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CalculateTariffsOfferInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalculateTariffsOfferInfoDTO{}

// CalculateTariffsOfferInfoDTO Стоимость услуг.
type CalculateTariffsOfferInfoDTO struct {
	Offer CalculateTariffsOfferDTO `json:"offer"`
	// Список услуг и их стоимость.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
	Tariffs []CalculatedTariffDTO `json:"tariffs"`
}

type _CalculateTariffsOfferInfoDTO CalculateTariffsOfferInfoDTO

// NewCalculateTariffsOfferInfoDTO instantiates a new CalculateTariffsOfferInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalculateTariffsOfferInfoDTO(offer CalculateTariffsOfferDTO, tariffs []CalculatedTariffDTO) *CalculateTariffsOfferInfoDTO {
	this := CalculateTariffsOfferInfoDTO{}
	this.Offer = offer
	this.Tariffs = tariffs
	return &this
}

// NewCalculateTariffsOfferInfoDTOWithDefaults instantiates a new CalculateTariffsOfferInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalculateTariffsOfferInfoDTOWithDefaults() *CalculateTariffsOfferInfoDTO {
	this := CalculateTariffsOfferInfoDTO{}
	return &this
}

// GetOffer returns the Offer field value
func (o *CalculateTariffsOfferInfoDTO) GetOffer() CalculateTariffsOfferDTO {
	if o == nil {
		var ret CalculateTariffsOfferDTO
		return ret
	}

	return o.Offer
}

// GetOfferOk returns a tuple with the Offer field value
// and a boolean to check if the value has been set.
func (o *CalculateTariffsOfferInfoDTO) GetOfferOk() (*CalculateTariffsOfferDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offer, true
}

// SetOffer sets field value
func (o *CalculateTariffsOfferInfoDTO) SetOffer(v CalculateTariffsOfferDTO) {
	o.Offer = v
}

// GetTariffs returns the Tariffs field value
func (o *CalculateTariffsOfferInfoDTO) GetTariffs() []CalculatedTariffDTO {
	if o == nil {
		var ret []CalculatedTariffDTO
		return ret
	}

	return o.Tariffs
}

// GetTariffsOk returns a tuple with the Tariffs field value
// and a boolean to check if the value has been set.
func (o *CalculateTariffsOfferInfoDTO) GetTariffsOk() ([]CalculatedTariffDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tariffs, true
}

// SetTariffs sets field value
func (o *CalculateTariffsOfferInfoDTO) SetTariffs(v []CalculatedTariffDTO) {
	o.Tariffs = v
}

func (o CalculateTariffsOfferInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalculateTariffsOfferInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["offer"] = o.Offer
	toSerialize["tariffs"] = o.Tariffs
	return toSerialize, nil
}

func (o *CalculateTariffsOfferInfoDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"offer",
		"tariffs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCalculateTariffsOfferInfoDTO := _CalculateTariffsOfferInfoDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCalculateTariffsOfferInfoDTO)

	if err != nil {
		return err
	}

	*o = CalculateTariffsOfferInfoDTO(varCalculateTariffsOfferInfoDTO)

	return err
}

type NullableCalculateTariffsOfferInfoDTO struct {
	value *CalculateTariffsOfferInfoDTO
	isSet bool
}

func (v NullableCalculateTariffsOfferInfoDTO) Get() *CalculateTariffsOfferInfoDTO {
	return v.value
}

func (v *NullableCalculateTariffsOfferInfoDTO) Set(val *CalculateTariffsOfferInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculateTariffsOfferInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculateTariffsOfferInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculateTariffsOfferInfoDTO(val *CalculateTariffsOfferInfoDTO) *NullableCalculateTariffsOfferInfoDTO {
	return &NullableCalculateTariffsOfferInfoDTO{value: val, isSet: true}
}

func (v NullableCalculateTariffsOfferInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculateTariffsOfferInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


