/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateOfferDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateOfferDTO{}

// UpdateOfferDTO Параметры товара.
type UpdateOfferDTO struct {
	// Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
	OfferId string `json:"offerId" validate:"regexp=^(?=.*\\\\S.*)[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`
	// Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)
	Name *string `json:"name,omitempty"`
	// Идентификатор категории на Маркете, к которой вы относите свой товар.  При изменении категории убедитесь, что характеристики товара и их значения в параметре `parameterValues` вы передаете для новой категории.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md).
	MarketCategoryId *int64 `json:"marketCategoryId,omitempty"`
	// {% note warning \"Вместо него используйте `marketCategoryId`.\" %}     {% endnote %}  Категория товара в вашем магазине.
	// Deprecated
	Category *string `json:"category,omitempty"`
	// Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/images/sku12345.jpg`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/images/sku12345.jpg`  ❌ `https://www.dropbox.com/s/818f/tovar.jpg`  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html)
	Pictures []string `json:"pictures,omitempty"`
	// Ссылки (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/video/sku12345.avi`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/video/sku12345.avi`  ❌ `https://www.dropbox.com/s/818f/super-tovar.avi`  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html)
	Videos []string `json:"videos,omitempty"`
	// Список инструкций по использованию товара.  Максимальное количество инструкций — 6.
	Manuals []OfferManualDTO `json:"manuals,omitempty"`
	// Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
	Vendor *string `json:"vendor,omitempty"`
	// Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)
	Barcodes []string `json:"barcodes,omitempty"`
	// Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)
	Description *string `json:"description,omitempty"`
	// Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx).
	ManufacturerCountries []string                  `json:"manufacturerCountries,omitempty"`
	WeightDimensions      *OfferWeightDimensionsDTO `json:"weightDimensions,omitempty"`
	// Артикул товара от производителя.
	VendorCode *string `json:"vendorCode,omitempty"`
	// Метки товара, которые использует магазин. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега — 20 символов. У одного товара может быть максимум 10 тегов.
	Tags            []string       `json:"tags,omitempty"`
	ShelfLife       *TimePeriodDTO `json:"shelfLife,omitempty"`
	LifeTime        *TimePeriodDTO `json:"lifeTime,omitempty"`
	GuaranteePeriod *TimePeriodDTO `json:"guaranteePeriod,omitempty"`
	// {% note warning \"Вместо него используйте `commodityCodes` с типом `CUSTOMS_COMMODITY_CODE`.\" %}     {% endnote %}  Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть.
	// Deprecated
	CustomsCommodityCode *string `json:"customsCommodityCode,omitempty"`
	// Товарные коды.
	CommodityCodes []CommodityCodeDTO `json:"commodityCodes,omitempty"`
	// Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html).
	Certificates []string `json:"certificates,omitempty"`
	// Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр.
	BoxCount  *int32             `json:"boxCount,omitempty"`
	Condition *OfferConditionDTO `json:"condition,omitempty"`
	Type      *OfferType         `json:"type,omitempty"`
	// Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md)
	Downloadable *bool `json:"downloadable,omitempty"`
	// Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей.
	Adult *bool   `json:"adult,omitempty"`
	Age   *AgeDTO `json:"age,omitempty"`
	// {% note warning \"При передаче характеристик используйте `parameterValues`.\" %}     {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви.
	// Deprecated
	Params []OfferParamDTO `json:"params,omitempty"`
	// Список характеристик с их значениями.  С `parameterValues` обязательно передавайте `marketCategoryId` — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить. Если в `marketCategoryId` вы меняете категорию, значения общих характеристик для старой и новой категории сохранятся, передавать их не нужно.  Чтобы **удалить** значение заданной характеристики, передайте ее `parameterId` с пустым `value`.
	ParameterValues    []ParameterValueDTO   `json:"parameterValues,omitempty"`
	BasicPrice         *PriceWithDiscountDTO `json:"basicPrice,omitempty"`
	PurchasePrice      *BasePriceDTO         `json:"purchasePrice,omitempty"`
	AdditionalExpenses *BasePriceDTO         `json:"additionalExpenses,omitempty"`
	CofinancePrice     *BasePriceDTO         `json:"cofinancePrice,omitempty"`
	// Использовать первое видео в карточке как видеообложку.  Передайте `true`, чтобы первое видео использовалось как видеообложка, или `false`, чтобы видеообложка не отображалась в карточке товара.
	FirstVideoAsCover *bool `json:"firstVideoAsCover,omitempty"`
	// Параметры, которые вы ранее передали в `UpdateOfferDTO`, а теперь хотите удалить.  Если передать `adult`, `downloadable` и `firstVideoAsCover`, они не удалятся — их значение изменится на `false`.  Можно передать сразу несколько значений.  Не используйте вместе с соответствующим параметром в `UpdateOfferDTO`. Это приведет к ошибке `400`.
	DeleteParameters []DeleteOfferParameterType `json:"deleteParameters,omitempty"`
}

type _UpdateOfferDTO UpdateOfferDTO

// NewUpdateOfferDTO instantiates a new UpdateOfferDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateOfferDTO(offerId string) *UpdateOfferDTO {
	this := UpdateOfferDTO{}
	this.OfferId = offerId
	return &this
}

// NewUpdateOfferDTOWithDefaults instantiates a new UpdateOfferDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateOfferDTOWithDefaults() *UpdateOfferDTO {
	this := UpdateOfferDTO{}
	return &this
}

// GetOfferId returns the OfferId field value
func (o *UpdateOfferDTO) GetOfferId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetOfferIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfferId, true
}

// SetOfferId sets field value
func (o *UpdateOfferDTO) SetOfferId(v string) {
	o.OfferId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateOfferDTO) SetName(v string) {
	o.Name = &v
}

// GetMarketCategoryId returns the MarketCategoryId field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetMarketCategoryId() int64 {
	if o == nil || IsNil(o.MarketCategoryId) {
		var ret int64
		return ret
	}
	return *o.MarketCategoryId
}

// GetMarketCategoryIdOk returns a tuple with the MarketCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetMarketCategoryIdOk() (*int64, bool) {
	if o == nil || IsNil(o.MarketCategoryId) {
		return nil, false
	}
	return o.MarketCategoryId, true
}

// HasMarketCategoryId returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasMarketCategoryId() bool {
	if o != nil && !IsNil(o.MarketCategoryId) {
		return true
	}

	return false
}

// SetMarketCategoryId gets a reference to the given int64 and assigns it to the MarketCategoryId field.
func (o *UpdateOfferDTO) SetMarketCategoryId(v int64) {
	o.MarketCategoryId = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
// Deprecated
func (o *UpdateOfferDTO) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateOfferDTO) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
// Deprecated
func (o *UpdateOfferDTO) SetCategory(v string) {
	o.Category = &v
}

// GetPictures returns the Pictures field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOfferDTO) GetPictures() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Pictures
}

// GetPicturesOk returns a tuple with the Pictures field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOfferDTO) GetPicturesOk() ([]string, bool) {
	if o == nil || IsNil(o.Pictures) {
		return nil, false
	}
	return o.Pictures, true
}

// HasPictures returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasPictures() bool {
	if o != nil && !IsNil(o.Pictures) {
		return true
	}

	return false
}

// SetPictures gets a reference to the given []string and assigns it to the Pictures field.
func (o *UpdateOfferDTO) SetPictures(v []string) {
	o.Pictures = v
}

// GetVideos returns the Videos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOfferDTO) GetVideos() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Videos
}

// GetVideosOk returns a tuple with the Videos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOfferDTO) GetVideosOk() ([]string, bool) {
	if o == nil || IsNil(o.Videos) {
		return nil, false
	}
	return o.Videos, true
}

// HasVideos returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasVideos() bool {
	if o != nil && !IsNil(o.Videos) {
		return true
	}

	return false
}

// SetVideos gets a reference to the given []string and assigns it to the Videos field.
func (o *UpdateOfferDTO) SetVideos(v []string) {
	o.Videos = v
}

// GetManuals returns the Manuals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOfferDTO) GetManuals() []OfferManualDTO {
	if o == nil {
		var ret []OfferManualDTO
		return ret
	}
	return o.Manuals
}

// GetManualsOk returns a tuple with the Manuals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOfferDTO) GetManualsOk() ([]OfferManualDTO, bool) {
	if o == nil || IsNil(o.Manuals) {
		return nil, false
	}
	return o.Manuals, true
}

// HasManuals returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasManuals() bool {
	if o != nil && !IsNil(o.Manuals) {
		return true
	}

	return false
}

// SetManuals gets a reference to the given []OfferManualDTO and assigns it to the Manuals field.
func (o *UpdateOfferDTO) SetManuals(v []OfferManualDTO) {
	o.Manuals = v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *UpdateOfferDTO) SetVendor(v string) {
	o.Vendor = &v
}

// GetBarcodes returns the Barcodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOfferDTO) GetBarcodes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Barcodes
}

// GetBarcodesOk returns a tuple with the Barcodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOfferDTO) GetBarcodesOk() ([]string, bool) {
	if o == nil || IsNil(o.Barcodes) {
		return nil, false
	}
	return o.Barcodes, true
}

// HasBarcodes returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasBarcodes() bool {
	if o != nil && !IsNil(o.Barcodes) {
		return true
	}

	return false
}

// SetBarcodes gets a reference to the given []string and assigns it to the Barcodes field.
func (o *UpdateOfferDTO) SetBarcodes(v []string) {
	o.Barcodes = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateOfferDTO) SetDescription(v string) {
	o.Description = &v
}

// GetManufacturerCountries returns the ManufacturerCountries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOfferDTO) GetManufacturerCountries() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ManufacturerCountries
}

// GetManufacturerCountriesOk returns a tuple with the ManufacturerCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOfferDTO) GetManufacturerCountriesOk() ([]string, bool) {
	if o == nil || IsNil(o.ManufacturerCountries) {
		return nil, false
	}
	return o.ManufacturerCountries, true
}

// HasManufacturerCountries returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasManufacturerCountries() bool {
	if o != nil && !IsNil(o.ManufacturerCountries) {
		return true
	}

	return false
}

// SetManufacturerCountries gets a reference to the given []string and assigns it to the ManufacturerCountries field.
func (o *UpdateOfferDTO) SetManufacturerCountries(v []string) {
	o.ManufacturerCountries = v
}

// GetWeightDimensions returns the WeightDimensions field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetWeightDimensions() OfferWeightDimensionsDTO {
	if o == nil || IsNil(o.WeightDimensions) {
		var ret OfferWeightDimensionsDTO
		return ret
	}
	return *o.WeightDimensions
}

// GetWeightDimensionsOk returns a tuple with the WeightDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetWeightDimensionsOk() (*OfferWeightDimensionsDTO, bool) {
	if o == nil || IsNil(o.WeightDimensions) {
		return nil, false
	}
	return o.WeightDimensions, true
}

// HasWeightDimensions returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasWeightDimensions() bool {
	if o != nil && !IsNil(o.WeightDimensions) {
		return true
	}

	return false
}

// SetWeightDimensions gets a reference to the given OfferWeightDimensionsDTO and assigns it to the WeightDimensions field.
func (o *UpdateOfferDTO) SetWeightDimensions(v OfferWeightDimensionsDTO) {
	o.WeightDimensions = &v
}

// GetVendorCode returns the VendorCode field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetVendorCode() string {
	if o == nil || IsNil(o.VendorCode) {
		var ret string
		return ret
	}
	return *o.VendorCode
}

// GetVendorCodeOk returns a tuple with the VendorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetVendorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.VendorCode) {
		return nil, false
	}
	return o.VendorCode, true
}

// HasVendorCode returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasVendorCode() bool {
	if o != nil && !IsNil(o.VendorCode) {
		return true
	}

	return false
}

// SetVendorCode gets a reference to the given string and assigns it to the VendorCode field.
func (o *UpdateOfferDTO) SetVendorCode(v string) {
	o.VendorCode = &v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOfferDTO) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOfferDTO) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateOfferDTO) SetTags(v []string) {
	o.Tags = v
}

// GetShelfLife returns the ShelfLife field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetShelfLife() TimePeriodDTO {
	if o == nil || IsNil(o.ShelfLife) {
		var ret TimePeriodDTO
		return ret
	}
	return *o.ShelfLife
}

// GetShelfLifeOk returns a tuple with the ShelfLife field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetShelfLifeOk() (*TimePeriodDTO, bool) {
	if o == nil || IsNil(o.ShelfLife) {
		return nil, false
	}
	return o.ShelfLife, true
}

// HasShelfLife returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasShelfLife() bool {
	if o != nil && !IsNil(o.ShelfLife) {
		return true
	}

	return false
}

// SetShelfLife gets a reference to the given TimePeriodDTO and assigns it to the ShelfLife field.
func (o *UpdateOfferDTO) SetShelfLife(v TimePeriodDTO) {
	o.ShelfLife = &v
}

// GetLifeTime returns the LifeTime field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetLifeTime() TimePeriodDTO {
	if o == nil || IsNil(o.LifeTime) {
		var ret TimePeriodDTO
		return ret
	}
	return *o.LifeTime
}

// GetLifeTimeOk returns a tuple with the LifeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetLifeTimeOk() (*TimePeriodDTO, bool) {
	if o == nil || IsNil(o.LifeTime) {
		return nil, false
	}
	return o.LifeTime, true
}

// HasLifeTime returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasLifeTime() bool {
	if o != nil && !IsNil(o.LifeTime) {
		return true
	}

	return false
}

// SetLifeTime gets a reference to the given TimePeriodDTO and assigns it to the LifeTime field.
func (o *UpdateOfferDTO) SetLifeTime(v TimePeriodDTO) {
	o.LifeTime = &v
}

// GetGuaranteePeriod returns the GuaranteePeriod field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetGuaranteePeriod() TimePeriodDTO {
	if o == nil || IsNil(o.GuaranteePeriod) {
		var ret TimePeriodDTO
		return ret
	}
	return *o.GuaranteePeriod
}

// GetGuaranteePeriodOk returns a tuple with the GuaranteePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetGuaranteePeriodOk() (*TimePeriodDTO, bool) {
	if o == nil || IsNil(o.GuaranteePeriod) {
		return nil, false
	}
	return o.GuaranteePeriod, true
}

// HasGuaranteePeriod returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasGuaranteePeriod() bool {
	if o != nil && !IsNil(o.GuaranteePeriod) {
		return true
	}

	return false
}

// SetGuaranteePeriod gets a reference to the given TimePeriodDTO and assigns it to the GuaranteePeriod field.
func (o *UpdateOfferDTO) SetGuaranteePeriod(v TimePeriodDTO) {
	o.GuaranteePeriod = &v
}

// GetCustomsCommodityCode returns the CustomsCommodityCode field value if set, zero value otherwise.
// Deprecated
func (o *UpdateOfferDTO) GetCustomsCommodityCode() string {
	if o == nil || IsNil(o.CustomsCommodityCode) {
		var ret string
		return ret
	}
	return *o.CustomsCommodityCode
}

// GetCustomsCommodityCodeOk returns a tuple with the CustomsCommodityCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateOfferDTO) GetCustomsCommodityCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CustomsCommodityCode) {
		return nil, false
	}
	return o.CustomsCommodityCode, true
}

// HasCustomsCommodityCode returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasCustomsCommodityCode() bool {
	if o != nil && !IsNil(o.CustomsCommodityCode) {
		return true
	}

	return false
}

// SetCustomsCommodityCode gets a reference to the given string and assigns it to the CustomsCommodityCode field.
// Deprecated
func (o *UpdateOfferDTO) SetCustomsCommodityCode(v string) {
	o.CustomsCommodityCode = &v
}

// GetCommodityCodes returns the CommodityCodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOfferDTO) GetCommodityCodes() []CommodityCodeDTO {
	if o == nil {
		var ret []CommodityCodeDTO
		return ret
	}
	return o.CommodityCodes
}

// GetCommodityCodesOk returns a tuple with the CommodityCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOfferDTO) GetCommodityCodesOk() ([]CommodityCodeDTO, bool) {
	if o == nil || IsNil(o.CommodityCodes) {
		return nil, false
	}
	return o.CommodityCodes, true
}

// HasCommodityCodes returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasCommodityCodes() bool {
	if o != nil && !IsNil(o.CommodityCodes) {
		return true
	}

	return false
}

// SetCommodityCodes gets a reference to the given []CommodityCodeDTO and assigns it to the CommodityCodes field.
func (o *UpdateOfferDTO) SetCommodityCodes(v []CommodityCodeDTO) {
	o.CommodityCodes = v
}

// GetCertificates returns the Certificates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOfferDTO) GetCertificates() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOfferDTO) GetCertificatesOk() ([]string, bool) {
	if o == nil || IsNil(o.Certificates) {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasCertificates() bool {
	if o != nil && !IsNil(o.Certificates) {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []string and assigns it to the Certificates field.
func (o *UpdateOfferDTO) SetCertificates(v []string) {
	o.Certificates = v
}

// GetBoxCount returns the BoxCount field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetBoxCount() int32 {
	if o == nil || IsNil(o.BoxCount) {
		var ret int32
		return ret
	}
	return *o.BoxCount
}

// GetBoxCountOk returns a tuple with the BoxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetBoxCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BoxCount) {
		return nil, false
	}
	return o.BoxCount, true
}

// HasBoxCount returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasBoxCount() bool {
	if o != nil && !IsNil(o.BoxCount) {
		return true
	}

	return false
}

// SetBoxCount gets a reference to the given int32 and assigns it to the BoxCount field.
func (o *UpdateOfferDTO) SetBoxCount(v int32) {
	o.BoxCount = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetCondition() OfferConditionDTO {
	if o == nil || IsNil(o.Condition) {
		var ret OfferConditionDTO
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetConditionOk() (*OfferConditionDTO, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given OfferConditionDTO and assigns it to the Condition field.
func (o *UpdateOfferDTO) SetCondition(v OfferConditionDTO) {
	o.Condition = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetType() OfferType {
	if o == nil || IsNil(o.Type) {
		var ret OfferType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetTypeOk() (*OfferType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given OfferType and assigns it to the Type field.
func (o *UpdateOfferDTO) SetType(v OfferType) {
	o.Type = &v
}

// GetDownloadable returns the Downloadable field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetDownloadable() bool {
	if o == nil || IsNil(o.Downloadable) {
		var ret bool
		return ret
	}
	return *o.Downloadable
}

// GetDownloadableOk returns a tuple with the Downloadable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetDownloadableOk() (*bool, bool) {
	if o == nil || IsNil(o.Downloadable) {
		return nil, false
	}
	return o.Downloadable, true
}

// HasDownloadable returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasDownloadable() bool {
	if o != nil && !IsNil(o.Downloadable) {
		return true
	}

	return false
}

// SetDownloadable gets a reference to the given bool and assigns it to the Downloadable field.
func (o *UpdateOfferDTO) SetDownloadable(v bool) {
	o.Downloadable = &v
}

// GetAdult returns the Adult field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetAdult() bool {
	if o == nil || IsNil(o.Adult) {
		var ret bool
		return ret
	}
	return *o.Adult
}

// GetAdultOk returns a tuple with the Adult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetAdultOk() (*bool, bool) {
	if o == nil || IsNil(o.Adult) {
		return nil, false
	}
	return o.Adult, true
}

// HasAdult returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasAdult() bool {
	if o != nil && !IsNil(o.Adult) {
		return true
	}

	return false
}

// SetAdult gets a reference to the given bool and assigns it to the Adult field.
func (o *UpdateOfferDTO) SetAdult(v bool) {
	o.Adult = &v
}

// GetAge returns the Age field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetAge() AgeDTO {
	if o == nil || IsNil(o.Age) {
		var ret AgeDTO
		return ret
	}
	return *o.Age
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetAgeOk() (*AgeDTO, bool) {
	if o == nil || IsNil(o.Age) {
		return nil, false
	}
	return o.Age, true
}

// HasAge returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasAge() bool {
	if o != nil && !IsNil(o.Age) {
		return true
	}

	return false
}

// SetAge gets a reference to the given AgeDTO and assigns it to the Age field.
func (o *UpdateOfferDTO) SetAge(v AgeDTO) {
	o.Age = &v
}

// GetParams returns the Params field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *UpdateOfferDTO) GetParams() []OfferParamDTO {
	if o == nil {
		var ret []OfferParamDTO
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *UpdateOfferDTO) GetParamsOk() ([]OfferParamDTO, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given []OfferParamDTO and assigns it to the Params field.
// Deprecated
func (o *UpdateOfferDTO) SetParams(v []OfferParamDTO) {
	o.Params = v
}

// GetParameterValues returns the ParameterValues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOfferDTO) GetParameterValues() []ParameterValueDTO {
	if o == nil {
		var ret []ParameterValueDTO
		return ret
	}
	return o.ParameterValues
}

// GetParameterValuesOk returns a tuple with the ParameterValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOfferDTO) GetParameterValuesOk() ([]ParameterValueDTO, bool) {
	if o == nil || IsNil(o.ParameterValues) {
		return nil, false
	}
	return o.ParameterValues, true
}

// HasParameterValues returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasParameterValues() bool {
	if o != nil && !IsNil(o.ParameterValues) {
		return true
	}

	return false
}

// SetParameterValues gets a reference to the given []ParameterValueDTO and assigns it to the ParameterValues field.
func (o *UpdateOfferDTO) SetParameterValues(v []ParameterValueDTO) {
	o.ParameterValues = v
}

// GetBasicPrice returns the BasicPrice field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetBasicPrice() PriceWithDiscountDTO {
	if o == nil || IsNil(o.BasicPrice) {
		var ret PriceWithDiscountDTO
		return ret
	}
	return *o.BasicPrice
}

// GetBasicPriceOk returns a tuple with the BasicPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetBasicPriceOk() (*PriceWithDiscountDTO, bool) {
	if o == nil || IsNil(o.BasicPrice) {
		return nil, false
	}
	return o.BasicPrice, true
}

// HasBasicPrice returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasBasicPrice() bool {
	if o != nil && !IsNil(o.BasicPrice) {
		return true
	}

	return false
}

// SetBasicPrice gets a reference to the given PriceWithDiscountDTO and assigns it to the BasicPrice field.
func (o *UpdateOfferDTO) SetBasicPrice(v PriceWithDiscountDTO) {
	o.BasicPrice = &v
}

// GetPurchasePrice returns the PurchasePrice field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetPurchasePrice() BasePriceDTO {
	if o == nil || IsNil(o.PurchasePrice) {
		var ret BasePriceDTO
		return ret
	}
	return *o.PurchasePrice
}

// GetPurchasePriceOk returns a tuple with the PurchasePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetPurchasePriceOk() (*BasePriceDTO, bool) {
	if o == nil || IsNil(o.PurchasePrice) {
		return nil, false
	}
	return o.PurchasePrice, true
}

// HasPurchasePrice returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasPurchasePrice() bool {
	if o != nil && !IsNil(o.PurchasePrice) {
		return true
	}

	return false
}

// SetPurchasePrice gets a reference to the given BasePriceDTO and assigns it to the PurchasePrice field.
func (o *UpdateOfferDTO) SetPurchasePrice(v BasePriceDTO) {
	o.PurchasePrice = &v
}

// GetAdditionalExpenses returns the AdditionalExpenses field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetAdditionalExpenses() BasePriceDTO {
	if o == nil || IsNil(o.AdditionalExpenses) {
		var ret BasePriceDTO
		return ret
	}
	return *o.AdditionalExpenses
}

// GetAdditionalExpensesOk returns a tuple with the AdditionalExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetAdditionalExpensesOk() (*BasePriceDTO, bool) {
	if o == nil || IsNil(o.AdditionalExpenses) {
		return nil, false
	}
	return o.AdditionalExpenses, true
}

// HasAdditionalExpenses returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasAdditionalExpenses() bool {
	if o != nil && !IsNil(o.AdditionalExpenses) {
		return true
	}

	return false
}

// SetAdditionalExpenses gets a reference to the given BasePriceDTO and assigns it to the AdditionalExpenses field.
func (o *UpdateOfferDTO) SetAdditionalExpenses(v BasePriceDTO) {
	o.AdditionalExpenses = &v
}

// GetCofinancePrice returns the CofinancePrice field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetCofinancePrice() BasePriceDTO {
	if o == nil || IsNil(o.CofinancePrice) {
		var ret BasePriceDTO
		return ret
	}
	return *o.CofinancePrice
}

// GetCofinancePriceOk returns a tuple with the CofinancePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetCofinancePriceOk() (*BasePriceDTO, bool) {
	if o == nil || IsNil(o.CofinancePrice) {
		return nil, false
	}
	return o.CofinancePrice, true
}

// HasCofinancePrice returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasCofinancePrice() bool {
	if o != nil && !IsNil(o.CofinancePrice) {
		return true
	}

	return false
}

// SetCofinancePrice gets a reference to the given BasePriceDTO and assigns it to the CofinancePrice field.
func (o *UpdateOfferDTO) SetCofinancePrice(v BasePriceDTO) {
	o.CofinancePrice = &v
}

// GetFirstVideoAsCover returns the FirstVideoAsCover field value if set, zero value otherwise.
func (o *UpdateOfferDTO) GetFirstVideoAsCover() bool {
	if o == nil || IsNil(o.FirstVideoAsCover) {
		var ret bool
		return ret
	}
	return *o.FirstVideoAsCover
}

// GetFirstVideoAsCoverOk returns a tuple with the FirstVideoAsCover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferDTO) GetFirstVideoAsCoverOk() (*bool, bool) {
	if o == nil || IsNil(o.FirstVideoAsCover) {
		return nil, false
	}
	return o.FirstVideoAsCover, true
}

// HasFirstVideoAsCover returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasFirstVideoAsCover() bool {
	if o != nil && !IsNil(o.FirstVideoAsCover) {
		return true
	}

	return false
}

// SetFirstVideoAsCover gets a reference to the given bool and assigns it to the FirstVideoAsCover field.
func (o *UpdateOfferDTO) SetFirstVideoAsCover(v bool) {
	o.FirstVideoAsCover = &v
}

// GetDeleteParameters returns the DeleteParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOfferDTO) GetDeleteParameters() []DeleteOfferParameterType {
	if o == nil {
		var ret []DeleteOfferParameterType
		return ret
	}
	return o.DeleteParameters
}

// GetDeleteParametersOk returns a tuple with the DeleteParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOfferDTO) GetDeleteParametersOk() ([]DeleteOfferParameterType, bool) {
	if o == nil || IsNil(o.DeleteParameters) {
		return nil, false
	}
	return o.DeleteParameters, true
}

// HasDeleteParameters returns a boolean if a field has been set.
func (o *UpdateOfferDTO) HasDeleteParameters() bool {
	if o != nil && !IsNil(o.DeleteParameters) {
		return true
	}

	return false
}

// SetDeleteParameters gets a reference to the given []DeleteOfferParameterType and assigns it to the DeleteParameters field.
func (o *UpdateOfferDTO) SetDeleteParameters(v []DeleteOfferParameterType) {
	o.DeleteParameters = v
}

func (o UpdateOfferDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateOfferDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["offerId"] = o.OfferId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MarketCategoryId) {
		toSerialize["marketCategoryId"] = o.MarketCategoryId
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if o.Pictures != nil {
		toSerialize["pictures"] = o.Pictures
	}
	if o.Videos != nil {
		toSerialize["videos"] = o.Videos
	}
	if o.Manuals != nil {
		toSerialize["manuals"] = o.Manuals
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if o.Barcodes != nil {
		toSerialize["barcodes"] = o.Barcodes
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.ManufacturerCountries != nil {
		toSerialize["manufacturerCountries"] = o.ManufacturerCountries
	}
	if !IsNil(o.WeightDimensions) {
		toSerialize["weightDimensions"] = o.WeightDimensions
	}
	if !IsNil(o.VendorCode) {
		toSerialize["vendorCode"] = o.VendorCode
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ShelfLife) {
		toSerialize["shelfLife"] = o.ShelfLife
	}
	if !IsNil(o.LifeTime) {
		toSerialize["lifeTime"] = o.LifeTime
	}
	if !IsNil(o.GuaranteePeriod) {
		toSerialize["guaranteePeriod"] = o.GuaranteePeriod
	}
	if !IsNil(o.CustomsCommodityCode) {
		toSerialize["customsCommodityCode"] = o.CustomsCommodityCode
	}
	if o.CommodityCodes != nil {
		toSerialize["commodityCodes"] = o.CommodityCodes
	}
	if o.Certificates != nil {
		toSerialize["certificates"] = o.Certificates
	}
	if !IsNil(o.BoxCount) {
		toSerialize["boxCount"] = o.BoxCount
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Downloadable) {
		toSerialize["downloadable"] = o.Downloadable
	}
	if !IsNil(o.Adult) {
		toSerialize["adult"] = o.Adult
	}
	if !IsNil(o.Age) {
		toSerialize["age"] = o.Age
	}
	if o.Params != nil {
		toSerialize["params"] = o.Params
	}
	if o.ParameterValues != nil {
		toSerialize["parameterValues"] = o.ParameterValues
	}
	if !IsNil(o.BasicPrice) {
		toSerialize["basicPrice"] = o.BasicPrice
	}
	if !IsNil(o.PurchasePrice) {
		toSerialize["purchasePrice"] = o.PurchasePrice
	}
	if !IsNil(o.AdditionalExpenses) {
		toSerialize["additionalExpenses"] = o.AdditionalExpenses
	}
	if !IsNil(o.CofinancePrice) {
		toSerialize["cofinancePrice"] = o.CofinancePrice
	}
	if !IsNil(o.FirstVideoAsCover) {
		toSerialize["firstVideoAsCover"] = o.FirstVideoAsCover
	}
	if o.DeleteParameters != nil {
		toSerialize["deleteParameters"] = o.DeleteParameters
	}
	return toSerialize, nil
}

func (o *UpdateOfferDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"offerId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateOfferDTO := _UpdateOfferDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateOfferDTO)

	if err != nil {
		return err
	}

	*o = UpdateOfferDTO(varUpdateOfferDTO)

	return err
}

type NullableUpdateOfferDTO struct {
	value *UpdateOfferDTO
	isSet bool
}

func (v NullableUpdateOfferDTO) Get() *UpdateOfferDTO {
	return v.value
}

func (v *NullableUpdateOfferDTO) Set(val *UpdateOfferDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateOfferDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateOfferDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateOfferDTO(val *UpdateOfferDTO) *NullableUpdateOfferDTO {
	return &NullableUpdateOfferDTO{value: val, isSet: true}
}

func (v NullableUpdateOfferDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateOfferDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
