/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SupplyRequestItemCountersDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupplyRequestItemCountersDTO{}

// SupplyRequestItemCountersDTO Количество товаров в заявке.
type SupplyRequestItemCountersDTO struct {
	// Количество товаров в заявке на поставку.
	PlanCount *int32 `json:"planCount,omitempty"`
	// Количество товаров, которые приняты на складе.
	FactCount *int32 `json:"factCount,omitempty"`
	// Количество лишних товаров.
	SurplusCount *int32 `json:"surplusCount,omitempty"`
	// Количество товаров с недостатками.
	ShortageCount *int32 `json:"shortageCount,omitempty"`
	// Количество товаров с браком.
	DefectCount *int32 `json:"defectCount,omitempty"`
}

// NewSupplyRequestItemCountersDTO instantiates a new SupplyRequestItemCountersDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupplyRequestItemCountersDTO() *SupplyRequestItemCountersDTO {
	this := SupplyRequestItemCountersDTO{}
	return &this
}

// NewSupplyRequestItemCountersDTOWithDefaults instantiates a new SupplyRequestItemCountersDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupplyRequestItemCountersDTOWithDefaults() *SupplyRequestItemCountersDTO {
	this := SupplyRequestItemCountersDTO{}
	return &this
}

// GetPlanCount returns the PlanCount field value if set, zero value otherwise.
func (o *SupplyRequestItemCountersDTO) GetPlanCount() int32 {
	if o == nil || IsNil(o.PlanCount) {
		var ret int32
		return ret
	}
	return *o.PlanCount
}

// GetPlanCountOk returns a tuple with the PlanCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestItemCountersDTO) GetPlanCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PlanCount) {
		return nil, false
	}
	return o.PlanCount, true
}

// HasPlanCount returns a boolean if a field has been set.
func (o *SupplyRequestItemCountersDTO) HasPlanCount() bool {
	if o != nil && !IsNil(o.PlanCount) {
		return true
	}

	return false
}

// SetPlanCount gets a reference to the given int32 and assigns it to the PlanCount field.
func (o *SupplyRequestItemCountersDTO) SetPlanCount(v int32) {
	o.PlanCount = &v
}

// GetFactCount returns the FactCount field value if set, zero value otherwise.
func (o *SupplyRequestItemCountersDTO) GetFactCount() int32 {
	if o == nil || IsNil(o.FactCount) {
		var ret int32
		return ret
	}
	return *o.FactCount
}

// GetFactCountOk returns a tuple with the FactCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestItemCountersDTO) GetFactCountOk() (*int32, bool) {
	if o == nil || IsNil(o.FactCount) {
		return nil, false
	}
	return o.FactCount, true
}

// HasFactCount returns a boolean if a field has been set.
func (o *SupplyRequestItemCountersDTO) HasFactCount() bool {
	if o != nil && !IsNil(o.FactCount) {
		return true
	}

	return false
}

// SetFactCount gets a reference to the given int32 and assigns it to the FactCount field.
func (o *SupplyRequestItemCountersDTO) SetFactCount(v int32) {
	o.FactCount = &v
}

// GetSurplusCount returns the SurplusCount field value if set, zero value otherwise.
func (o *SupplyRequestItemCountersDTO) GetSurplusCount() int32 {
	if o == nil || IsNil(o.SurplusCount) {
		var ret int32
		return ret
	}
	return *o.SurplusCount
}

// GetSurplusCountOk returns a tuple with the SurplusCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestItemCountersDTO) GetSurplusCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SurplusCount) {
		return nil, false
	}
	return o.SurplusCount, true
}

// HasSurplusCount returns a boolean if a field has been set.
func (o *SupplyRequestItemCountersDTO) HasSurplusCount() bool {
	if o != nil && !IsNil(o.SurplusCount) {
		return true
	}

	return false
}

// SetSurplusCount gets a reference to the given int32 and assigns it to the SurplusCount field.
func (o *SupplyRequestItemCountersDTO) SetSurplusCount(v int32) {
	o.SurplusCount = &v
}

// GetShortageCount returns the ShortageCount field value if set, zero value otherwise.
func (o *SupplyRequestItemCountersDTO) GetShortageCount() int32 {
	if o == nil || IsNil(o.ShortageCount) {
		var ret int32
		return ret
	}
	return *o.ShortageCount
}

// GetShortageCountOk returns a tuple with the ShortageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestItemCountersDTO) GetShortageCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ShortageCount) {
		return nil, false
	}
	return o.ShortageCount, true
}

// HasShortageCount returns a boolean if a field has been set.
func (o *SupplyRequestItemCountersDTO) HasShortageCount() bool {
	if o != nil && !IsNil(o.ShortageCount) {
		return true
	}

	return false
}

// SetShortageCount gets a reference to the given int32 and assigns it to the ShortageCount field.
func (o *SupplyRequestItemCountersDTO) SetShortageCount(v int32) {
	o.ShortageCount = &v
}

// GetDefectCount returns the DefectCount field value if set, zero value otherwise.
func (o *SupplyRequestItemCountersDTO) GetDefectCount() int32 {
	if o == nil || IsNil(o.DefectCount) {
		var ret int32
		return ret
	}
	return *o.DefectCount
}

// GetDefectCountOk returns a tuple with the DefectCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestItemCountersDTO) GetDefectCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DefectCount) {
		return nil, false
	}
	return o.DefectCount, true
}

// HasDefectCount returns a boolean if a field has been set.
func (o *SupplyRequestItemCountersDTO) HasDefectCount() bool {
	if o != nil && !IsNil(o.DefectCount) {
		return true
	}

	return false
}

// SetDefectCount gets a reference to the given int32 and assigns it to the DefectCount field.
func (o *SupplyRequestItemCountersDTO) SetDefectCount(v int32) {
	o.DefectCount = &v
}

func (o SupplyRequestItemCountersDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupplyRequestItemCountersDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PlanCount) {
		toSerialize["planCount"] = o.PlanCount
	}
	if !IsNil(o.FactCount) {
		toSerialize["factCount"] = o.FactCount
	}
	if !IsNil(o.SurplusCount) {
		toSerialize["surplusCount"] = o.SurplusCount
	}
	if !IsNil(o.ShortageCount) {
		toSerialize["shortageCount"] = o.ShortageCount
	}
	if !IsNil(o.DefectCount) {
		toSerialize["defectCount"] = o.DefectCount
	}
	return toSerialize, nil
}

type NullableSupplyRequestItemCountersDTO struct {
	value *SupplyRequestItemCountersDTO
	isSet bool
}

func (v NullableSupplyRequestItemCountersDTO) Get() *SupplyRequestItemCountersDTO {
	return v.value
}

func (v *NullableSupplyRequestItemCountersDTO) Set(val *SupplyRequestItemCountersDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyRequestItemCountersDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyRequestItemCountersDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyRequestItemCountersDTO(val *SupplyRequestItemCountersDTO) *NullableSupplyRequestItemCountersDTO {
	return &NullableSupplyRequestItemCountersDTO{value: val, isSet: true}
}

func (v NullableSupplyRequestItemCountersDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyRequestItemCountersDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


