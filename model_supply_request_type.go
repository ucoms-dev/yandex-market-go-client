/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SupplyRequestType Тип заявки:  * `SUPPLY` — поставка товаров. * `WITHDRAW` — вывоз товаров. * `UTILIZATION` — утилизация товаров.
type SupplyRequestType string

// List of SupplyRequestType
const (
	SUPPLY      SupplyRequestType = "SUPPLY"
	WITHDRAW    SupplyRequestType = "WITHDRAW"
	UTILIZATION SupplyRequestType = "UTILIZATION"
)

// All allowed values of SupplyRequestType enum
var AllowedSupplyRequestTypeEnumValues = []SupplyRequestType{
	"SUPPLY",
	"WITHDRAW",
	"UTILIZATION",
}

func (v *SupplyRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SupplyRequestType(value)
	for _, existing := range AllowedSupplyRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SupplyRequestType", value)
}

// NewSupplyRequestTypeFromValue returns a pointer to a valid SupplyRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSupplyRequestTypeFromValue(v string) (*SupplyRequestType, error) {
	ev := SupplyRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SupplyRequestType: valid values are %v", v, AllowedSupplyRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SupplyRequestType) IsValid() bool {
	for _, existing := range AllowedSupplyRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SupplyRequestType value
func (v SupplyRequestType) Ptr() *SupplyRequestType {
	return &v
}

type NullableSupplyRequestType struct {
	value *SupplyRequestType
	isSet bool
}

func (v NullableSupplyRequestType) Get() *SupplyRequestType {
	return v.value
}

func (v *NullableSupplyRequestType) Set(val *SupplyRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyRequestType(val *SupplyRequestType) *NullableSupplyRequestType {
	return &NullableSupplyRequestType{value: val, isSet: true}
}

func (v NullableSupplyRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
