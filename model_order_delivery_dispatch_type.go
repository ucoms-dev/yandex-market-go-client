/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderDeliveryDispatchType Способ отгрузки:  * `BUYER` — доставка покупателю.  * `MARKET_BRANDED_OUTLET` — доставка в пункт выдачи заказов Маркета.  * `SHOP_OUTLET` — доставка в пункт выдачи заказов магазина.  * `UNKNOWN` — неизвестный тип. 
type OrderDeliveryDispatchType string

// List of OrderDeliveryDispatchType
const (
	UNKNOWN OrderDeliveryDispatchType = "UNKNOWN"
	BUYER OrderDeliveryDispatchType = "BUYER"
	MARKET_BRANDED_OUTLET OrderDeliveryDispatchType = "MARKET_BRANDED_OUTLET"
	SHOP_OUTLET OrderDeliveryDispatchType = "SHOP_OUTLET"
)

// All allowed values of OrderDeliveryDispatchType enum
var AllowedOrderDeliveryDispatchTypeEnumValues = []OrderDeliveryDispatchType{
	"UNKNOWN",
	"BUYER",
	"MARKET_BRANDED_OUTLET",
	"SHOP_OUTLET",
}

func (v *OrderDeliveryDispatchType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderDeliveryDispatchType(value)
	for _, existing := range AllowedOrderDeliveryDispatchTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderDeliveryDispatchType", value)
}

// NewOrderDeliveryDispatchTypeFromValue returns a pointer to a valid OrderDeliveryDispatchType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderDeliveryDispatchTypeFromValue(v string) (*OrderDeliveryDispatchType, error) {
	ev := OrderDeliveryDispatchType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderDeliveryDispatchType: valid values are %v", v, AllowedOrderDeliveryDispatchTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderDeliveryDispatchType) IsValid() bool {
	for _, existing := range AllowedOrderDeliveryDispatchTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderDeliveryDispatchType value
func (v OrderDeliveryDispatchType) Ptr() *OrderDeliveryDispatchType {
	return &v
}

type NullableOrderDeliveryDispatchType struct {
	value *OrderDeliveryDispatchType
	isSet bool
}

func (v NullableOrderDeliveryDispatchType) Get() *OrderDeliveryDispatchType {
	return v.value
}

func (v *NullableOrderDeliveryDispatchType) Set(val *OrderDeliveryDispatchType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDeliveryDispatchType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDeliveryDispatchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDeliveryDispatchType(val *OrderDeliveryDispatchType) *NullableOrderDeliveryDispatchType {
	return &NullableOrderDeliveryDispatchType{value: val, isSet: true}
}

func (v NullableOrderDeliveryDispatchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDeliveryDispatchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

