/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateOrderStatusesDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateOrderStatusesDTO{}

// UpdateOrderStatusesDTO Список заказов, статус которых обновился.
type UpdateOrderStatusesDTO struct {
	// Список с обновленными заказами.
	Orders []UpdateOrderStatusDTO `json:"orders"`
}

type _UpdateOrderStatusesDTO UpdateOrderStatusesDTO

// NewUpdateOrderStatusesDTO instantiates a new UpdateOrderStatusesDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateOrderStatusesDTO(orders []UpdateOrderStatusDTO) *UpdateOrderStatusesDTO {
	this := UpdateOrderStatusesDTO{}
	this.Orders = orders
	return &this
}

// NewUpdateOrderStatusesDTOWithDefaults instantiates a new UpdateOrderStatusesDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateOrderStatusesDTOWithDefaults() *UpdateOrderStatusesDTO {
	this := UpdateOrderStatusesDTO{}
	return &this
}

// GetOrders returns the Orders field value
func (o *UpdateOrderStatusesDTO) GetOrders() []UpdateOrderStatusDTO {
	if o == nil {
		var ret []UpdateOrderStatusDTO
		return ret
	}

	return o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value
// and a boolean to check if the value has been set.
func (o *UpdateOrderStatusesDTO) GetOrdersOk() ([]UpdateOrderStatusDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Orders, true
}

// SetOrders sets field value
func (o *UpdateOrderStatusesDTO) SetOrders(v []UpdateOrderStatusDTO) {
	o.Orders = v
}

func (o UpdateOrderStatusesDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateOrderStatusesDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["orders"] = o.Orders
	return toSerialize, nil
}

func (o *UpdateOrderStatusesDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"orders",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateOrderStatusesDTO := _UpdateOrderStatusesDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateOrderStatusesDTO)

	if err != nil {
		return err
	}

	*o = UpdateOrderStatusesDTO(varUpdateOrderStatusesDTO)

	return err
}

type NullableUpdateOrderStatusesDTO struct {
	value *UpdateOrderStatusesDTO
	isSet bool
}

func (v NullableUpdateOrderStatusesDTO) Get() *UpdateOrderStatusesDTO {
	return v.value
}

func (v *NullableUpdateOrderStatusesDTO) Set(val *UpdateOrderStatusesDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateOrderStatusesDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateOrderStatusesDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateOrderStatusesDTO(val *UpdateOrderStatusesDTO) *NullableUpdateOrderStatusesDTO {
	return &NullableUpdateOrderStatusesDTO{value: val, isSet: true}
}

func (v NullableUpdateOrderStatusesDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateOrderStatusesDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


