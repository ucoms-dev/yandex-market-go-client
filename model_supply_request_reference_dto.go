/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SupplyRequestReferenceDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupplyRequestReferenceDTO{}

// SupplyRequestReferenceDTO Информация о связанных заявках.
type SupplyRequestReferenceDTO struct {
	Id   SupplyRequestIdDTO         `json:"id"`
	Type SupplyRequestReferenceType `json:"type"`
}

type _SupplyRequestReferenceDTO SupplyRequestReferenceDTO

// NewSupplyRequestReferenceDTO instantiates a new SupplyRequestReferenceDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupplyRequestReferenceDTO(id SupplyRequestIdDTO, type_ SupplyRequestReferenceType) *SupplyRequestReferenceDTO {
	this := SupplyRequestReferenceDTO{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewSupplyRequestReferenceDTOWithDefaults instantiates a new SupplyRequestReferenceDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupplyRequestReferenceDTOWithDefaults() *SupplyRequestReferenceDTO {
	this := SupplyRequestReferenceDTO{}
	return &this
}

// GetId returns the Id field value
func (o *SupplyRequestReferenceDTO) GetId() SupplyRequestIdDTO {
	if o == nil {
		var ret SupplyRequestIdDTO
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestReferenceDTO) GetIdOk() (*SupplyRequestIdDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SupplyRequestReferenceDTO) SetId(v SupplyRequestIdDTO) {
	o.Id = v
}

// GetType returns the Type field value
func (o *SupplyRequestReferenceDTO) GetType() SupplyRequestReferenceType {
	if o == nil {
		var ret SupplyRequestReferenceType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestReferenceDTO) GetTypeOk() (*SupplyRequestReferenceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SupplyRequestReferenceDTO) SetType(v SupplyRequestReferenceType) {
	o.Type = v
}

func (o SupplyRequestReferenceDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupplyRequestReferenceDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *SupplyRequestReferenceDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupplyRequestReferenceDTO := _SupplyRequestReferenceDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSupplyRequestReferenceDTO)

	if err != nil {
		return err
	}

	*o = SupplyRequestReferenceDTO(varSupplyRequestReferenceDTO)

	return err
}

type NullableSupplyRequestReferenceDTO struct {
	value *SupplyRequestReferenceDTO
	isSet bool
}

func (v NullableSupplyRequestReferenceDTO) Get() *SupplyRequestReferenceDTO {
	return v.value
}

func (v *NullableSupplyRequestReferenceDTO) Set(val *SupplyRequestReferenceDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyRequestReferenceDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyRequestReferenceDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyRequestReferenceDTO(val *SupplyRequestReferenceDTO) *NullableSupplyRequestReferenceDTO {
	return &NullableSupplyRequestReferenceDTO{value: val, isSet: true}
}

func (v NullableSupplyRequestReferenceDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyRequestReferenceDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
