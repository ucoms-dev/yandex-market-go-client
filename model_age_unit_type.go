/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AgeUnitType Единицы измерения возраста:  * `YEAR` — год. * `MONTH` — месяц. 
type AgeUnitType string

// List of AgeUnitType
const (
	YEAR AgeUnitType = "YEAR"
	MONTH AgeUnitType = "MONTH"
)

// All allowed values of AgeUnitType enum
var AllowedAgeUnitTypeEnumValues = []AgeUnitType{
	"YEAR",
	"MONTH",
}

func (v *AgeUnitType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AgeUnitType(value)
	for _, existing := range AllowedAgeUnitTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AgeUnitType", value)
}

// NewAgeUnitTypeFromValue returns a pointer to a valid AgeUnitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAgeUnitTypeFromValue(v string) (*AgeUnitType, error) {
	ev := AgeUnitType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AgeUnitType: valid values are %v", v, AllowedAgeUnitTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AgeUnitType) IsValid() bool {
	for _, existing := range AllowedAgeUnitTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AgeUnitType value
func (v AgeUnitType) Ptr() *AgeUnitType {
	return &v
}

type NullableAgeUnitType struct {
	value *AgeUnitType
	isSet bool
}

func (v NullableAgeUnitType) Get() *AgeUnitType {
	return v.value
}

func (v *NullableAgeUnitType) Set(val *AgeUnitType) {
	v.value = val
	v.isSet = true
}

func (v NullableAgeUnitType) IsSet() bool {
	return v.isSet
}

func (v *NullableAgeUnitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgeUnitType(val *AgeUnitType) *NullableAgeUnitType {
	return &NullableAgeUnitType{value: val, isSet: true}
}

func (v NullableAgeUnitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgeUnitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

