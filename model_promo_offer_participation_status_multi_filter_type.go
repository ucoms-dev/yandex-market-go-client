/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PromoOfferParticipationStatusMultiFilterType Фильтр для товаров, которые могут участвовать в акции:  * `MANUALLY_ADDED` — товары, которые добавлены вручную.  * `RENEWED` — товары, которые добавлены автоматически из предыдущей акции «Бестселлеры Маркета». Только для акций «Бестселлеры Маркета».  * `RENEW_FAILED` — товары, которые не получилось перенести из предыдущей акции «Бестселлеры Маркета». Только для акций «Бестселлеры Маркета».  * `NOT_MANUALLY_ADDED` — товары, которые не участвуют в акции и те, которые добавлены автоматически.  * `MINIMUM_FOR_PROMOS` — товары с установленным минимумом по цене для акций, который соответствует порогу `maxPromoPrice`. Такие товары участвуют в акции с ценой `maxPromoPrice`. Только для акций «Бестселлеры Маркета».  Если не передать параметр `statuses`, вернутся все товары.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index).
type PromoOfferParticipationStatusMultiFilterType string

// List of PromoOfferParticipationStatusMultiFilterType
const (
	PromoOfferParticipationStatusMultiFilterType_MANUALLY_ADDED     PromoOfferParticipationStatusMultiFilterType = "MANUALLY_ADDED"
	PromoOfferParticipationStatusMultiFilterType_RENEWED            PromoOfferParticipationStatusMultiFilterType = "RENEWED"
	PromoOfferParticipationStatusMultiFilterType_RENEW_FAILED       PromoOfferParticipationStatusMultiFilterType = "RENEW_FAILED"
	PromoOfferParticipationStatusMultiFilterType_NOT_MANUALLY_ADDED PromoOfferParticipationStatusMultiFilterType = "NOT_MANUALLY_ADDED"
	PromoOfferParticipationStatusMultiFilterType_MINIMUM_FOR_PROMOS PromoOfferParticipationStatusMultiFilterType = "MINIMUM_FOR_PROMOS"
)

// All allowed values of PromoOfferParticipationStatusMultiFilterType enum
var AllowedPromoOfferParticipationStatusMultiFilterTypeEnumValues = []PromoOfferParticipationStatusMultiFilterType{
	"MANUALLY_ADDED",
	"RENEWED",
	"RENEW_FAILED",
	"NOT_MANUALLY_ADDED",
	"MINIMUM_FOR_PROMOS",
}

func (v *PromoOfferParticipationStatusMultiFilterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PromoOfferParticipationStatusMultiFilterType(value)
	for _, existing := range AllowedPromoOfferParticipationStatusMultiFilterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PromoOfferParticipationStatusMultiFilterType", value)
}

// NewPromoOfferParticipationStatusMultiFilterTypeFromValue returns a pointer to a valid PromoOfferParticipationStatusMultiFilterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPromoOfferParticipationStatusMultiFilterTypeFromValue(v string) (*PromoOfferParticipationStatusMultiFilterType, error) {
	ev := PromoOfferParticipationStatusMultiFilterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PromoOfferParticipationStatusMultiFilterType: valid values are %v", v, AllowedPromoOfferParticipationStatusMultiFilterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PromoOfferParticipationStatusMultiFilterType) IsValid() bool {
	for _, existing := range AllowedPromoOfferParticipationStatusMultiFilterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PromoOfferParticipationStatusMultiFilterType value
func (v PromoOfferParticipationStatusMultiFilterType) Ptr() *PromoOfferParticipationStatusMultiFilterType {
	return &v
}

type NullablePromoOfferParticipationStatusMultiFilterType struct {
	value *PromoOfferParticipationStatusMultiFilterType
	isSet bool
}

func (v NullablePromoOfferParticipationStatusMultiFilterType) Get() *PromoOfferParticipationStatusMultiFilterType {
	return v.value
}

func (v *NullablePromoOfferParticipationStatusMultiFilterType) Set(val *PromoOfferParticipationStatusMultiFilterType) {
	v.value = val
	v.isSet = true
}

func (v NullablePromoOfferParticipationStatusMultiFilterType) IsSet() bool {
	return v.isSet
}

func (v *NullablePromoOfferParticipationStatusMultiFilterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromoOfferParticipationStatusMultiFilterType(val *PromoOfferParticipationStatusMultiFilterType) *NullablePromoOfferParticipationStatusMultiFilterType {
	return &NullablePromoOfferParticipationStatusMultiFilterType{value: val, isSet: true}
}

func (v NullablePromoOfferParticipationStatusMultiFilterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromoOfferParticipationStatusMultiFilterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
