/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ChatStatusType Статус чата:  * `NEW` — новый чат. * `WAITING_FOR_CUSTOMER` — нужен ответ покупателя. * `WAITING_FOR_PARTNER` — нужен ответ магазина. * `WAITING_FOR_ARBITER` — нужен ответ арбитра. * `WAITING_FOR_MARKET` — нужен ответ Маркета. * `FINISHED` — чат завершен. 
type ChatStatusType string

// List of ChatStatusType
const (
	NEW ChatStatusType = "NEW"
	WAITING_FOR_CUSTOMER ChatStatusType = "WAITING_FOR_CUSTOMER"
	WAITING_FOR_PARTNER ChatStatusType = "WAITING_FOR_PARTNER"
	WAITING_FOR_ARBITER ChatStatusType = "WAITING_FOR_ARBITER"
	WAITING_FOR_MARKET ChatStatusType = "WAITING_FOR_MARKET"
	FINISHED ChatStatusType = "FINISHED"
)

// All allowed values of ChatStatusType enum
var AllowedChatStatusTypeEnumValues = []ChatStatusType{
	"NEW",
	"WAITING_FOR_CUSTOMER",
	"WAITING_FOR_PARTNER",
	"WAITING_FOR_ARBITER",
	"WAITING_FOR_MARKET",
	"FINISHED",
}

func (v *ChatStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChatStatusType(value)
	for _, existing := range AllowedChatStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChatStatusType", value)
}

// NewChatStatusTypeFromValue returns a pointer to a valid ChatStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChatStatusTypeFromValue(v string) (*ChatStatusType, error) {
	ev := ChatStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChatStatusType: valid values are %v", v, AllowedChatStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChatStatusType) IsValid() bool {
	for _, existing := range AllowedChatStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChatStatusType value
func (v ChatStatusType) Ptr() *ChatStatusType {
	return &v
}

type NullableChatStatusType struct {
	value *ChatStatusType
	isSet bool
}

func (v NullableChatStatusType) Get() *ChatStatusType {
	return v.value
}

func (v *NullableChatStatusType) Set(val *ChatStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableChatStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableChatStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatStatusType(val *ChatStatusType) *NullableChatStatusType {
	return &NullableChatStatusType{value: val, isSet: true}
}

func (v NullableChatStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

