/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PriceSuggestOfferDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceSuggestOfferDTO{}

// PriceSuggestOfferDTO Товар с ценами для продвижения.
type PriceSuggestOfferDTO struct {
	// SKU на Маркете.
	MarketSku *int64 `json:"marketSku,omitempty"`
	// Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
	OfferId *string `json:"offerId,omitempty" validate:"regexp=^(?=.*\\\\S.*)[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`
	// Цены для продвижения.
	PriceSuggestion []PriceSuggestDTO `json:"priceSuggestion,omitempty"`
}

// NewPriceSuggestOfferDTO instantiates a new PriceSuggestOfferDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceSuggestOfferDTO() *PriceSuggestOfferDTO {
	this := PriceSuggestOfferDTO{}
	return &this
}

// NewPriceSuggestOfferDTOWithDefaults instantiates a new PriceSuggestOfferDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceSuggestOfferDTOWithDefaults() *PriceSuggestOfferDTO {
	this := PriceSuggestOfferDTO{}
	return &this
}

// GetMarketSku returns the MarketSku field value if set, zero value otherwise.
func (o *PriceSuggestOfferDTO) GetMarketSku() int64 {
	if o == nil || IsNil(o.MarketSku) {
		var ret int64
		return ret
	}
	return *o.MarketSku
}

// GetMarketSkuOk returns a tuple with the MarketSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSuggestOfferDTO) GetMarketSkuOk() (*int64, bool) {
	if o == nil || IsNil(o.MarketSku) {
		return nil, false
	}
	return o.MarketSku, true
}

// HasMarketSku returns a boolean if a field has been set.
func (o *PriceSuggestOfferDTO) HasMarketSku() bool {
	if o != nil && !IsNil(o.MarketSku) {
		return true
	}

	return false
}

// SetMarketSku gets a reference to the given int64 and assigns it to the MarketSku field.
func (o *PriceSuggestOfferDTO) SetMarketSku(v int64) {
	o.MarketSku = &v
}

// GetOfferId returns the OfferId field value if set, zero value otherwise.
func (o *PriceSuggestOfferDTO) GetOfferId() string {
	if o == nil || IsNil(o.OfferId) {
		var ret string
		return ret
	}
	return *o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSuggestOfferDTO) GetOfferIdOk() (*string, bool) {
	if o == nil || IsNil(o.OfferId) {
		return nil, false
	}
	return o.OfferId, true
}

// HasOfferId returns a boolean if a field has been set.
func (o *PriceSuggestOfferDTO) HasOfferId() bool {
	if o != nil && !IsNil(o.OfferId) {
		return true
	}

	return false
}

// SetOfferId gets a reference to the given string and assigns it to the OfferId field.
func (o *PriceSuggestOfferDTO) SetOfferId(v string) {
	o.OfferId = &v
}

// GetPriceSuggestion returns the PriceSuggestion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSuggestOfferDTO) GetPriceSuggestion() []PriceSuggestDTO {
	if o == nil {
		var ret []PriceSuggestDTO
		return ret
	}
	return o.PriceSuggestion
}

// GetPriceSuggestionOk returns a tuple with the PriceSuggestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSuggestOfferDTO) GetPriceSuggestionOk() ([]PriceSuggestDTO, bool) {
	if o == nil || IsNil(o.PriceSuggestion) {
		return nil, false
	}
	return o.PriceSuggestion, true
}

// HasPriceSuggestion returns a boolean if a field has been set.
func (o *PriceSuggestOfferDTO) HasPriceSuggestion() bool {
	if o != nil && !IsNil(o.PriceSuggestion) {
		return true
	}

	return false
}

// SetPriceSuggestion gets a reference to the given []PriceSuggestDTO and assigns it to the PriceSuggestion field.
func (o *PriceSuggestOfferDTO) SetPriceSuggestion(v []PriceSuggestDTO) {
	o.PriceSuggestion = v
}

func (o PriceSuggestOfferDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceSuggestOfferDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MarketSku) {
		toSerialize["marketSku"] = o.MarketSku
	}
	if !IsNil(o.OfferId) {
		toSerialize["offerId"] = o.OfferId
	}
	if o.PriceSuggestion != nil {
		toSerialize["priceSuggestion"] = o.PriceSuggestion
	}
	return toSerialize, nil
}

type NullablePriceSuggestOfferDTO struct {
	value *PriceSuggestOfferDTO
	isSet bool
}

func (v NullablePriceSuggestOfferDTO) Get() *PriceSuggestOfferDTO {
	return v.value
}

func (v *NullablePriceSuggestOfferDTO) Set(val *PriceSuggestOfferDTO) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceSuggestOfferDTO) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceSuggestOfferDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceSuggestOfferDTO(val *PriceSuggestOfferDTO) *NullablePriceSuggestOfferDTO {
	return &NullablePriceSuggestOfferDTO{value: val, isSet: true}
}

func (v NullablePriceSuggestOfferDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceSuggestOfferDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
