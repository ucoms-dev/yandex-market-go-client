/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OutletAddressDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutletAddressDTO{}

// OutletAddressDTO Адрес точки продаж.
type OutletAddressDTO struct {
	// Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert \"Типы регионов при создании и редактировании точек продаж\" %}  Указывайте только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах `type` запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %}
	RegionId int64 `json:"regionId"`
	// Улица.
	Street *string `json:"street,omitempty"`
	// Номер дома.
	Number *string `json:"number,omitempty"`
	// Номер строения.
	Building *string `json:"building,omitempty"`
	// Номер владения.
	Estate *string `json:"estate,omitempty"`
	// Номер корпуса.
	Block *string `json:"block,omitempty"`
	// Дополнительная информация.
	Additional *string `json:"additional,omitempty"`
	// Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
	Km *int32 `json:"km,omitempty"`
	// {% note warning \"В ответах города и населенные пункты возвращаются в параметре `regionId`.\" %}     {% endnote %}
	// Deprecated
	City *string `json:"city,omitempty"`
}

type _OutletAddressDTO OutletAddressDTO

// NewOutletAddressDTO instantiates a new OutletAddressDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutletAddressDTO(regionId int64) *OutletAddressDTO {
	this := OutletAddressDTO{}
	this.RegionId = regionId
	return &this
}

// NewOutletAddressDTOWithDefaults instantiates a new OutletAddressDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutletAddressDTOWithDefaults() *OutletAddressDTO {
	this := OutletAddressDTO{}
	return &this
}

// GetRegionId returns the RegionId field value
func (o *OutletAddressDTO) GetRegionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *OutletAddressDTO) GetRegionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *OutletAddressDTO) SetRegionId(v int64) {
	o.RegionId = v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *OutletAddressDTO) GetStreet() string {
	if o == nil || IsNil(o.Street) {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutletAddressDTO) GetStreetOk() (*string, bool) {
	if o == nil || IsNil(o.Street) {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *OutletAddressDTO) HasStreet() bool {
	if o != nil && !IsNil(o.Street) {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *OutletAddressDTO) SetStreet(v string) {
	o.Street = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *OutletAddressDTO) GetNumber() string {
	if o == nil || IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutletAddressDTO) GetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *OutletAddressDTO) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *OutletAddressDTO) SetNumber(v string) {
	o.Number = &v
}

// GetBuilding returns the Building field value if set, zero value otherwise.
func (o *OutletAddressDTO) GetBuilding() string {
	if o == nil || IsNil(o.Building) {
		var ret string
		return ret
	}
	return *o.Building
}

// GetBuildingOk returns a tuple with the Building field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutletAddressDTO) GetBuildingOk() (*string, bool) {
	if o == nil || IsNil(o.Building) {
		return nil, false
	}
	return o.Building, true
}

// HasBuilding returns a boolean if a field has been set.
func (o *OutletAddressDTO) HasBuilding() bool {
	if o != nil && !IsNil(o.Building) {
		return true
	}

	return false
}

// SetBuilding gets a reference to the given string and assigns it to the Building field.
func (o *OutletAddressDTO) SetBuilding(v string) {
	o.Building = &v
}

// GetEstate returns the Estate field value if set, zero value otherwise.
func (o *OutletAddressDTO) GetEstate() string {
	if o == nil || IsNil(o.Estate) {
		var ret string
		return ret
	}
	return *o.Estate
}

// GetEstateOk returns a tuple with the Estate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutletAddressDTO) GetEstateOk() (*string, bool) {
	if o == nil || IsNil(o.Estate) {
		return nil, false
	}
	return o.Estate, true
}

// HasEstate returns a boolean if a field has been set.
func (o *OutletAddressDTO) HasEstate() bool {
	if o != nil && !IsNil(o.Estate) {
		return true
	}

	return false
}

// SetEstate gets a reference to the given string and assigns it to the Estate field.
func (o *OutletAddressDTO) SetEstate(v string) {
	o.Estate = &v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *OutletAddressDTO) GetBlock() string {
	if o == nil || IsNil(o.Block) {
		var ret string
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutletAddressDTO) GetBlockOk() (*string, bool) {
	if o == nil || IsNil(o.Block) {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *OutletAddressDTO) HasBlock() bool {
	if o != nil && !IsNil(o.Block) {
		return true
	}

	return false
}

// SetBlock gets a reference to the given string and assigns it to the Block field.
func (o *OutletAddressDTO) SetBlock(v string) {
	o.Block = &v
}

// GetAdditional returns the Additional field value if set, zero value otherwise.
func (o *OutletAddressDTO) GetAdditional() string {
	if o == nil || IsNil(o.Additional) {
		var ret string
		return ret
	}
	return *o.Additional
}

// GetAdditionalOk returns a tuple with the Additional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutletAddressDTO) GetAdditionalOk() (*string, bool) {
	if o == nil || IsNil(o.Additional) {
		return nil, false
	}
	return o.Additional, true
}

// HasAdditional returns a boolean if a field has been set.
func (o *OutletAddressDTO) HasAdditional() bool {
	if o != nil && !IsNil(o.Additional) {
		return true
	}

	return false
}

// SetAdditional gets a reference to the given string and assigns it to the Additional field.
func (o *OutletAddressDTO) SetAdditional(v string) {
	o.Additional = &v
}

// GetKm returns the Km field value if set, zero value otherwise.
func (o *OutletAddressDTO) GetKm() int32 {
	if o == nil || IsNil(o.Km) {
		var ret int32
		return ret
	}
	return *o.Km
}

// GetKmOk returns a tuple with the Km field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutletAddressDTO) GetKmOk() (*int32, bool) {
	if o == nil || IsNil(o.Km) {
		return nil, false
	}
	return o.Km, true
}

// HasKm returns a boolean if a field has been set.
func (o *OutletAddressDTO) HasKm() bool {
	if o != nil && !IsNil(o.Km) {
		return true
	}

	return false
}

// SetKm gets a reference to the given int32 and assigns it to the Km field.
func (o *OutletAddressDTO) SetKm(v int32) {
	o.Km = &v
}

// GetCity returns the City field value if set, zero value otherwise.
// Deprecated
func (o *OutletAddressDTO) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *OutletAddressDTO) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *OutletAddressDTO) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
// Deprecated
func (o *OutletAddressDTO) SetCity(v string) {
	o.City = &v
}

func (o OutletAddressDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutletAddressDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["regionId"] = o.RegionId
	if !IsNil(o.Street) {
		toSerialize["street"] = o.Street
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.Building) {
		toSerialize["building"] = o.Building
	}
	if !IsNil(o.Estate) {
		toSerialize["estate"] = o.Estate
	}
	if !IsNil(o.Block) {
		toSerialize["block"] = o.Block
	}
	if !IsNil(o.Additional) {
		toSerialize["additional"] = o.Additional
	}
	if !IsNil(o.Km) {
		toSerialize["km"] = o.Km
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	return toSerialize, nil
}

func (o *OutletAddressDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"regionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutletAddressDTO := _OutletAddressDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOutletAddressDTO)

	if err != nil {
		return err
	}

	*o = OutletAddressDTO(varOutletAddressDTO)

	return err
}

type NullableOutletAddressDTO struct {
	value *OutletAddressDTO
	isSet bool
}

func (v NullableOutletAddressDTO) Get() *OutletAddressDTO {
	return v.value
}

func (v *NullableOutletAddressDTO) Set(val *OutletAddressDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOutletAddressDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOutletAddressDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutletAddressDTO(val *OutletAddressDTO) *NullableOutletAddressDTO {
	return &NullableOutletAddressDTO{value: val, isSet: true}
}

func (v NullableOutletAddressDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutletAddressDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
