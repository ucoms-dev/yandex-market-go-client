/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OfferCardContentStatusType Статус вычисления рейтинга карточки товара и рекомендаций:  * `UPDATING` — рейтинг обновляется. * `ACTUAL` — рейтинг актуальный. 
type OfferCardContentStatusType string

// List of OfferCardContentStatusType
const (
	UPDATING OfferCardContentStatusType = "UPDATING"
	ACTUAL OfferCardContentStatusType = "ACTUAL"
)

// All allowed values of OfferCardContentStatusType enum
var AllowedOfferCardContentStatusTypeEnumValues = []OfferCardContentStatusType{
	"UPDATING",
	"ACTUAL",
}

func (v *OfferCardContentStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OfferCardContentStatusType(value)
	for _, existing := range AllowedOfferCardContentStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OfferCardContentStatusType", value)
}

// NewOfferCardContentStatusTypeFromValue returns a pointer to a valid OfferCardContentStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOfferCardContentStatusTypeFromValue(v string) (*OfferCardContentStatusType, error) {
	ev := OfferCardContentStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OfferCardContentStatusType: valid values are %v", v, AllowedOfferCardContentStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OfferCardContentStatusType) IsValid() bool {
	for _, existing := range AllowedOfferCardContentStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OfferCardContentStatusType value
func (v OfferCardContentStatusType) Ptr() *OfferCardContentStatusType {
	return &v
}

type NullableOfferCardContentStatusType struct {
	value *OfferCardContentStatusType
	isSet bool
}

func (v NullableOfferCardContentStatusType) Get() *OfferCardContentStatusType {
	return v.value
}

func (v *NullableOfferCardContentStatusType) Set(val *OfferCardContentStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferCardContentStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferCardContentStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferCardContentStatusType(val *OfferCardContentStatusType) *NullableOfferCardContentStatusType {
	return &NullableOfferCardContentStatusType{value: val, isSet: true}
}

func (v NullableOfferCardContentStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferCardContentStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

