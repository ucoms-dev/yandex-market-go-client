/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MechanicsType Тип акции:  * `DIRECT_DISCOUNT` — прямая скидка.  * `BLUE_FLASH` — флеш-акция.  * `MARKET_PROMOCODE` — скидка по промокоду. 
type MechanicsType string

// List of MechanicsType
const (
	DIRECT_DISCOUNT MechanicsType = "DIRECT_DISCOUNT"
	BLUE_FLASH MechanicsType = "BLUE_FLASH"
	MARKET_PROMOCODE MechanicsType = "MARKET_PROMOCODE"
)

// All allowed values of MechanicsType enum
var AllowedMechanicsTypeEnumValues = []MechanicsType{
	"DIRECT_DISCOUNT",
	"BLUE_FLASH",
	"MARKET_PROMOCODE",
}

func (v *MechanicsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MechanicsType(value)
	for _, existing := range AllowedMechanicsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MechanicsType", value)
}

// NewMechanicsTypeFromValue returns a pointer to a valid MechanicsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMechanicsTypeFromValue(v string) (*MechanicsType, error) {
	ev := MechanicsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MechanicsType: valid values are %v", v, AllowedMechanicsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MechanicsType) IsValid() bool {
	for _, existing := range AllowedMechanicsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MechanicsType value
func (v MechanicsType) Ptr() *MechanicsType {
	return &v
}

type NullableMechanicsType struct {
	value *MechanicsType
	isSet bool
}

func (v NullableMechanicsType) Get() *MechanicsType {
	return v.value
}

func (v *NullableMechanicsType) Set(val *MechanicsType) {
	v.value = val
	v.isSet = true
}

func (v NullableMechanicsType) IsSet() bool {
	return v.isSet
}

func (v *NullableMechanicsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMechanicsType(val *MechanicsType) *NullableMechanicsType {
	return &NullableMechanicsType{value: val, isSet: true}
}

func (v NullableMechanicsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMechanicsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

