/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SupplyRequestDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupplyRequestDTO{}

// SupplyRequestDTO Информация о заявке на поставку, вывоз или утилизацию.
type SupplyRequestDTO struct {
	Id      SupplyRequestIdDTO      `json:"id"`
	Type    SupplyRequestType       `json:"type"`
	Subtype SupplyRequestSubType    `json:"subtype"`
	Status  SupplyRequestStatusType `json:"status"`
	// Дата и время последнего обновления заявки.
	UpdatedAt  time.Time                  `json:"updatedAt"`
	Counters   SupplyRequestCountersDTO   `json:"counters"`
	ParentLink *SupplyRequestReferenceDTO `json:"parentLink,omitempty"`
	// Ссылки на дочерние заявки.
	ChildrenLinks   []SupplyRequestReferenceDTO `json:"childrenLinks,omitempty"`
	TargetLocation  SupplyRequestLocationDTO    `json:"targetLocation"`
	TransitLocation *SupplyRequestLocationDTO   `json:"transitLocation,omitempty"`
}

type _SupplyRequestDTO SupplyRequestDTO

// NewSupplyRequestDTO instantiates a new SupplyRequestDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupplyRequestDTO(id SupplyRequestIdDTO, type_ SupplyRequestType, subtype SupplyRequestSubType, status SupplyRequestStatusType, updatedAt time.Time, counters SupplyRequestCountersDTO, targetLocation SupplyRequestLocationDTO) *SupplyRequestDTO {
	this := SupplyRequestDTO{}
	this.Id = id
	this.Type = type_
	this.Subtype = subtype
	this.Status = status
	this.UpdatedAt = updatedAt
	this.Counters = counters
	this.TargetLocation = targetLocation
	return &this
}

// NewSupplyRequestDTOWithDefaults instantiates a new SupplyRequestDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupplyRequestDTOWithDefaults() *SupplyRequestDTO {
	this := SupplyRequestDTO{}
	return &this
}

// GetId returns the Id field value
func (o *SupplyRequestDTO) GetId() SupplyRequestIdDTO {
	if o == nil {
		var ret SupplyRequestIdDTO
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestDTO) GetIdOk() (*SupplyRequestIdDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SupplyRequestDTO) SetId(v SupplyRequestIdDTO) {
	o.Id = v
}

// GetType returns the Type field value
func (o *SupplyRequestDTO) GetType() SupplyRequestType {
	if o == nil {
		var ret SupplyRequestType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestDTO) GetTypeOk() (*SupplyRequestType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SupplyRequestDTO) SetType(v SupplyRequestType) {
	o.Type = v
}

// GetSubtype returns the Subtype field value
func (o *SupplyRequestDTO) GetSubtype() SupplyRequestSubType {
	if o == nil {
		var ret SupplyRequestSubType
		return ret
	}

	return o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestDTO) GetSubtypeOk() (*SupplyRequestSubType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subtype, true
}

// SetSubtype sets field value
func (o *SupplyRequestDTO) SetSubtype(v SupplyRequestSubType) {
	o.Subtype = v
}

// GetStatus returns the Status field value
func (o *SupplyRequestDTO) GetStatus() SupplyRequestStatusType {
	if o == nil {
		var ret SupplyRequestStatusType
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestDTO) GetStatusOk() (*SupplyRequestStatusType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SupplyRequestDTO) SetStatus(v SupplyRequestStatusType) {
	o.Status = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *SupplyRequestDTO) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestDTO) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *SupplyRequestDTO) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCounters returns the Counters field value
func (o *SupplyRequestDTO) GetCounters() SupplyRequestCountersDTO {
	if o == nil {
		var ret SupplyRequestCountersDTO
		return ret
	}

	return o.Counters
}

// GetCountersOk returns a tuple with the Counters field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestDTO) GetCountersOk() (*SupplyRequestCountersDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Counters, true
}

// SetCounters sets field value
func (o *SupplyRequestDTO) SetCounters(v SupplyRequestCountersDTO) {
	o.Counters = v
}

// GetParentLink returns the ParentLink field value if set, zero value otherwise.
func (o *SupplyRequestDTO) GetParentLink() SupplyRequestReferenceDTO {
	if o == nil || IsNil(o.ParentLink) {
		var ret SupplyRequestReferenceDTO
		return ret
	}
	return *o.ParentLink
}

// GetParentLinkOk returns a tuple with the ParentLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestDTO) GetParentLinkOk() (*SupplyRequestReferenceDTO, bool) {
	if o == nil || IsNil(o.ParentLink) {
		return nil, false
	}
	return o.ParentLink, true
}

// HasParentLink returns a boolean if a field has been set.
func (o *SupplyRequestDTO) HasParentLink() bool {
	if o != nil && !IsNil(o.ParentLink) {
		return true
	}

	return false
}

// SetParentLink gets a reference to the given SupplyRequestReferenceDTO and assigns it to the ParentLink field.
func (o *SupplyRequestDTO) SetParentLink(v SupplyRequestReferenceDTO) {
	o.ParentLink = &v
}

// GetChildrenLinks returns the ChildrenLinks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupplyRequestDTO) GetChildrenLinks() []SupplyRequestReferenceDTO {
	if o == nil {
		var ret []SupplyRequestReferenceDTO
		return ret
	}
	return o.ChildrenLinks
}

// GetChildrenLinksOk returns a tuple with the ChildrenLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupplyRequestDTO) GetChildrenLinksOk() ([]SupplyRequestReferenceDTO, bool) {
	if o == nil || IsNil(o.ChildrenLinks) {
		return nil, false
	}
	return o.ChildrenLinks, true
}

// HasChildrenLinks returns a boolean if a field has been set.
func (o *SupplyRequestDTO) HasChildrenLinks() bool {
	if o != nil && !IsNil(o.ChildrenLinks) {
		return true
	}

	return false
}

// SetChildrenLinks gets a reference to the given []SupplyRequestReferenceDTO and assigns it to the ChildrenLinks field.
func (o *SupplyRequestDTO) SetChildrenLinks(v []SupplyRequestReferenceDTO) {
	o.ChildrenLinks = v
}

// GetTargetLocation returns the TargetLocation field value
func (o *SupplyRequestDTO) GetTargetLocation() SupplyRequestLocationDTO {
	if o == nil {
		var ret SupplyRequestLocationDTO
		return ret
	}

	return o.TargetLocation
}

// GetTargetLocationOk returns a tuple with the TargetLocation field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestDTO) GetTargetLocationOk() (*SupplyRequestLocationDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetLocation, true
}

// SetTargetLocation sets field value
func (o *SupplyRequestDTO) SetTargetLocation(v SupplyRequestLocationDTO) {
	o.TargetLocation = v
}

// GetTransitLocation returns the TransitLocation field value if set, zero value otherwise.
func (o *SupplyRequestDTO) GetTransitLocation() SupplyRequestLocationDTO {
	if o == nil || IsNil(o.TransitLocation) {
		var ret SupplyRequestLocationDTO
		return ret
	}
	return *o.TransitLocation
}

// GetTransitLocationOk returns a tuple with the TransitLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestDTO) GetTransitLocationOk() (*SupplyRequestLocationDTO, bool) {
	if o == nil || IsNil(o.TransitLocation) {
		return nil, false
	}
	return o.TransitLocation, true
}

// HasTransitLocation returns a boolean if a field has been set.
func (o *SupplyRequestDTO) HasTransitLocation() bool {
	if o != nil && !IsNil(o.TransitLocation) {
		return true
	}

	return false
}

// SetTransitLocation gets a reference to the given SupplyRequestLocationDTO and assigns it to the TransitLocation field.
func (o *SupplyRequestDTO) SetTransitLocation(v SupplyRequestLocationDTO) {
	o.TransitLocation = &v
}

func (o SupplyRequestDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupplyRequestDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["subtype"] = o.Subtype
	toSerialize["status"] = o.Status
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["counters"] = o.Counters
	if !IsNil(o.ParentLink) {
		toSerialize["parentLink"] = o.ParentLink
	}
	if o.ChildrenLinks != nil {
		toSerialize["childrenLinks"] = o.ChildrenLinks
	}
	toSerialize["targetLocation"] = o.TargetLocation
	if !IsNil(o.TransitLocation) {
		toSerialize["transitLocation"] = o.TransitLocation
	}
	return toSerialize, nil
}

func (o *SupplyRequestDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"subtype",
		"status",
		"updatedAt",
		"counters",
		"targetLocation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupplyRequestDTO := _SupplyRequestDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSupplyRequestDTO)

	if err != nil {
		return err
	}

	*o = SupplyRequestDTO(varSupplyRequestDTO)

	return err
}

type NullableSupplyRequestDTO struct {
	value *SupplyRequestDTO
	isSet bool
}

func (v NullableSupplyRequestDTO) Get() *SupplyRequestDTO {
	return v.value
}

func (v *NullableSupplyRequestDTO) Set(val *SupplyRequestDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyRequestDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyRequestDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyRequestDTO(val *SupplyRequestDTO) *NullableSupplyRequestDTO {
	return &NullableSupplyRequestDTO{value: val, isSet: true}
}

func (v NullableSupplyRequestDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyRequestDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
