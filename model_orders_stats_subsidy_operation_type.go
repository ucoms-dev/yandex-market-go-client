/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrdersStatsSubsidyOperationType Тип операции с баллами, которые используются для уменьшения стоимости размещения:  * `ACCRUAL` — начисление баллов. * `DEDUCTION` — списание баллов. 
type OrdersStatsSubsidyOperationType string

// List of OrdersStatsSubsidyOperationType
const (
	ACCRUAL OrdersStatsSubsidyOperationType = "ACCRUAL"
	DEDUCTION OrdersStatsSubsidyOperationType = "DEDUCTION"
)

// All allowed values of OrdersStatsSubsidyOperationType enum
var AllowedOrdersStatsSubsidyOperationTypeEnumValues = []OrdersStatsSubsidyOperationType{
	"ACCRUAL",
	"DEDUCTION",
}

func (v *OrdersStatsSubsidyOperationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrdersStatsSubsidyOperationType(value)
	for _, existing := range AllowedOrdersStatsSubsidyOperationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrdersStatsSubsidyOperationType", value)
}

// NewOrdersStatsSubsidyOperationTypeFromValue returns a pointer to a valid OrdersStatsSubsidyOperationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersStatsSubsidyOperationTypeFromValue(v string) (*OrdersStatsSubsidyOperationType, error) {
	ev := OrdersStatsSubsidyOperationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrdersStatsSubsidyOperationType: valid values are %v", v, AllowedOrdersStatsSubsidyOperationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersStatsSubsidyOperationType) IsValid() bool {
	for _, existing := range AllowedOrdersStatsSubsidyOperationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrdersStatsSubsidyOperationType value
func (v OrdersStatsSubsidyOperationType) Ptr() *OrdersStatsSubsidyOperationType {
	return &v
}

type NullableOrdersStatsSubsidyOperationType struct {
	value *OrdersStatsSubsidyOperationType
	isSet bool
}

func (v NullableOrdersStatsSubsidyOperationType) Get() *OrdersStatsSubsidyOperationType {
	return v.value
}

func (v *NullableOrdersStatsSubsidyOperationType) Set(val *OrdersStatsSubsidyOperationType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersStatsSubsidyOperationType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersStatsSubsidyOperationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersStatsSubsidyOperationType(val *OrdersStatsSubsidyOperationType) *NullableOrdersStatsSubsidyOperationType {
	return &NullableOrdersStatsSubsidyOperationType{value: val, isSet: true}
}

func (v NullableOrdersStatsSubsidyOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersStatsSubsidyOperationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

