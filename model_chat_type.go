/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ChatType Тип чата:  * `CHAT` — чат с покупателем. * `ARBITRAGE` — спор. 
type ChatType string

// List of ChatType
const (
	CHAT ChatType = "CHAT"
	ARBITRAGE ChatType = "ARBITRAGE"
)

// All allowed values of ChatType enum
var AllowedChatTypeEnumValues = []ChatType{
	"CHAT",
	"ARBITRAGE",
}

func (v *ChatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChatType(value)
	for _, existing := range AllowedChatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChatType", value)
}

// NewChatTypeFromValue returns a pointer to a valid ChatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChatTypeFromValue(v string) (*ChatType, error) {
	ev := ChatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChatType: valid values are %v", v, AllowedChatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChatType) IsValid() bool {
	for _, existing := range AllowedChatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChatType value
func (v ChatType) Ptr() *ChatType {
	return &v
}

type NullableChatType struct {
	value *ChatType
	isSet bool
}

func (v NullableChatType) Get() *ChatType {
	return v.value
}

func (v *NullableChatType) Set(val *ChatType) {
	v.value = val
	v.isSet = true
}

func (v NullableChatType) IsSet() bool {
	return v.isSet
}

func (v *NullableChatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatType(val *ChatType) *NullableChatType {
	return &NullableChatType{value: val, isSet: true}
}

func (v NullableChatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

