/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SupplyRequestLocationDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupplyRequestLocationDTO{}

// SupplyRequestLocationDTO Информации о складе или ПВЗ в заявке.
type SupplyRequestLocationDTO struct {
	// Дата и время поставки на склад или в ПВЗ.
	RequestedDate *time.Time `json:"requestedDate,omitempty"`
	// Идентификатор склада или логистического партнера ПВЗ.
	ServiceId int64 `json:"serviceId"`
	// Название склада или ПВЗ.
	Name    string                          `json:"name"`
	Address SupplyRequestLocationAddressDTO `json:"address"`
	Type    SupplyRequestLocationType       `json:"type"`
}

type _SupplyRequestLocationDTO SupplyRequestLocationDTO

// NewSupplyRequestLocationDTO instantiates a new SupplyRequestLocationDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupplyRequestLocationDTO(serviceId int64, name string, address SupplyRequestLocationAddressDTO, type_ SupplyRequestLocationType) *SupplyRequestLocationDTO {
	this := SupplyRequestLocationDTO{}
	this.ServiceId = serviceId
	this.Name = name
	this.Address = address
	this.Type = type_
	return &this
}

// NewSupplyRequestLocationDTOWithDefaults instantiates a new SupplyRequestLocationDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupplyRequestLocationDTOWithDefaults() *SupplyRequestLocationDTO {
	this := SupplyRequestLocationDTO{}
	return &this
}

// GetRequestedDate returns the RequestedDate field value if set, zero value otherwise.
func (o *SupplyRequestLocationDTO) GetRequestedDate() time.Time {
	if o == nil || IsNil(o.RequestedDate) {
		var ret time.Time
		return ret
	}
	return *o.RequestedDate
}

// GetRequestedDateOk returns a tuple with the RequestedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyRequestLocationDTO) GetRequestedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RequestedDate) {
		return nil, false
	}
	return o.RequestedDate, true
}

// HasRequestedDate returns a boolean if a field has been set.
func (o *SupplyRequestLocationDTO) HasRequestedDate() bool {
	if o != nil && !IsNil(o.RequestedDate) {
		return true
	}

	return false
}

// SetRequestedDate gets a reference to the given time.Time and assigns it to the RequestedDate field.
func (o *SupplyRequestLocationDTO) SetRequestedDate(v time.Time) {
	o.RequestedDate = &v
}

// GetServiceId returns the ServiceId field value
func (o *SupplyRequestLocationDTO) GetServiceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestLocationDTO) GetServiceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *SupplyRequestLocationDTO) SetServiceId(v int64) {
	o.ServiceId = v
}

// GetName returns the Name field value
func (o *SupplyRequestLocationDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestLocationDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SupplyRequestLocationDTO) SetName(v string) {
	o.Name = v
}

// GetAddress returns the Address field value
func (o *SupplyRequestLocationDTO) GetAddress() SupplyRequestLocationAddressDTO {
	if o == nil {
		var ret SupplyRequestLocationAddressDTO
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestLocationDTO) GetAddressOk() (*SupplyRequestLocationAddressDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *SupplyRequestLocationDTO) SetAddress(v SupplyRequestLocationAddressDTO) {
	o.Address = v
}

// GetType returns the Type field value
func (o *SupplyRequestLocationDTO) GetType() SupplyRequestLocationType {
	if o == nil {
		var ret SupplyRequestLocationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestLocationDTO) GetTypeOk() (*SupplyRequestLocationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SupplyRequestLocationDTO) SetType(v SupplyRequestLocationType) {
	o.Type = v
}

func (o SupplyRequestLocationDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupplyRequestLocationDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequestedDate) {
		toSerialize["requestedDate"] = o.RequestedDate
	}
	toSerialize["serviceId"] = o.ServiceId
	toSerialize["name"] = o.Name
	toSerialize["address"] = o.Address
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *SupplyRequestLocationDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serviceId",
		"name",
		"address",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupplyRequestLocationDTO := _SupplyRequestLocationDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSupplyRequestLocationDTO)

	if err != nil {
		return err
	}

	*o = SupplyRequestLocationDTO(varSupplyRequestLocationDTO)

	return err
}

type NullableSupplyRequestLocationDTO struct {
	value *SupplyRequestLocationDTO
	isSet bool
}

func (v NullableSupplyRequestLocationDTO) Get() *SupplyRequestLocationDTO {
	return v.value
}

func (v *NullableSupplyRequestLocationDTO) Set(val *SupplyRequestLocationDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyRequestLocationDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyRequestLocationDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyRequestLocationDTO(val *SupplyRequestLocationDTO) *NullableSupplyRequestLocationDTO {
	return &NullableSupplyRequestLocationDTO{value: val, isSet: true}
}

func (v NullableSupplyRequestLocationDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyRequestLocationDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
