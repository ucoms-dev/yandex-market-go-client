/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ChatMessagePayloadDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatMessagePayloadDTO{}

// ChatMessagePayloadDTO Информация о приложенных к сообщению файлах.
type ChatMessagePayloadDTO struct {
	// Название файла.
	Name string `json:"name"`
	// Ссылка для скачивания файла.
	Url string `json:"url"`
	// Размер файла в байтах.
	Size int32 `json:"size"`
}

type _ChatMessagePayloadDTO ChatMessagePayloadDTO

// NewChatMessagePayloadDTO instantiates a new ChatMessagePayloadDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatMessagePayloadDTO(name string, url string, size int32) *ChatMessagePayloadDTO {
	this := ChatMessagePayloadDTO{}
	this.Name = name
	this.Url = url
	this.Size = size
	return &this
}

// NewChatMessagePayloadDTOWithDefaults instantiates a new ChatMessagePayloadDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatMessagePayloadDTOWithDefaults() *ChatMessagePayloadDTO {
	this := ChatMessagePayloadDTO{}
	return &this
}

// GetName returns the Name field value
func (o *ChatMessagePayloadDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ChatMessagePayloadDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ChatMessagePayloadDTO) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *ChatMessagePayloadDTO) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ChatMessagePayloadDTO) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ChatMessagePayloadDTO) SetUrl(v string) {
	o.Url = v
}

// GetSize returns the Size field value
func (o *ChatMessagePayloadDTO) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *ChatMessagePayloadDTO) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *ChatMessagePayloadDTO) SetSize(v int32) {
	o.Size = v
}

func (o ChatMessagePayloadDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatMessagePayloadDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	toSerialize["size"] = o.Size
	return toSerialize, nil
}

func (o *ChatMessagePayloadDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"url",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatMessagePayloadDTO := _ChatMessagePayloadDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChatMessagePayloadDTO)

	if err != nil {
		return err
	}

	*o = ChatMessagePayloadDTO(varChatMessagePayloadDTO)

	return err
}

type NullableChatMessagePayloadDTO struct {
	value *ChatMessagePayloadDTO
	isSet bool
}

func (v NullableChatMessagePayloadDTO) Get() *ChatMessagePayloadDTO {
	return v.value
}

func (v *NullableChatMessagePayloadDTO) Set(val *ChatMessagePayloadDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableChatMessagePayloadDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableChatMessagePayloadDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatMessagePayloadDTO(val *ChatMessagePayloadDTO) *NullableChatMessagePayloadDTO {
	return &NullableChatMessagePayloadDTO{value: val, isSet: true}
}

func (v NullableChatMessagePayloadDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatMessagePayloadDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
