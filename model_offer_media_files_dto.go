/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OfferMediaFilesDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferMediaFilesDTO{}

// OfferMediaFilesDTO Информация о медиафайлах товара. 
type OfferMediaFilesDTO struct {
	// Использовать первое видео в карточке как видеообложку.  Передайте `true`, чтобы первое видео использовалось как видеообложка, или `false`, чтобы видеообложка не отображалась в карточке товара. 
	FirstVideoAsCover *bool `json:"firstVideoAsCover,omitempty"`
	// Видеофайлы товара. 
	Videos []OfferMediaFileDTO `json:"videos,omitempty"`
	// Изображения товара. 
	Pictures []OfferMediaFileDTO `json:"pictures,omitempty"`
	// Руководства по использованию товара. 
	Manuals []OfferMediaFileDTO `json:"manuals,omitempty"`
}

// NewOfferMediaFilesDTO instantiates a new OfferMediaFilesDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferMediaFilesDTO() *OfferMediaFilesDTO {
	this := OfferMediaFilesDTO{}
	return &this
}

// NewOfferMediaFilesDTOWithDefaults instantiates a new OfferMediaFilesDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferMediaFilesDTOWithDefaults() *OfferMediaFilesDTO {
	this := OfferMediaFilesDTO{}
	return &this
}

// GetFirstVideoAsCover returns the FirstVideoAsCover field value if set, zero value otherwise.
func (o *OfferMediaFilesDTO) GetFirstVideoAsCover() bool {
	if o == nil || IsNil(o.FirstVideoAsCover) {
		var ret bool
		return ret
	}
	return *o.FirstVideoAsCover
}

// GetFirstVideoAsCoverOk returns a tuple with the FirstVideoAsCover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferMediaFilesDTO) GetFirstVideoAsCoverOk() (*bool, bool) {
	if o == nil || IsNil(o.FirstVideoAsCover) {
		return nil, false
	}
	return o.FirstVideoAsCover, true
}

// HasFirstVideoAsCover returns a boolean if a field has been set.
func (o *OfferMediaFilesDTO) HasFirstVideoAsCover() bool {
	if o != nil && !IsNil(o.FirstVideoAsCover) {
		return true
	}

	return false
}

// SetFirstVideoAsCover gets a reference to the given bool and assigns it to the FirstVideoAsCover field.
func (o *OfferMediaFilesDTO) SetFirstVideoAsCover(v bool) {
	o.FirstVideoAsCover = &v
}

// GetVideos returns the Videos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OfferMediaFilesDTO) GetVideos() []OfferMediaFileDTO {
	if o == nil {
		var ret []OfferMediaFileDTO
		return ret
	}
	return o.Videos
}

// GetVideosOk returns a tuple with the Videos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OfferMediaFilesDTO) GetVideosOk() ([]OfferMediaFileDTO, bool) {
	if o == nil || IsNil(o.Videos) {
		return nil, false
	}
	return o.Videos, true
}

// HasVideos returns a boolean if a field has been set.
func (o *OfferMediaFilesDTO) HasVideos() bool {
	if o != nil && !IsNil(o.Videos) {
		return true
	}

	return false
}

// SetVideos gets a reference to the given []OfferMediaFileDTO and assigns it to the Videos field.
func (o *OfferMediaFilesDTO) SetVideos(v []OfferMediaFileDTO) {
	o.Videos = v
}

// GetPictures returns the Pictures field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OfferMediaFilesDTO) GetPictures() []OfferMediaFileDTO {
	if o == nil {
		var ret []OfferMediaFileDTO
		return ret
	}
	return o.Pictures
}

// GetPicturesOk returns a tuple with the Pictures field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OfferMediaFilesDTO) GetPicturesOk() ([]OfferMediaFileDTO, bool) {
	if o == nil || IsNil(o.Pictures) {
		return nil, false
	}
	return o.Pictures, true
}

// HasPictures returns a boolean if a field has been set.
func (o *OfferMediaFilesDTO) HasPictures() bool {
	if o != nil && !IsNil(o.Pictures) {
		return true
	}

	return false
}

// SetPictures gets a reference to the given []OfferMediaFileDTO and assigns it to the Pictures field.
func (o *OfferMediaFilesDTO) SetPictures(v []OfferMediaFileDTO) {
	o.Pictures = v
}

// GetManuals returns the Manuals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OfferMediaFilesDTO) GetManuals() []OfferMediaFileDTO {
	if o == nil {
		var ret []OfferMediaFileDTO
		return ret
	}
	return o.Manuals
}

// GetManualsOk returns a tuple with the Manuals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OfferMediaFilesDTO) GetManualsOk() ([]OfferMediaFileDTO, bool) {
	if o == nil || IsNil(o.Manuals) {
		return nil, false
	}
	return o.Manuals, true
}

// HasManuals returns a boolean if a field has been set.
func (o *OfferMediaFilesDTO) HasManuals() bool {
	if o != nil && !IsNil(o.Manuals) {
		return true
	}

	return false
}

// SetManuals gets a reference to the given []OfferMediaFileDTO and assigns it to the Manuals field.
func (o *OfferMediaFilesDTO) SetManuals(v []OfferMediaFileDTO) {
	o.Manuals = v
}

func (o OfferMediaFilesDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferMediaFilesDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstVideoAsCover) {
		toSerialize["firstVideoAsCover"] = o.FirstVideoAsCover
	}
	if o.Videos != nil {
		toSerialize["videos"] = o.Videos
	}
	if o.Pictures != nil {
		toSerialize["pictures"] = o.Pictures
	}
	if o.Manuals != nil {
		toSerialize["manuals"] = o.Manuals
	}
	return toSerialize, nil
}

type NullableOfferMediaFilesDTO struct {
	value *OfferMediaFilesDTO
	isSet bool
}

func (v NullableOfferMediaFilesDTO) Get() *OfferMediaFilesDTO {
	return v.value
}

func (v *NullableOfferMediaFilesDTO) Set(val *OfferMediaFilesDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferMediaFilesDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferMediaFilesDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferMediaFilesDTO(val *OfferMediaFilesDTO) *NullableOfferMediaFilesDTO {
	return &NullableOfferMediaFilesDTO{value: val, isSet: true}
}

func (v NullableOfferMediaFilesDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferMediaFilesDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


