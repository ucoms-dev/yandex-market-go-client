/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CategoryParameterUnitDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CategoryParameterUnitDTO{}

// CategoryParameterUnitDTO Единицы измерения характеристики товара.
type CategoryParameterUnitDTO struct {
	// Единица измерения по умолчанию.
	DefaultUnitId int64 `json:"defaultUnitId"`
	// Допустимые единицы измерения.
	Units []UnitDTO `json:"units"`
}

type _CategoryParameterUnitDTO CategoryParameterUnitDTO

// NewCategoryParameterUnitDTO instantiates a new CategoryParameterUnitDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryParameterUnitDTO(defaultUnitId int64, units []UnitDTO) *CategoryParameterUnitDTO {
	this := CategoryParameterUnitDTO{}
	this.DefaultUnitId = defaultUnitId
	this.Units = units
	return &this
}

// NewCategoryParameterUnitDTOWithDefaults instantiates a new CategoryParameterUnitDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryParameterUnitDTOWithDefaults() *CategoryParameterUnitDTO {
	this := CategoryParameterUnitDTO{}
	return &this
}

// GetDefaultUnitId returns the DefaultUnitId field value
func (o *CategoryParameterUnitDTO) GetDefaultUnitId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DefaultUnitId
}

// GetDefaultUnitIdOk returns a tuple with the DefaultUnitId field value
// and a boolean to check if the value has been set.
func (o *CategoryParameterUnitDTO) GetDefaultUnitIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultUnitId, true
}

// SetDefaultUnitId sets field value
func (o *CategoryParameterUnitDTO) SetDefaultUnitId(v int64) {
	o.DefaultUnitId = v
}

// GetUnits returns the Units field value
func (o *CategoryParameterUnitDTO) GetUnits() []UnitDTO {
	if o == nil {
		var ret []UnitDTO
		return ret
	}

	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value
// and a boolean to check if the value has been set.
func (o *CategoryParameterUnitDTO) GetUnitsOk() ([]UnitDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Units, true
}

// SetUnits sets field value
func (o *CategoryParameterUnitDTO) SetUnits(v []UnitDTO) {
	o.Units = v
}

func (o CategoryParameterUnitDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CategoryParameterUnitDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["defaultUnitId"] = o.DefaultUnitId
	toSerialize["units"] = o.Units
	return toSerialize, nil
}

func (o *CategoryParameterUnitDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"defaultUnitId",
		"units",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCategoryParameterUnitDTO := _CategoryParameterUnitDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCategoryParameterUnitDTO)

	if err != nil {
		return err
	}

	*o = CategoryParameterUnitDTO(varCategoryParameterUnitDTO)

	return err
}

type NullableCategoryParameterUnitDTO struct {
	value *CategoryParameterUnitDTO
	isSet bool
}

func (v NullableCategoryParameterUnitDTO) Get() *CategoryParameterUnitDTO {
	return v.value
}

func (v *NullableCategoryParameterUnitDTO) Set(val *CategoryParameterUnitDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryParameterUnitDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryParameterUnitDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryParameterUnitDTO(val *CategoryParameterUnitDTO) *NullableCategoryParameterUnitDTO {
	return &NullableCategoryParameterUnitDTO{value: val, isSet: true}
}

func (v NullableCategoryParameterUnitDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryParameterUnitDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


