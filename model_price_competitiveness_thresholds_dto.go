/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PriceCompetitivenessThresholdsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceCompetitivenessThresholdsDTO{}

// PriceCompetitivenessThresholdsDTO Максимальные значения цены, при которых она является привлекательной или умеренной.
type PriceCompetitivenessThresholdsDTO struct {
	OptimalPrice *BasePriceDTO `json:"optimalPrice,omitempty"`
	AveragePrice *BasePriceDTO `json:"averagePrice,omitempty"`
}

// NewPriceCompetitivenessThresholdsDTO instantiates a new PriceCompetitivenessThresholdsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceCompetitivenessThresholdsDTO() *PriceCompetitivenessThresholdsDTO {
	this := PriceCompetitivenessThresholdsDTO{}
	return &this
}

// NewPriceCompetitivenessThresholdsDTOWithDefaults instantiates a new PriceCompetitivenessThresholdsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceCompetitivenessThresholdsDTOWithDefaults() *PriceCompetitivenessThresholdsDTO {
	this := PriceCompetitivenessThresholdsDTO{}
	return &this
}

// GetOptimalPrice returns the OptimalPrice field value if set, zero value otherwise.
func (o *PriceCompetitivenessThresholdsDTO) GetOptimalPrice() BasePriceDTO {
	if o == nil || IsNil(o.OptimalPrice) {
		var ret BasePriceDTO
		return ret
	}
	return *o.OptimalPrice
}

// GetOptimalPriceOk returns a tuple with the OptimalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCompetitivenessThresholdsDTO) GetOptimalPriceOk() (*BasePriceDTO, bool) {
	if o == nil || IsNil(o.OptimalPrice) {
		return nil, false
	}
	return o.OptimalPrice, true
}

// HasOptimalPrice returns a boolean if a field has been set.
func (o *PriceCompetitivenessThresholdsDTO) HasOptimalPrice() bool {
	if o != nil && !IsNil(o.OptimalPrice) {
		return true
	}

	return false
}

// SetOptimalPrice gets a reference to the given BasePriceDTO and assigns it to the OptimalPrice field.
func (o *PriceCompetitivenessThresholdsDTO) SetOptimalPrice(v BasePriceDTO) {
	o.OptimalPrice = &v
}

// GetAveragePrice returns the AveragePrice field value if set, zero value otherwise.
func (o *PriceCompetitivenessThresholdsDTO) GetAveragePrice() BasePriceDTO {
	if o == nil || IsNil(o.AveragePrice) {
		var ret BasePriceDTO
		return ret
	}
	return *o.AveragePrice
}

// GetAveragePriceOk returns a tuple with the AveragePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCompetitivenessThresholdsDTO) GetAveragePriceOk() (*BasePriceDTO, bool) {
	if o == nil || IsNil(o.AveragePrice) {
		return nil, false
	}
	return o.AveragePrice, true
}

// HasAveragePrice returns a boolean if a field has been set.
func (o *PriceCompetitivenessThresholdsDTO) HasAveragePrice() bool {
	if o != nil && !IsNil(o.AveragePrice) {
		return true
	}

	return false
}

// SetAveragePrice gets a reference to the given BasePriceDTO and assigns it to the AveragePrice field.
func (o *PriceCompetitivenessThresholdsDTO) SetAveragePrice(v BasePriceDTO) {
	o.AveragePrice = &v
}

func (o PriceCompetitivenessThresholdsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceCompetitivenessThresholdsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OptimalPrice) {
		toSerialize["optimalPrice"] = o.OptimalPrice
	}
	if !IsNil(o.AveragePrice) {
		toSerialize["averagePrice"] = o.AveragePrice
	}
	return toSerialize, nil
}

type NullablePriceCompetitivenessThresholdsDTO struct {
	value *PriceCompetitivenessThresholdsDTO
	isSet bool
}

func (v NullablePriceCompetitivenessThresholdsDTO) Get() *PriceCompetitivenessThresholdsDTO {
	return v.value
}

func (v *NullablePriceCompetitivenessThresholdsDTO) Set(val *PriceCompetitivenessThresholdsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceCompetitivenessThresholdsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceCompetitivenessThresholdsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceCompetitivenessThresholdsDTO(val *PriceCompetitivenessThresholdsDTO) *NullablePriceCompetitivenessThresholdsDTO {
	return &NullablePriceCompetitivenessThresholdsDTO{value: val, isSet: true}
}

func (v NullablePriceCompetitivenessThresholdsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceCompetitivenessThresholdsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


