/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderLiftType Тип подъема заказа на этаж:  * `NOT_NEEDED` — не требуется.  * `MANUAL` — ручной.  * `ELEVATOR` — лифт.  * `CARGO_ELEVATOR` — грузовой лифт.  * `FREE` — любой из перечисленных выше, если включена опция бесплатного подъема.  * `UNKNOWN` — неизвестный тип. 
type OrderLiftType string

// List of OrderLiftType
const (
	NOT_NEEDED OrderLiftType = "NOT_NEEDED"
	MANUAL OrderLiftType = "MANUAL"
	ELEVATOR OrderLiftType = "ELEVATOR"
	CARGO_ELEVATOR OrderLiftType = "CARGO_ELEVATOR"
	FREE OrderLiftType = "FREE"
	UNKNOWN OrderLiftType = "UNKNOWN"
)

// All allowed values of OrderLiftType enum
var AllowedOrderLiftTypeEnumValues = []OrderLiftType{
	"NOT_NEEDED",
	"MANUAL",
	"ELEVATOR",
	"CARGO_ELEVATOR",
	"FREE",
	"UNKNOWN",
}

func (v *OrderLiftType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderLiftType(value)
	for _, existing := range AllowedOrderLiftTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderLiftType", value)
}

// NewOrderLiftTypeFromValue returns a pointer to a valid OrderLiftType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderLiftTypeFromValue(v string) (*OrderLiftType, error) {
	ev := OrderLiftType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderLiftType: valid values are %v", v, AllowedOrderLiftTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderLiftType) IsValid() bool {
	for _, existing := range AllowedOrderLiftTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderLiftType value
func (v OrderLiftType) Ptr() *OrderLiftType {
	return &v
}

type NullableOrderLiftType struct {
	value *OrderLiftType
	isSet bool
}

func (v NullableOrderLiftType) Get() *OrderLiftType {
	return v.value
}

func (v *NullableOrderLiftType) Set(val *OrderLiftType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderLiftType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderLiftType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderLiftType(val *OrderLiftType) *NullableOrderLiftType {
	return &NullableOrderLiftType{value: val, isSet: true}
}

func (v NullableOrderLiftType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderLiftType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

