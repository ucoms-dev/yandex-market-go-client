/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrdersStatsPaymentType Тип денежного перевода: - `PAYMENT` — оплата. - `REFUND` — возврат.
type OrdersStatsPaymentType string

// List of OrdersStatsPaymentType
const (
	PAYMENT OrdersStatsPaymentType = "PAYMENT"
	REFUND  OrdersStatsPaymentType = "REFUND"
)

// All allowed values of OrdersStatsPaymentType enum
var AllowedOrdersStatsPaymentTypeEnumValues = []OrdersStatsPaymentType{
	"PAYMENT",
	"REFUND",
}

func (v *OrdersStatsPaymentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrdersStatsPaymentType(value)
	for _, existing := range AllowedOrdersStatsPaymentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrdersStatsPaymentType", value)
}

// NewOrdersStatsPaymentTypeFromValue returns a pointer to a valid OrdersStatsPaymentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersStatsPaymentTypeFromValue(v string) (*OrdersStatsPaymentType, error) {
	ev := OrdersStatsPaymentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrdersStatsPaymentType: valid values are %v", v, AllowedOrdersStatsPaymentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersStatsPaymentType) IsValid() bool {
	for _, existing := range AllowedOrdersStatsPaymentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrdersStatsPaymentType value
func (v OrdersStatsPaymentType) Ptr() *OrdersStatsPaymentType {
	return &v
}

type NullableOrdersStatsPaymentType struct {
	value *OrdersStatsPaymentType
	isSet bool
}

func (v NullableOrdersStatsPaymentType) Get() *OrdersStatsPaymentType {
	return v.value
}

func (v *NullableOrdersStatsPaymentType) Set(val *OrdersStatsPaymentType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersStatsPaymentType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersStatsPaymentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersStatsPaymentType(val *OrdersStatsPaymentType) *NullableOrdersStatsPaymentType {
	return &NullableOrdersStatsPaymentType{value: val, isSet: true}
}

func (v NullableOrdersStatsPaymentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersStatsPaymentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
