/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WarehouseStatusType Статус склада:  * `DISABLED_MANUALLY` – отключен вами. * `OTHER` – другой статус. Например, склад включен или отключен Маркетом.
type WarehouseStatusType string

// List of WarehouseStatusType
const (
	WarehouseStatusType_DISABLED_MANUALLY WarehouseStatusType = "DISABLED_MANUALLY"
	WarehouseStatusType_OTHER             WarehouseStatusType = "OTHER"
)

// All allowed values of WarehouseStatusType enum
var AllowedWarehouseStatusTypeEnumValues = []WarehouseStatusType{
	"DISABLED_MANUALLY",
	"OTHER",
}

func (v *WarehouseStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WarehouseStatusType(value)
	for _, existing := range AllowedWarehouseStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WarehouseStatusType", value)
}

// NewWarehouseStatusTypeFromValue returns a pointer to a valid WarehouseStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWarehouseStatusTypeFromValue(v string) (*WarehouseStatusType, error) {
	ev := WarehouseStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WarehouseStatusType: valid values are %v", v, AllowedWarehouseStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WarehouseStatusType) IsValid() bool {
	for _, existing := range AllowedWarehouseStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WarehouseStatusType value
func (v WarehouseStatusType) Ptr() *WarehouseStatusType {
	return &v
}

type NullableWarehouseStatusType struct {
	value *WarehouseStatusType
	isSet bool
}

func (v NullableWarehouseStatusType) Get() *WarehouseStatusType {
	return v.value
}

func (v *NullableWarehouseStatusType) Set(val *WarehouseStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableWarehouseStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableWarehouseStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarehouseStatusType(val *WarehouseStatusType) *NullableWarehouseStatusType {
	return &NullableWarehouseStatusType{value: val, isSet: true}
}

func (v NullableWarehouseStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarehouseStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
