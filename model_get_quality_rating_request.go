/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetQualityRatingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetQualityRatingRequest{}

// GetQualityRatingRequest Запрос информации по индексу качества.
type GetQualityRatingRequest struct {
	// Начало периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть раньше 30 дней от текущей даты.
	DateFrom *string `json:"dateFrom,omitempty"`
	// Конец периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть позже текущей даты.
	DateTo *string `json:"dateTo,omitempty"`
	// Список идентификаторов кампании.  Их можно узнать с помощью запроса [GET campaigns](../../reference/campaigns/getCampaigns.md) или найти в кабинете продавца на Маркете — нажмите на название своего бизнеса и перейдите на страницу:    * **Модули и API** → блок **Передача данных Маркету**.   * **Лог запросов** → выпадающий список в блоке **Показывать логи**.  ⚠️ Не используйте вместо них идентификаторы магазинов, которые указаны в кабинете продавца на Маркете рядом с названием магазина и в некоторых отчетах.
	CampaignIds []int64 `json:"campaignIds"`
}

type _GetQualityRatingRequest GetQualityRatingRequest

// NewGetQualityRatingRequest instantiates a new GetQualityRatingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetQualityRatingRequest(campaignIds []int64) *GetQualityRatingRequest {
	this := GetQualityRatingRequest{}
	this.CampaignIds = campaignIds
	return &this
}

// NewGetQualityRatingRequestWithDefaults instantiates a new GetQualityRatingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetQualityRatingRequestWithDefaults() *GetQualityRatingRequest {
	this := GetQualityRatingRequest{}
	return &this
}

// GetDateFrom returns the DateFrom field value if set, zero value otherwise.
func (o *GetQualityRatingRequest) GetDateFrom() string {
	if o == nil || IsNil(o.DateFrom) {
		var ret string
		return ret
	}
	return *o.DateFrom
}

// GetDateFromOk returns a tuple with the DateFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetQualityRatingRequest) GetDateFromOk() (*string, bool) {
	if o == nil || IsNil(o.DateFrom) {
		return nil, false
	}
	return o.DateFrom, true
}

// HasDateFrom returns a boolean if a field has been set.
func (o *GetQualityRatingRequest) HasDateFrom() bool {
	if o != nil && !IsNil(o.DateFrom) {
		return true
	}

	return false
}

// SetDateFrom gets a reference to the given string and assigns it to the DateFrom field.
func (o *GetQualityRatingRequest) SetDateFrom(v string) {
	o.DateFrom = &v
}

// GetDateTo returns the DateTo field value if set, zero value otherwise.
func (o *GetQualityRatingRequest) GetDateTo() string {
	if o == nil || IsNil(o.DateTo) {
		var ret string
		return ret
	}
	return *o.DateTo
}

// GetDateToOk returns a tuple with the DateTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetQualityRatingRequest) GetDateToOk() (*string, bool) {
	if o == nil || IsNil(o.DateTo) {
		return nil, false
	}
	return o.DateTo, true
}

// HasDateTo returns a boolean if a field has been set.
func (o *GetQualityRatingRequest) HasDateTo() bool {
	if o != nil && !IsNil(o.DateTo) {
		return true
	}

	return false
}

// SetDateTo gets a reference to the given string and assigns it to the DateTo field.
func (o *GetQualityRatingRequest) SetDateTo(v string) {
	o.DateTo = &v
}

// GetCampaignIds returns the CampaignIds field value
func (o *GetQualityRatingRequest) GetCampaignIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.CampaignIds
}

// GetCampaignIdsOk returns a tuple with the CampaignIds field value
// and a boolean to check if the value has been set.
func (o *GetQualityRatingRequest) GetCampaignIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CampaignIds, true
}

// SetCampaignIds sets field value
func (o *GetQualityRatingRequest) SetCampaignIds(v []int64) {
	o.CampaignIds = v
}

func (o GetQualityRatingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetQualityRatingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateFrom) {
		toSerialize["dateFrom"] = o.DateFrom
	}
	if !IsNil(o.DateTo) {
		toSerialize["dateTo"] = o.DateTo
	}
	toSerialize["campaignIds"] = o.CampaignIds
	return toSerialize, nil
}

func (o *GetQualityRatingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"campaignIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetQualityRatingRequest := _GetQualityRatingRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varGetQualityRatingRequest)

	if err != nil {
		return err
	}

	*o = GetQualityRatingRequest(varGetQualityRatingRequest)

	return err
}

type NullableGetQualityRatingRequest struct {
	value *GetQualityRatingRequest
	isSet bool
}

func (v NullableGetQualityRatingRequest) Get() *GetQualityRatingRequest {
	return v.value
}

func (v *NullableGetQualityRatingRequest) Set(val *GetQualityRatingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetQualityRatingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetQualityRatingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetQualityRatingRequest(val *GetQualityRatingRequest) *NullableGetQualityRatingRequest {
	return &NullableGetQualityRatingRequest{value: val, isSet: true}
}

func (v NullableGetQualityRatingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetQualityRatingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
