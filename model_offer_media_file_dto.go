/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OfferMediaFileDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferMediaFileDTO{}

// OfferMediaFileDTO Информация о медиафайле товара.
type OfferMediaFileDTO struct {
	// Ссылка на медиафайл.
	Url *string `json:"url,omitempty"`
	// Название медиафайла.
	Title       *string                   `json:"title,omitempty"`
	UploadState *MediaFileUploadStateType `json:"uploadState,omitempty"`
}

// NewOfferMediaFileDTO instantiates a new OfferMediaFileDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferMediaFileDTO() *OfferMediaFileDTO {
	this := OfferMediaFileDTO{}
	return &this
}

// NewOfferMediaFileDTOWithDefaults instantiates a new OfferMediaFileDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferMediaFileDTOWithDefaults() *OfferMediaFileDTO {
	this := OfferMediaFileDTO{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *OfferMediaFileDTO) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferMediaFileDTO) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *OfferMediaFileDTO) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *OfferMediaFileDTO) SetUrl(v string) {
	o.Url = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *OfferMediaFileDTO) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferMediaFileDTO) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *OfferMediaFileDTO) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *OfferMediaFileDTO) SetTitle(v string) {
	o.Title = &v
}

// GetUploadState returns the UploadState field value if set, zero value otherwise.
func (o *OfferMediaFileDTO) GetUploadState() MediaFileUploadStateType {
	if o == nil || IsNil(o.UploadState) {
		var ret MediaFileUploadStateType
		return ret
	}
	return *o.UploadState
}

// GetUploadStateOk returns a tuple with the UploadState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferMediaFileDTO) GetUploadStateOk() (*MediaFileUploadStateType, bool) {
	if o == nil || IsNil(o.UploadState) {
		return nil, false
	}
	return o.UploadState, true
}

// HasUploadState returns a boolean if a field has been set.
func (o *OfferMediaFileDTO) HasUploadState() bool {
	if o != nil && !IsNil(o.UploadState) {
		return true
	}

	return false
}

// SetUploadState gets a reference to the given MediaFileUploadStateType and assigns it to the UploadState field.
func (o *OfferMediaFileDTO) SetUploadState(v MediaFileUploadStateType) {
	o.UploadState = &v
}

func (o OfferMediaFileDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferMediaFileDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.UploadState) {
		toSerialize["uploadState"] = o.UploadState
	}
	return toSerialize, nil
}

type NullableOfferMediaFileDTO struct {
	value *OfferMediaFileDTO
	isSet bool
}

func (v NullableOfferMediaFileDTO) Get() *OfferMediaFileDTO {
	return v.value
}

func (v *NullableOfferMediaFileDTO) Set(val *OfferMediaFileDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferMediaFileDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferMediaFileDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferMediaFileDTO(val *OfferMediaFileDTO) *NullableOfferMediaFileDTO {
	return &NullableOfferMediaFileDTO{value: val, isSet: true}
}

func (v NullableOfferMediaFileDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferMediaFileDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
