/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateGoodsFeedbackCommentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateGoodsFeedbackCommentRequest{}

// UpdateGoodsFeedbackCommentRequest Комментарий к отзыву.
type UpdateGoodsFeedbackCommentRequest struct {
	// Идентификатор отзыва. 
	FeedbackId int64 `json:"feedbackId"`
	Comment UpdateGoodsFeedbackCommentDTO `json:"comment"`
}

type _UpdateGoodsFeedbackCommentRequest UpdateGoodsFeedbackCommentRequest

// NewUpdateGoodsFeedbackCommentRequest instantiates a new UpdateGoodsFeedbackCommentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGoodsFeedbackCommentRequest(feedbackId int64, comment UpdateGoodsFeedbackCommentDTO) *UpdateGoodsFeedbackCommentRequest {
	this := UpdateGoodsFeedbackCommentRequest{}
	this.FeedbackId = feedbackId
	this.Comment = comment
	return &this
}

// NewUpdateGoodsFeedbackCommentRequestWithDefaults instantiates a new UpdateGoodsFeedbackCommentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGoodsFeedbackCommentRequestWithDefaults() *UpdateGoodsFeedbackCommentRequest {
	this := UpdateGoodsFeedbackCommentRequest{}
	return &this
}

// GetFeedbackId returns the FeedbackId field value
func (o *UpdateGoodsFeedbackCommentRequest) GetFeedbackId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FeedbackId
}

// GetFeedbackIdOk returns a tuple with the FeedbackId field value
// and a boolean to check if the value has been set.
func (o *UpdateGoodsFeedbackCommentRequest) GetFeedbackIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeedbackId, true
}

// SetFeedbackId sets field value
func (o *UpdateGoodsFeedbackCommentRequest) SetFeedbackId(v int64) {
	o.FeedbackId = v
}

// GetComment returns the Comment field value
func (o *UpdateGoodsFeedbackCommentRequest) GetComment() UpdateGoodsFeedbackCommentDTO {
	if o == nil {
		var ret UpdateGoodsFeedbackCommentDTO
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *UpdateGoodsFeedbackCommentRequest) GetCommentOk() (*UpdateGoodsFeedbackCommentDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *UpdateGoodsFeedbackCommentRequest) SetComment(v UpdateGoodsFeedbackCommentDTO) {
	o.Comment = v
}

func (o UpdateGoodsFeedbackCommentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateGoodsFeedbackCommentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["feedbackId"] = o.FeedbackId
	toSerialize["comment"] = o.Comment
	return toSerialize, nil
}

func (o *UpdateGoodsFeedbackCommentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"feedbackId",
		"comment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateGoodsFeedbackCommentRequest := _UpdateGoodsFeedbackCommentRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateGoodsFeedbackCommentRequest)

	if err != nil {
		return err
	}

	*o = UpdateGoodsFeedbackCommentRequest(varUpdateGoodsFeedbackCommentRequest)

	return err
}

type NullableUpdateGoodsFeedbackCommentRequest struct {
	value *UpdateGoodsFeedbackCommentRequest
	isSet bool
}

func (v NullableUpdateGoodsFeedbackCommentRequest) Get() *UpdateGoodsFeedbackCommentRequest {
	return v.value
}

func (v *NullableUpdateGoodsFeedbackCommentRequest) Set(val *UpdateGoodsFeedbackCommentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGoodsFeedbackCommentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGoodsFeedbackCommentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGoodsFeedbackCommentRequest(val *UpdateGoodsFeedbackCommentRequest) *NullableUpdateGoodsFeedbackCommentRequest {
	return &NullableUpdateGoodsFeedbackCommentRequest{value: val, isSet: true}
}

func (v NullableUpdateGoodsFeedbackCommentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGoodsFeedbackCommentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


