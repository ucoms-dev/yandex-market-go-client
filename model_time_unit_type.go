/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TimeUnitType Единица измерения времени:  * `HOUR` — час. * `DAY` — сутки. * `WEEK` — неделя. * `MONTH` — месяц. * `YEAR` — год. 
type TimeUnitType string

// List of TimeUnitType
const (
	HOUR TimeUnitType = "HOUR"
	DAY TimeUnitType = "DAY"
	WEEK TimeUnitType = "WEEK"
	MONTH TimeUnitType = "MONTH"
	YEAR TimeUnitType = "YEAR"
)

// All allowed values of TimeUnitType enum
var AllowedTimeUnitTypeEnumValues = []TimeUnitType{
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"YEAR",
}

func (v *TimeUnitType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeUnitType(value)
	for _, existing := range AllowedTimeUnitTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeUnitType", value)
}

// NewTimeUnitTypeFromValue returns a pointer to a valid TimeUnitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeUnitTypeFromValue(v string) (*TimeUnitType, error) {
	ev := TimeUnitType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeUnitType: valid values are %v", v, AllowedTimeUnitTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeUnitType) IsValid() bool {
	for _, existing := range AllowedTimeUnitTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeUnitType value
func (v TimeUnitType) Ptr() *TimeUnitType {
	return &v
}

type NullableTimeUnitType struct {
	value *TimeUnitType
	isSet bool
}

func (v NullableTimeUnitType) Get() *TimeUnitType {
	return v.value
}

func (v *NullableTimeUnitType) Set(val *TimeUnitType) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeUnitType) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeUnitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeUnitType(val *TimeUnitType) *NullableTimeUnitType {
	return &NullableTimeUnitType{value: val, isSet: true}
}

func (v NullableTimeUnitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeUnitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

