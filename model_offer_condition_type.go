/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OfferConditionType Тип уценки:  * `PREOWNED` —  бывший в употреблении товар, раньше принадлежал другому человеку. * `SHOWCASESAMPLE` — витринный образец. * `REFURBISHED` — повторная продажа товара. * `REDUCTION` — товар с дефектами. * `RENOVATED` — восстановленный товар. * `NOT_SPECIFIED` — не выбран.  `REFURBISHED` — специальное значение для одежды, обуви и аксессуаров. Используется только для уцененных товаров из этой категории. Другие значения для одежды, обуви и аксессуаров не используются. 
type OfferConditionType string

// List of OfferConditionType
const (
	PREOWNED OfferConditionType = "PREOWNED"
	SHOWCASESAMPLE OfferConditionType = "SHOWCASESAMPLE"
	REFURBISHED OfferConditionType = "REFURBISHED"
	REDUCTION OfferConditionType = "REDUCTION"
	RENOVATED OfferConditionType = "RENOVATED"
	NOT_SPECIFIED OfferConditionType = "NOT_SPECIFIED"
)

// All allowed values of OfferConditionType enum
var AllowedOfferConditionTypeEnumValues = []OfferConditionType{
	"PREOWNED",
	"SHOWCASESAMPLE",
	"REFURBISHED",
	"REDUCTION",
	"RENOVATED",
	"NOT_SPECIFIED",
}

func (v *OfferConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OfferConditionType(value)
	for _, existing := range AllowedOfferConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OfferConditionType", value)
}

// NewOfferConditionTypeFromValue returns a pointer to a valid OfferConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOfferConditionTypeFromValue(v string) (*OfferConditionType, error) {
	ev := OfferConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OfferConditionType: valid values are %v", v, AllowedOfferConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OfferConditionType) IsValid() bool {
	for _, existing := range AllowedOfferConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OfferConditionType value
func (v OfferConditionType) Ptr() *OfferConditionType {
	return &v
}

type NullableOfferConditionType struct {
	value *OfferConditionType
	isSet bool
}

func (v NullableOfferConditionType) Get() *OfferConditionType {
	return v.value
}

func (v *NullableOfferConditionType) Set(val *OfferConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferConditionType(val *OfferConditionType) *NullableOfferConditionType {
	return &NullableOfferConditionType{value: val, isSet: true}
}

func (v NullableOfferConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

