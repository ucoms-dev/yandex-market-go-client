/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateOrderStatusDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateOrderStatusDTO{}

// UpdateOrderStatusDTO Список заказов.
type UpdateOrderStatusDTO struct {
	// Идентификатор заказа.
	Id *int64 `json:"id,omitempty"`
	Status *OrderStatusType `json:"status,omitempty"`
	Substatus *OrderSubstatusType `json:"substatus,omitempty"`
	UpdateStatus *OrderUpdateStatusType `json:"updateStatus,omitempty"`
	// Ошибка при изменении статуса заказа. Содержит описание ошибки и идентификатор заказа.  Возвращается, если параметр `updateStatus` принимает значение `ERROR`. 
	ErrorDetails *string `json:"errorDetails,omitempty"`
}

// NewUpdateOrderStatusDTO instantiates a new UpdateOrderStatusDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateOrderStatusDTO() *UpdateOrderStatusDTO {
	this := UpdateOrderStatusDTO{}
	return &this
}

// NewUpdateOrderStatusDTOWithDefaults instantiates a new UpdateOrderStatusDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateOrderStatusDTOWithDefaults() *UpdateOrderStatusDTO {
	this := UpdateOrderStatusDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateOrderStatusDTO) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrderStatusDTO) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateOrderStatusDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *UpdateOrderStatusDTO) SetId(v int64) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UpdateOrderStatusDTO) GetStatus() OrderStatusType {
	if o == nil || IsNil(o.Status) {
		var ret OrderStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrderStatusDTO) GetStatusOk() (*OrderStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdateOrderStatusDTO) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given OrderStatusType and assigns it to the Status field.
func (o *UpdateOrderStatusDTO) SetStatus(v OrderStatusType) {
	o.Status = &v
}

// GetSubstatus returns the Substatus field value if set, zero value otherwise.
func (o *UpdateOrderStatusDTO) GetSubstatus() OrderSubstatusType {
	if o == nil || IsNil(o.Substatus) {
		var ret OrderSubstatusType
		return ret
	}
	return *o.Substatus
}

// GetSubstatusOk returns a tuple with the Substatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrderStatusDTO) GetSubstatusOk() (*OrderSubstatusType, bool) {
	if o == nil || IsNil(o.Substatus) {
		return nil, false
	}
	return o.Substatus, true
}

// HasSubstatus returns a boolean if a field has been set.
func (o *UpdateOrderStatusDTO) HasSubstatus() bool {
	if o != nil && !IsNil(o.Substatus) {
		return true
	}

	return false
}

// SetSubstatus gets a reference to the given OrderSubstatusType and assigns it to the Substatus field.
func (o *UpdateOrderStatusDTO) SetSubstatus(v OrderSubstatusType) {
	o.Substatus = &v
}

// GetUpdateStatus returns the UpdateStatus field value if set, zero value otherwise.
func (o *UpdateOrderStatusDTO) GetUpdateStatus() OrderUpdateStatusType {
	if o == nil || IsNil(o.UpdateStatus) {
		var ret OrderUpdateStatusType
		return ret
	}
	return *o.UpdateStatus
}

// GetUpdateStatusOk returns a tuple with the UpdateStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrderStatusDTO) GetUpdateStatusOk() (*OrderUpdateStatusType, bool) {
	if o == nil || IsNil(o.UpdateStatus) {
		return nil, false
	}
	return o.UpdateStatus, true
}

// HasUpdateStatus returns a boolean if a field has been set.
func (o *UpdateOrderStatusDTO) HasUpdateStatus() bool {
	if o != nil && !IsNil(o.UpdateStatus) {
		return true
	}

	return false
}

// SetUpdateStatus gets a reference to the given OrderUpdateStatusType and assigns it to the UpdateStatus field.
func (o *UpdateOrderStatusDTO) SetUpdateStatus(v OrderUpdateStatusType) {
	o.UpdateStatus = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *UpdateOrderStatusDTO) GetErrorDetails() string {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret string
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrderStatusDTO) GetErrorDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *UpdateOrderStatusDTO) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given string and assigns it to the ErrorDetails field.
func (o *UpdateOrderStatusDTO) SetErrorDetails(v string) {
	o.ErrorDetails = &v
}

func (o UpdateOrderStatusDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateOrderStatusDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Substatus) {
		toSerialize["substatus"] = o.Substatus
	}
	if !IsNil(o.UpdateStatus) {
		toSerialize["updateStatus"] = o.UpdateStatus
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	return toSerialize, nil
}

type NullableUpdateOrderStatusDTO struct {
	value *UpdateOrderStatusDTO
	isSet bool
}

func (v NullableUpdateOrderStatusDTO) Get() *UpdateOrderStatusDTO {
	return v.value
}

func (v *NullableUpdateOrderStatusDTO) Set(val *UpdateOrderStatusDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateOrderStatusDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateOrderStatusDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateOrderStatusDTO(val *UpdateOrderStatusDTO) *NullableUpdateOrderStatusDTO {
	return &NullableUpdateOrderStatusDTO{value: val, isSet: true}
}

func (v NullableUpdateOrderStatusDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateOrderStatusDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


