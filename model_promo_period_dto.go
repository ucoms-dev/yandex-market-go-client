/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PromoPeriodDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PromoPeriodDTO{}

// PromoPeriodDTO Время проведения акции.
type PromoPeriodDTO struct {
	// Дата и время начала акции.
	DateTimeFrom time.Time `json:"dateTimeFrom"`
	// Дата и время окончания акции.
	DateTimeTo time.Time `json:"dateTimeTo"`
}

type _PromoPeriodDTO PromoPeriodDTO

// NewPromoPeriodDTO instantiates a new PromoPeriodDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPromoPeriodDTO(dateTimeFrom time.Time, dateTimeTo time.Time) *PromoPeriodDTO {
	this := PromoPeriodDTO{}
	this.DateTimeFrom = dateTimeFrom
	this.DateTimeTo = dateTimeTo
	return &this
}

// NewPromoPeriodDTOWithDefaults instantiates a new PromoPeriodDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPromoPeriodDTOWithDefaults() *PromoPeriodDTO {
	this := PromoPeriodDTO{}
	return &this
}

// GetDateTimeFrom returns the DateTimeFrom field value
func (o *PromoPeriodDTO) GetDateTimeFrom() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateTimeFrom
}

// GetDateTimeFromOk returns a tuple with the DateTimeFrom field value
// and a boolean to check if the value has been set.
func (o *PromoPeriodDTO) GetDateTimeFromOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateTimeFrom, true
}

// SetDateTimeFrom sets field value
func (o *PromoPeriodDTO) SetDateTimeFrom(v time.Time) {
	o.DateTimeFrom = v
}

// GetDateTimeTo returns the DateTimeTo field value
func (o *PromoPeriodDTO) GetDateTimeTo() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateTimeTo
}

// GetDateTimeToOk returns a tuple with the DateTimeTo field value
// and a boolean to check if the value has been set.
func (o *PromoPeriodDTO) GetDateTimeToOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateTimeTo, true
}

// SetDateTimeTo sets field value
func (o *PromoPeriodDTO) SetDateTimeTo(v time.Time) {
	o.DateTimeTo = v
}

func (o PromoPeriodDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PromoPeriodDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dateTimeFrom"] = o.DateTimeFrom
	toSerialize["dateTimeTo"] = o.DateTimeTo
	return toSerialize, nil
}

func (o *PromoPeriodDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dateTimeFrom",
		"dateTimeTo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPromoPeriodDTO := _PromoPeriodDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPromoPeriodDTO)

	if err != nil {
		return err
	}

	*o = PromoPeriodDTO(varPromoPeriodDTO)

	return err
}

type NullablePromoPeriodDTO struct {
	value *PromoPeriodDTO
	isSet bool
}

func (v NullablePromoPeriodDTO) Get() *PromoPeriodDTO {
	return v.value
}

func (v *NullablePromoPeriodDTO) Set(val *PromoPeriodDTO) {
	v.value = val
	v.isSet = true
}

func (v NullablePromoPeriodDTO) IsSet() bool {
	return v.isSet
}

func (v *NullablePromoPeriodDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromoPeriodDTO(val *PromoPeriodDTO) *NullablePromoPeriodDTO {
	return &NullablePromoPeriodDTO{value: val, isSet: true}
}

func (v NullablePromoPeriodDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromoPeriodDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


