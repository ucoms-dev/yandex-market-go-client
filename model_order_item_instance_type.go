/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderItemInstanceType Вид маркировки товара:  * `CIS` — КИЗ, идентификатор единицы товара в системе [«Честный ЗНАК»](https://честныйзнак.рф/) или [«ASL BELGISI»](https://aslbelgisi.uz) (для продавцов Market Yandex Go). Обязателен для заполнения.  * `CIS_OPTIONAL` — КИЗ, идентификатор единицы товара в системе [«Честный ЗНАК»](https://честныйзнак.рф/). Необязателен для заполнения, но в ближайшее время потребуется его передача.  * `UIN` — УИН, уникальный идентификационный номер.  * `RNPT` — РНПТ, регистрационный номер партии товара.  * `GTD` — номер ГТД, грузовой таможенной декларации.
type OrderItemInstanceType string

// List of OrderItemInstanceType
const (
	OrderItemInstanceType_CIS          OrderItemInstanceType = "CIS"
	OrderItemInstanceType_CIS_OPTIONAL OrderItemInstanceType = "CIS_OPTIONAL"
	OrderItemInstanceType_UIN          OrderItemInstanceType = "UIN"
	OrderItemInstanceType_RNPT         OrderItemInstanceType = "RNPT"
	OrderItemInstanceType_GTD          OrderItemInstanceType = "GTD"
)

// All allowed values of OrderItemInstanceType enum
var AllowedOrderItemInstanceTypeEnumValues = []OrderItemInstanceType{
	"CIS",
	"CIS_OPTIONAL",
	"UIN",
	"RNPT",
	"GTD",
}

func (v *OrderItemInstanceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderItemInstanceType(value)
	for _, existing := range AllowedOrderItemInstanceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderItemInstanceType", value)
}

// NewOrderItemInstanceTypeFromValue returns a pointer to a valid OrderItemInstanceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderItemInstanceTypeFromValue(v string) (*OrderItemInstanceType, error) {
	ev := OrderItemInstanceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderItemInstanceType: valid values are %v", v, AllowedOrderItemInstanceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderItemInstanceType) IsValid() bool {
	for _, existing := range AllowedOrderItemInstanceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderItemInstanceType value
func (v OrderItemInstanceType) Ptr() *OrderItemInstanceType {
	return &v
}

type NullableOrderItemInstanceType struct {
	value *OrderItemInstanceType
	isSet bool
}

func (v NullableOrderItemInstanceType) Get() *OrderItemInstanceType {
	return v.value
}

func (v *NullableOrderItemInstanceType) Set(val *OrderItemInstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderItemInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderItemInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderItemInstanceType(val *OrderItemInstanceType) *NullableOrderItemInstanceType {
	return &NullableOrderItemInstanceType{value: val, isSet: true}
}

func (v NullableOrderItemInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderItemInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
