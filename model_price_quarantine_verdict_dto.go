/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PriceQuarantineVerdictDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceQuarantineVerdictDTO{}

// PriceQuarantineVerdictDTO Причина попадания товара в карантин.
type PriceQuarantineVerdictDTO struct {
	Type *PriceQuarantineVerdictType `json:"type,omitempty"`
	// Цена, из-за которой товар попал в карантин, и значения для сравнения. Конкретный набор параметров зависит от типа карантина.
	Params []PriceQuarantineVerdictParameterDTO `json:"params"`
}

type _PriceQuarantineVerdictDTO PriceQuarantineVerdictDTO

// NewPriceQuarantineVerdictDTO instantiates a new PriceQuarantineVerdictDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceQuarantineVerdictDTO(params []PriceQuarantineVerdictParameterDTO) *PriceQuarantineVerdictDTO {
	this := PriceQuarantineVerdictDTO{}
	this.Params = params
	return &this
}

// NewPriceQuarantineVerdictDTOWithDefaults instantiates a new PriceQuarantineVerdictDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceQuarantineVerdictDTOWithDefaults() *PriceQuarantineVerdictDTO {
	this := PriceQuarantineVerdictDTO{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PriceQuarantineVerdictDTO) GetType() PriceQuarantineVerdictType {
	if o == nil || IsNil(o.Type) {
		var ret PriceQuarantineVerdictType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceQuarantineVerdictDTO) GetTypeOk() (*PriceQuarantineVerdictType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PriceQuarantineVerdictDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PriceQuarantineVerdictType and assigns it to the Type field.
func (o *PriceQuarantineVerdictDTO) SetType(v PriceQuarantineVerdictType) {
	o.Type = &v
}

// GetParams returns the Params field value
func (o *PriceQuarantineVerdictDTO) GetParams() []PriceQuarantineVerdictParameterDTO {
	if o == nil {
		var ret []PriceQuarantineVerdictParameterDTO
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *PriceQuarantineVerdictDTO) GetParamsOk() ([]PriceQuarantineVerdictParameterDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *PriceQuarantineVerdictDTO) SetParams(v []PriceQuarantineVerdictParameterDTO) {
	o.Params = v
}

func (o PriceQuarantineVerdictDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceQuarantineVerdictDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["params"] = o.Params
	return toSerialize, nil
}

func (o *PriceQuarantineVerdictDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPriceQuarantineVerdictDTO := _PriceQuarantineVerdictDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPriceQuarantineVerdictDTO)

	if err != nil {
		return err
	}

	*o = PriceQuarantineVerdictDTO(varPriceQuarantineVerdictDTO)

	return err
}

type NullablePriceQuarantineVerdictDTO struct {
	value *PriceQuarantineVerdictDTO
	isSet bool
}

func (v NullablePriceQuarantineVerdictDTO) Get() *PriceQuarantineVerdictDTO {
	return v.value
}

func (v *NullablePriceQuarantineVerdictDTO) Set(val *PriceQuarantineVerdictDTO) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceQuarantineVerdictDTO) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceQuarantineVerdictDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceQuarantineVerdictDTO(val *PriceQuarantineVerdictDTO) *NullablePriceQuarantineVerdictDTO {
	return &NullablePriceQuarantineVerdictDTO{value: val, isSet: true}
}

func (v NullablePriceQuarantineVerdictDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceQuarantineVerdictDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


