/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OfferContentErrorDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferContentErrorDTO{}

// OfferContentErrorDTO Текст ошибки или предупреждения.
type OfferContentErrorDTO struct {
	Type OfferContentErrorType `json:"type"`
	// Идентификатор характеристики, с которой связана ошибка или предупреждение.
	ParameterId *int64 `json:"parameterId,omitempty"`
	// Текст ошибки или предупреждения.
	Message string `json:"message"`
}

type _OfferContentErrorDTO OfferContentErrorDTO

// NewOfferContentErrorDTO instantiates a new OfferContentErrorDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferContentErrorDTO(type_ OfferContentErrorType, message string) *OfferContentErrorDTO {
	this := OfferContentErrorDTO{}
	this.Type = type_
	this.Message = message
	return &this
}

// NewOfferContentErrorDTOWithDefaults instantiates a new OfferContentErrorDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferContentErrorDTOWithDefaults() *OfferContentErrorDTO {
	this := OfferContentErrorDTO{}
	return &this
}

// GetType returns the Type field value
func (o *OfferContentErrorDTO) GetType() OfferContentErrorType {
	if o == nil {
		var ret OfferContentErrorType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OfferContentErrorDTO) GetTypeOk() (*OfferContentErrorType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OfferContentErrorDTO) SetType(v OfferContentErrorType) {
	o.Type = v
}

// GetParameterId returns the ParameterId field value if set, zero value otherwise.
func (o *OfferContentErrorDTO) GetParameterId() int64 {
	if o == nil || IsNil(o.ParameterId) {
		var ret int64
		return ret
	}
	return *o.ParameterId
}

// GetParameterIdOk returns a tuple with the ParameterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferContentErrorDTO) GetParameterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ParameterId) {
		return nil, false
	}
	return o.ParameterId, true
}

// HasParameterId returns a boolean if a field has been set.
func (o *OfferContentErrorDTO) HasParameterId() bool {
	if o != nil && !IsNil(o.ParameterId) {
		return true
	}

	return false
}

// SetParameterId gets a reference to the given int64 and assigns it to the ParameterId field.
func (o *OfferContentErrorDTO) SetParameterId(v int64) {
	o.ParameterId = &v
}

// GetMessage returns the Message field value
func (o *OfferContentErrorDTO) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *OfferContentErrorDTO) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *OfferContentErrorDTO) SetMessage(v string) {
	o.Message = v
}

func (o OfferContentErrorDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferContentErrorDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.ParameterId) {
		toSerialize["parameterId"] = o.ParameterId
	}
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *OfferContentErrorDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOfferContentErrorDTO := _OfferContentErrorDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOfferContentErrorDTO)

	if err != nil {
		return err
	}

	*o = OfferContentErrorDTO(varOfferContentErrorDTO)

	return err
}

type NullableOfferContentErrorDTO struct {
	value *OfferContentErrorDTO
	isSet bool
}

func (v NullableOfferContentErrorDTO) Get() *OfferContentErrorDTO {
	return v.value
}

func (v *NullableOfferContentErrorDTO) Set(val *OfferContentErrorDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferContentErrorDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferContentErrorDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferContentErrorDTO(val *OfferContentErrorDTO) *NullableOfferContentErrorDTO {
	return &NullableOfferContentErrorDTO{value: val, isSet: true}
}

func (v NullableOfferContentErrorDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferContentErrorDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


