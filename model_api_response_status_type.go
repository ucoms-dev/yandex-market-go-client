/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ApiResponseStatusType Тип ответа. Возможные значения: * `OK` — ошибок нет. * `ERROR` — при обработке запроса произошла ошибка. 
type ApiResponseStatusType string

// List of ApiResponseStatusType
const (
	OK ApiResponseStatusType = "OK"
	ERROR ApiResponseStatusType = "ERROR"
)

// All allowed values of ApiResponseStatusType enum
var AllowedApiResponseStatusTypeEnumValues = []ApiResponseStatusType{
	"OK",
	"ERROR",
}

func (v *ApiResponseStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiResponseStatusType(value)
	for _, existing := range AllowedApiResponseStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiResponseStatusType", value)
}

// NewApiResponseStatusTypeFromValue returns a pointer to a valid ApiResponseStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiResponseStatusTypeFromValue(v string) (*ApiResponseStatusType, error) {
	ev := ApiResponseStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiResponseStatusType: valid values are %v", v, AllowedApiResponseStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiResponseStatusType) IsValid() bool {
	for _, existing := range AllowedApiResponseStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiResponseStatusType value
func (v ApiResponseStatusType) Ptr() *ApiResponseStatusType {
	return &v
}

type NullableApiResponseStatusType struct {
	value *ApiResponseStatusType
	isSet bool
}

func (v NullableApiResponseStatusType) Get() *ApiResponseStatusType {
	return v.value
}

func (v *NullableApiResponseStatusType) Set(val *ApiResponseStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableApiResponseStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableApiResponseStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiResponseStatusType(val *ApiResponseStatusType) *NullableApiResponseStatusType {
	return &NullableApiResponseStatusType{value: val, isSet: true}
}

func (v NullableApiResponseStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiResponseStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

