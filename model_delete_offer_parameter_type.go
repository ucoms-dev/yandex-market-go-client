/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DeleteOfferParameterType Значения параметров, которые хотите удалить, и соответствующие параметры в `UpdateOfferDTO`, в которых вы передали эти значения ранее:  * `ADDITIONAL_EXPENSES` — дополнительные расходы на товар (параметр `additionalExpenses`). * `ADULT` — пометка 18+ (параметр `adult`) * `AGE` — возрастное ограничение для детей (параметр `age`). * `BARCODES` — штрихкод (параметр `barcodes`). * `BOX_COUNT` — количество грузовых мест (параметр `boxCount`). * `CERTIFICATES` — номера документов на товар (параметр `certificates`). * `COFINANCE_PRICE` — цена для скидок с Маркетом (параметр `cofinancePrice`). * `COMMODITY_CODES` — товарные коды (параметр `commodityCodes`). * `CONDITION` — состояние уцененного товара (параметр `condition`). * `CUSTOMS_COMMODITY_CODE` — код товара в ТН ВЭД (параметр `customsCommodityCode`). * `DESCRIPTION` — описание товара (параметр `description`). * `DOWNLOADABLE` — признак цифрового товара (параметр `downloadable`). * `FIRST_VIDEO_AS_COVER` — использование первого видео в карточке как видеообложки (параметр `firstVideoAsCover`). * `GUARANTEE_PERIOD` — гарантийный срок (параметр `guaranteePeriod`). * `LIFE_TIME` — срок службы (параметр `lifeTime`). * `MANUALS` — список инструкций по использованию товара (параметр `manuals`). * `MANUFACTURER_COUNTRIES` — страна производства (параметр `manufacturerCountries`). * `PARAMETERS` — характеристики товара (параметры `params`, `parameterValues`). * `PICTURES` — ссылки на изображения товара (параметр `pictures`). * `PURCHASE_PRICE` — себестоимость (параметр `purchasePrice`). * `SHELF_LIFE` — срок годности (параметр `shelfLife`). * `TAGS` — метки товара, которые использует магазин (параметр `tags`). * `TYPE` — особый тип товара (параметр `type`). * `VENDOR_CODE` — название бренда или производителя (параметр `vendorCode`). * `VIDEOS` — ссылки на видео товара (параметр `videos`).
type DeleteOfferParameterType string

// List of DeleteOfferParameterType
const (
	DeleteOfferParameterType_ADDITIONAL_EXPENSES    DeleteOfferParameterType = "ADDITIONAL_EXPENSES"
	DeleteOfferParameterType_ADULT                  DeleteOfferParameterType = "ADULT"
	DeleteOfferParameterType_AGE                    DeleteOfferParameterType = "AGE"
	DeleteOfferParameterType_BARCODES               DeleteOfferParameterType = "BARCODES"
	DeleteOfferParameterType_BOX_COUNT              DeleteOfferParameterType = "BOX_COUNT"
	DeleteOfferParameterType_CERTIFICATES           DeleteOfferParameterType = "CERTIFICATES"
	DeleteOfferParameterType_COFINANCE_PRICE        DeleteOfferParameterType = "COFINANCE_PRICE"
	DeleteOfferParameterType_COMMODITY_CODES        DeleteOfferParameterType = "COMMODITY_CODES"
	DeleteOfferParameterType_CONDITION              DeleteOfferParameterType = "CONDITION"
	DeleteOfferParameterType_CUSTOMS_COMMODITY_CODE DeleteOfferParameterType = "CUSTOMS_COMMODITY_CODE"
	DeleteOfferParameterType_DESCRIPTION            DeleteOfferParameterType = "DESCRIPTION"
	DeleteOfferParameterType_DOWNLOADABLE           DeleteOfferParameterType = "DOWNLOADABLE"
	DeleteOfferParameterType_FIRST_VIDEO_AS_COVER   DeleteOfferParameterType = "FIRST_VIDEO_AS_COVER"
	DeleteOfferParameterType_GUARANTEE_PERIOD       DeleteOfferParameterType = "GUARANTEE_PERIOD"
	DeleteOfferParameterType_LIFE_TIME              DeleteOfferParameterType = "LIFE_TIME"
	DeleteOfferParameterType_MANUALS                DeleteOfferParameterType = "MANUALS"
	DeleteOfferParameterType_MANUFACTURER_COUNTRIES DeleteOfferParameterType = "MANUFACTURER_COUNTRIES"
	DeleteOfferParameterType_PARAMETERS             DeleteOfferParameterType = "PARAMETERS"
	DeleteOfferParameterType_PICTURES               DeleteOfferParameterType = "PICTURES"
	DeleteOfferParameterType_PURCHASE_PRICE         DeleteOfferParameterType = "PURCHASE_PRICE"
	DeleteOfferParameterType_SHELF_LIFE             DeleteOfferParameterType = "SHELF_LIFE"
	DeleteOfferParameterType_TAGS                   DeleteOfferParameterType = "TAGS"
	DeleteOfferParameterType_TYPE                   DeleteOfferParameterType = "TYPE"
	DeleteOfferParameterType_VENDOR_CODE            DeleteOfferParameterType = "VENDOR_CODE"
	DeleteOfferParameterType_VIDEOS                 DeleteOfferParameterType = "VIDEOS"
)

// All allowed values of DeleteOfferParameterType enum
var AllowedDeleteOfferParameterTypeEnumValues = []DeleteOfferParameterType{
	"ADDITIONAL_EXPENSES",
	"ADULT",
	"AGE",
	"BARCODES",
	"BOX_COUNT",
	"CERTIFICATES",
	"COFINANCE_PRICE",
	"COMMODITY_CODES",
	"CONDITION",
	"CUSTOMS_COMMODITY_CODE",
	"DESCRIPTION",
	"DOWNLOADABLE",
	"FIRST_VIDEO_AS_COVER",
	"GUARANTEE_PERIOD",
	"LIFE_TIME",
	"MANUALS",
	"MANUFACTURER_COUNTRIES",
	"PARAMETERS",
	"PICTURES",
	"PURCHASE_PRICE",
	"SHELF_LIFE",
	"TAGS",
	"TYPE",
	"VENDOR_CODE",
	"VIDEOS",
}

func (v *DeleteOfferParameterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeleteOfferParameterType(value)
	for _, existing := range AllowedDeleteOfferParameterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeleteOfferParameterType", value)
}

// NewDeleteOfferParameterTypeFromValue returns a pointer to a valid DeleteOfferParameterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeleteOfferParameterTypeFromValue(v string) (*DeleteOfferParameterType, error) {
	ev := DeleteOfferParameterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeleteOfferParameterType: valid values are %v", v, AllowedDeleteOfferParameterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeleteOfferParameterType) IsValid() bool {
	for _, existing := range AllowedDeleteOfferParameterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeleteOfferParameterType value
func (v DeleteOfferParameterType) Ptr() *DeleteOfferParameterType {
	return &v
}

type NullableDeleteOfferParameterType struct {
	value *DeleteOfferParameterType
	isSet bool
}

func (v NullableDeleteOfferParameterType) Get() *DeleteOfferParameterType {
	return v.value
}

func (v *NullableDeleteOfferParameterType) Set(val *DeleteOfferParameterType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteOfferParameterType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteOfferParameterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteOfferParameterType(val *DeleteOfferParameterType) *NullableDeleteOfferParameterType {
	return &NullableDeleteOfferParameterType{value: val, isSet: true}
}

func (v NullableDeleteOfferParameterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteOfferParameterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
