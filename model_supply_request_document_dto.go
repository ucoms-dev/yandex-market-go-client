/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SupplyRequestDocumentDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupplyRequestDocumentDTO{}

// SupplyRequestDocumentDTO Документ по заявке.
type SupplyRequestDocumentDTO struct {
	Type SupplyRequestDocumentType `json:"type"`
	// Ссылка на документ.
	Url string `json:"url"`
	// Дата и время создания документа.
	CreatedAt time.Time `json:"createdAt"`
}

type _SupplyRequestDocumentDTO SupplyRequestDocumentDTO

// NewSupplyRequestDocumentDTO instantiates a new SupplyRequestDocumentDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupplyRequestDocumentDTO(type_ SupplyRequestDocumentType, url string, createdAt time.Time) *SupplyRequestDocumentDTO {
	this := SupplyRequestDocumentDTO{}
	this.Type = type_
	this.Url = url
	this.CreatedAt = createdAt
	return &this
}

// NewSupplyRequestDocumentDTOWithDefaults instantiates a new SupplyRequestDocumentDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupplyRequestDocumentDTOWithDefaults() *SupplyRequestDocumentDTO {
	this := SupplyRequestDocumentDTO{}
	return &this
}

// GetType returns the Type field value
func (o *SupplyRequestDocumentDTO) GetType() SupplyRequestDocumentType {
	if o == nil {
		var ret SupplyRequestDocumentType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestDocumentDTO) GetTypeOk() (*SupplyRequestDocumentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SupplyRequestDocumentDTO) SetType(v SupplyRequestDocumentType) {
	o.Type = v
}

// GetUrl returns the Url field value
func (o *SupplyRequestDocumentDTO) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestDocumentDTO) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SupplyRequestDocumentDTO) SetUrl(v string) {
	o.Url = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *SupplyRequestDocumentDTO) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestDocumentDTO) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SupplyRequestDocumentDTO) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o SupplyRequestDocumentDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupplyRequestDocumentDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["url"] = o.Url
	toSerialize["createdAt"] = o.CreatedAt
	return toSerialize, nil
}

func (o *SupplyRequestDocumentDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"url",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupplyRequestDocumentDTO := _SupplyRequestDocumentDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSupplyRequestDocumentDTO)

	if err != nil {
		return err
	}

	*o = SupplyRequestDocumentDTO(varSupplyRequestDocumentDTO)

	return err
}

type NullableSupplyRequestDocumentDTO struct {
	value *SupplyRequestDocumentDTO
	isSet bool
}

func (v NullableSupplyRequestDocumentDTO) Get() *SupplyRequestDocumentDTO {
	return v.value
}

func (v *NullableSupplyRequestDocumentDTO) Set(val *SupplyRequestDocumentDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyRequestDocumentDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyRequestDocumentDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyRequestDocumentDTO(val *SupplyRequestDocumentDTO) *NullableSupplyRequestDocumentDTO {
	return &NullableSupplyRequestDocumentDTO{value: val, isSet: true}
}

func (v NullableSupplyRequestDocumentDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyRequestDocumentDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
