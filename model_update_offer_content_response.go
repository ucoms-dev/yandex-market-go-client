/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateOfferContentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateOfferContentResponse{}

// UpdateOfferContentResponse Описывает проблемы, которые появились при сохранении товара.
type UpdateOfferContentResponse struct {
	Status *ApiResponseStatusType `json:"status,omitempty"`
	// Ошибки и предупреждения, которые появились при обработке переданных значений. Каждый элемент списка соответствует одному товару.  Если ошибок и предупреждений нет, поле не передается. 
	Results []UpdateOfferContentResultDTO `json:"results,omitempty"`
}

// NewUpdateOfferContentResponse instantiates a new UpdateOfferContentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateOfferContentResponse() *UpdateOfferContentResponse {
	this := UpdateOfferContentResponse{}
	return &this
}

// NewUpdateOfferContentResponseWithDefaults instantiates a new UpdateOfferContentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateOfferContentResponseWithDefaults() *UpdateOfferContentResponse {
	this := UpdateOfferContentResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UpdateOfferContentResponse) GetStatus() ApiResponseStatusType {
	if o == nil || IsNil(o.Status) {
		var ret ApiResponseStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferContentResponse) GetStatusOk() (*ApiResponseStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdateOfferContentResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ApiResponseStatusType and assigns it to the Status field.
func (o *UpdateOfferContentResponse) SetStatus(v ApiResponseStatusType) {
	o.Status = &v
}

// GetResults returns the Results field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOfferContentResponse) GetResults() []UpdateOfferContentResultDTO {
	if o == nil {
		var ret []UpdateOfferContentResultDTO
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOfferContentResponse) GetResultsOk() ([]UpdateOfferContentResultDTO, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *UpdateOfferContentResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []UpdateOfferContentResultDTO and assigns it to the Results field.
func (o *UpdateOfferContentResponse) SetResults(v []UpdateOfferContentResultDTO) {
	o.Results = v
}

func (o UpdateOfferContentResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateOfferContentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableUpdateOfferContentResponse struct {
	value *UpdateOfferContentResponse
	isSet bool
}

func (v NullableUpdateOfferContentResponse) Get() *UpdateOfferContentResponse {
	return v.value
}

func (v *NullableUpdateOfferContentResponse) Set(val *UpdateOfferContentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateOfferContentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateOfferContentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateOfferContentResponse(val *UpdateOfferContentResponse) *NullableUpdateOfferContentResponse {
	return &NullableUpdateOfferContentResponse{value: val, isSet: true}
}

func (v NullableUpdateOfferContentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateOfferContentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


