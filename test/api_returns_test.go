/*
Партнерский API Маркета

Testing ReturnsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ReturnsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReturnsAPIService GetReturn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var orderId int64
		var returnId int64

		resp, httpRes, err := apiClient.ReturnsAPI.GetReturn(context.Background(), campaignId, orderId, returnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnsAPIService GetReturnApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var orderId int64
		var returnId int64

		resp, httpRes, err := apiClient.ReturnsAPI.GetReturnApplication(context.Background(), campaignId, orderId, returnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnsAPIService GetReturnPhoto", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var orderId int64
		var returnId int64
		var itemId int64
		var imageHash string

		resp, httpRes, err := apiClient.ReturnsAPI.GetReturnPhoto(context.Background(), campaignId, orderId, returnId, itemId, imageHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnsAPIService GetReturns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ReturnsAPI.GetReturns(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnsAPIService SetReturnDecision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var orderId int64
		var returnId int64

		resp, httpRes, err := apiClient.ReturnsAPI.SetReturnDecision(context.Background(), campaignId, orderId, returnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnsAPIService SubmitReturnDecision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var orderId int64
		var returnId int64

		resp, httpRes, err := apiClient.ReturnsAPI.SubmitReturnDecision(context.Background(), campaignId, orderId, returnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
