/*
Партнерский API Маркета

Testing ExpressAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/pussikill/yandex-market-go-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_ExpressAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExpressAPIService AddHiddenOffers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.AddHiddenOffers(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService AddOffersToArchive", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.AddOffersToArchive(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService CalculateTariffs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.CalculateTariffs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService ConfirmBusinessPrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.ConfirmBusinessPrices(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService ConfirmCampaignPrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.ConfirmCampaignPrices(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService CreateChat", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.CreateChat(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService DeleteCampaignOffers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.DeleteCampaignOffers(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService DeleteGoodsFeedbackComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.DeleteGoodsFeedbackComment(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService DeleteHiddenOffers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.DeleteHiddenOffers(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService DeleteOffers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.DeleteOffers(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService DeleteOffersFromArchive", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.DeleteOffersFromArchive(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService DeletePromoOffers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.DeletePromoOffers(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateBannersStatisticsReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateBannersStatisticsReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateBoostConsolidatedReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateBoostConsolidatedReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateCompetitorsPositionReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateCompetitorsPositionReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateGoodsFeedbackReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateGoodsFeedbackReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateGoodsRealizationReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateGoodsRealizationReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateJewelryFiscalReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateJewelryFiscalReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateMassOrderLabelsReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateMassOrderLabelsReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateOrderLabel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64
		var shipmentId int64
		var boxId int64

		resp, httpRes, err := apiClient.ExpressAPI.GenerateOrderLabel(context.Background(), campaignId, orderId, shipmentId, boxId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateOrderLabels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64

		resp, httpRes, err := apiClient.ExpressAPI.GenerateOrderLabels(context.Background(), campaignId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GeneratePricesReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GeneratePricesReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateSalesGeographyReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateSalesGeographyReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateShelfsStatisticsReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateShelfsStatisticsReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateShowsBoostReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateShowsBoostReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateShowsSalesReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateShowsSalesReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateStocksOnWarehousesReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateStocksOnWarehousesReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateUnitedMarketplaceServicesReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateUnitedMarketplaceServicesReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateUnitedNettingReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateUnitedNettingReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateUnitedOrdersReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateUnitedOrdersReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GenerateUnitedReturnsReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GenerateUnitedReturnsReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetAuthTokenInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GetAuthTokenInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetBidsInfoForBusiness", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetBidsInfoForBusiness(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetBidsRecommendations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetBidsRecommendations(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetBusinessQuarantineOffers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetBusinessQuarantineOffers(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetBusinessSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetBusinessSettings(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetCampaign", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetCampaign(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetCampaignOffers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetCampaignOffers(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetCampaignQuarantineOffers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetCampaignQuarantineOffers(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetCampaignRegion", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetCampaignRegion(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetCampaignSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetCampaignSettings(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetCampaigns", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GetCampaigns(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetCategoriesMaxSaleQuantum", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GetCategoriesMaxSaleQuantum(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetCategoriesTree", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GetCategoriesTree(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetCategoryContentParameters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var categoryId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetCategoryContentParameters(context.Background(), categoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetChat", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetChat(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetChatHistory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetChatHistory(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetChatMessage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetChatMessage(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetChats", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetChats(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetDeliveryServices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GetDeliveryServices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetGoodsFeedbackComments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetGoodsFeedbackComments(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetGoodsFeedbacks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetGoodsFeedbacks(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetGoodsStats", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetGoodsStats(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetHiddenOffers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetHiddenOffers(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetOfferCardsContentStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetOfferCardsContentStatus(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetOfferMappingEntries", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetOfferMappingEntries(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetOfferMappings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetOfferMappings(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetOfferRecommendations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetOfferRecommendations(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetOrder(context.Background(), campaignId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetOrderBusinessBuyerInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetOrderBusinessBuyerInfo(context.Background(), campaignId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetOrderBusinessDocumentsInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetOrderBusinessDocumentsInfo(context.Background(), campaignId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetOrderIdentifiersStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetOrderIdentifiersStatus(context.Background(), campaignId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetOrderLabelsData", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetOrderLabelsData(context.Background(), campaignId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetOrders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetOrders(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetOrdersStats", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetOrdersStats(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetPagedWarehouses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetPagedWarehouses(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetPrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetPrices(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetPricesByOfferIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetPricesByOfferIds(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetPromoOffers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetPromoOffers(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetPromos", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetPromos(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetQualityRatingDetails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetQualityRatingDetails(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetQualityRatings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetQualityRatings(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetRegionsCodes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.GetRegionsCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetReportInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var reportId string

		resp, httpRes, err := apiClient.ExpressAPI.GetReportInfo(context.Background(), reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetReturn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64
		var returnId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetReturn(context.Background(), campaignId, orderId, returnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetReturnApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64
		var returnId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetReturnApplication(context.Background(), campaignId, orderId, returnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetReturnPhoto", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64
		var returnId int64
		var itemId int64
		var imageHash string

		resp, httpRes, err := apiClient.ExpressAPI.GetReturnPhoto(context.Background(), campaignId, orderId, returnId, itemId, imageHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetReturns", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetReturns(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetStocks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetStocks(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetSuggestedOfferMappingEntries", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetSuggestedOfferMappingEntries(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetSuggestedOfferMappings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetSuggestedOfferMappings(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetSuggestedPrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetSuggestedPrices(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService GetWarehouses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.GetWarehouses(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService ProvideOrderItemIdentifiers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64

		resp, httpRes, err := apiClient.ExpressAPI.ProvideOrderItemIdentifiers(context.Background(), campaignId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService PutBidsForBusiness", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.PutBidsForBusiness(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService PutBidsForCampaign", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.PutBidsForCampaign(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService SearchRegionChildren", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var regionId int64

		resp, httpRes, err := apiClient.ExpressAPI.SearchRegionChildren(context.Background(), regionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService SearchRegionsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var regionId int64

		resp, httpRes, err := apiClient.ExpressAPI.SearchRegionsById(context.Background(), regionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService SearchRegionsByName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExpressAPI.SearchRegionsByName(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService SendFileToChat", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.SendFileToChat(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService SendMessageToChat", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.SendMessageToChat(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService SetOrderBoxLayout", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64

		resp, httpRes, err := apiClient.ExpressAPI.SetOrderBoxLayout(context.Background(), campaignId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService SetOrderShipmentBoxes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64
		var shipmentId int64

		resp, httpRes, err := apiClient.ExpressAPI.SetOrderShipmentBoxes(context.Background(), campaignId, orderId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService SkipGoodsFeedbacksReaction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.SkipGoodsFeedbacksReaction(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService SubmitReturnDecision", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64
		var returnId int64

		resp, httpRes, err := apiClient.ExpressAPI.SubmitReturnDecision(context.Background(), campaignId, orderId, returnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdateBusinessPrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.UpdateBusinessPrices(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdateCampaignOffers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.UpdateCampaignOffers(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdateExternalOrderId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64

		resp, httpRes, err := apiClient.ExpressAPI.UpdateExternalOrderId(context.Background(), campaignId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdateGoodsFeedbackComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.UpdateGoodsFeedbackComment(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdateOfferContent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.UpdateOfferContent(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdateOfferMappingEntries", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.UpdateOfferMappingEntries(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdateOfferMappings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.UpdateOfferMappings(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdateOrderItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64

		httpRes, err := apiClient.ExpressAPI.UpdateOrderItems(context.Background(), campaignId, orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdateOrderStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64

		resp, httpRes, err := apiClient.ExpressAPI.UpdateOrderStatus(context.Background(), campaignId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdateOrderStatuses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.UpdateOrderStatuses(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdatePrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.UpdatePrices(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdatePromoOffers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var businessId int64

		resp, httpRes, err := apiClient.ExpressAPI.UpdatePromoOffers(context.Background(), businessId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdateStocks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.UpdateStocks(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService UpdateWarehouseStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ExpressAPI.UpdateWarehouseStatus(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExpressAPIService VerifyOrderEac", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var campaignId int64
		var orderId int64

		resp, httpRes, err := apiClient.ExpressAPI.VerifyOrderEac(context.Background(), campaignId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
