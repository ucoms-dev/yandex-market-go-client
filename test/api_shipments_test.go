/*
Партнерский API Маркета

Testing ShipmentsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ShipmentsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ShipmentsAPIService ConfirmShipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var shipmentId int64

		resp, httpRes, err := apiClient.ShipmentsAPI.ConfirmShipment(context.Background(), campaignId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShipmentsAPIService DownloadShipmentAct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var shipmentId int64

		resp, httpRes, err := apiClient.ShipmentsAPI.DownloadShipmentAct(context.Background(), campaignId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShipmentsAPIService DownloadShipmentDiscrepancyAct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var shipmentId int64

		resp, httpRes, err := apiClient.ShipmentsAPI.DownloadShipmentDiscrepancyAct(context.Background(), campaignId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShipmentsAPIService DownloadShipmentInboundAct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var shipmentId int64

		resp, httpRes, err := apiClient.ShipmentsAPI.DownloadShipmentInboundAct(context.Background(), campaignId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShipmentsAPIService DownloadShipmentPalletLabels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var shipmentId int64

		resp, httpRes, err := apiClient.ShipmentsAPI.DownloadShipmentPalletLabels(context.Background(), campaignId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShipmentsAPIService DownloadShipmentReceptionTransferAct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ShipmentsAPI.DownloadShipmentReceptionTransferAct(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShipmentsAPIService DownloadShipmentTransportationWaybill", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var shipmentId int64

		resp, httpRes, err := apiClient.ShipmentsAPI.DownloadShipmentTransportationWaybill(context.Background(), campaignId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShipmentsAPIService GetShipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var shipmentId int64

		resp, httpRes, err := apiClient.ShipmentsAPI.GetShipment(context.Background(), campaignId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShipmentsAPIService GetShipmentOrdersInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var shipmentId int64

		resp, httpRes, err := apiClient.ShipmentsAPI.GetShipmentOrdersInfo(context.Background(), campaignId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShipmentsAPIService SearchShipments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64

		resp, httpRes, err := apiClient.ShipmentsAPI.SearchShipments(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShipmentsAPIService SetShipmentPalletsCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var shipmentId int64

		resp, httpRes, err := apiClient.ShipmentsAPI.SetShipmentPalletsCount(context.Background(), campaignId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShipmentsAPIService TransferOrdersFromShipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId int64
		var shipmentId int64

		resp, httpRes, err := apiClient.ShipmentsAPI.TransferOrdersFromShipment(context.Background(), campaignId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
