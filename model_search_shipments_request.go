/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchShipmentsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchShipmentsRequest{}

// SearchShipmentsRequest Запрос информации об отгрузках.
type SearchShipmentsRequest struct {
	// Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`. 
	DateFrom string `json:"dateFrom"`
	// Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`. 
	DateTo string `json:"dateTo"`
	// Список статусов отгрузок.
	Statuses []ShipmentStatusType `json:"statuses,omitempty"`
	// Список идентификаторов заказов из отгрузок.
	OrderIds []int64 `json:"orderIds,omitempty"`
	// Возвращать ли отмененные заказы.  Значение по умолчанию: `true`. Если возвращать отмененные заказы не нужно, передайте значение `false`. 
	CancelledOrders *bool `json:"cancelledOrders,omitempty"`
}

type _SearchShipmentsRequest SearchShipmentsRequest

// NewSearchShipmentsRequest instantiates a new SearchShipmentsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchShipmentsRequest(dateFrom string, dateTo string) *SearchShipmentsRequest {
	this := SearchShipmentsRequest{}
	this.DateFrom = dateFrom
	this.DateTo = dateTo
	var cancelledOrders bool = true
	this.CancelledOrders = &cancelledOrders
	return &this
}

// NewSearchShipmentsRequestWithDefaults instantiates a new SearchShipmentsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchShipmentsRequestWithDefaults() *SearchShipmentsRequest {
	this := SearchShipmentsRequest{}
	var cancelledOrders bool = true
	this.CancelledOrders = &cancelledOrders
	return &this
}

// GetDateFrom returns the DateFrom field value
func (o *SearchShipmentsRequest) GetDateFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateFrom
}

// GetDateFromOk returns a tuple with the DateFrom field value
// and a boolean to check if the value has been set.
func (o *SearchShipmentsRequest) GetDateFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateFrom, true
}

// SetDateFrom sets field value
func (o *SearchShipmentsRequest) SetDateFrom(v string) {
	o.DateFrom = v
}

// GetDateTo returns the DateTo field value
func (o *SearchShipmentsRequest) GetDateTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateTo
}

// GetDateToOk returns a tuple with the DateTo field value
// and a boolean to check if the value has been set.
func (o *SearchShipmentsRequest) GetDateToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateTo, true
}

// SetDateTo sets field value
func (o *SearchShipmentsRequest) SetDateTo(v string) {
	o.DateTo = v
}

// GetStatuses returns the Statuses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchShipmentsRequest) GetStatuses() []ShipmentStatusType {
	if o == nil {
		var ret []ShipmentStatusType
		return ret
	}
	return o.Statuses
}

// GetStatusesOk returns a tuple with the Statuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchShipmentsRequest) GetStatusesOk() ([]ShipmentStatusType, bool) {
	if o == nil || IsNil(o.Statuses) {
		return nil, false
	}
	return o.Statuses, true
}

// HasStatuses returns a boolean if a field has been set.
func (o *SearchShipmentsRequest) HasStatuses() bool {
	if o != nil && !IsNil(o.Statuses) {
		return true
	}

	return false
}

// SetStatuses gets a reference to the given []ShipmentStatusType and assigns it to the Statuses field.
func (o *SearchShipmentsRequest) SetStatuses(v []ShipmentStatusType) {
	o.Statuses = v
}

// GetOrderIds returns the OrderIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchShipmentsRequest) GetOrderIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.OrderIds
}

// GetOrderIdsOk returns a tuple with the OrderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchShipmentsRequest) GetOrderIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.OrderIds) {
		return nil, false
	}
	return o.OrderIds, true
}

// HasOrderIds returns a boolean if a field has been set.
func (o *SearchShipmentsRequest) HasOrderIds() bool {
	if o != nil && !IsNil(o.OrderIds) {
		return true
	}

	return false
}

// SetOrderIds gets a reference to the given []int64 and assigns it to the OrderIds field.
func (o *SearchShipmentsRequest) SetOrderIds(v []int64) {
	o.OrderIds = v
}

// GetCancelledOrders returns the CancelledOrders field value if set, zero value otherwise.
func (o *SearchShipmentsRequest) GetCancelledOrders() bool {
	if o == nil || IsNil(o.CancelledOrders) {
		var ret bool
		return ret
	}
	return *o.CancelledOrders
}

// GetCancelledOrdersOk returns a tuple with the CancelledOrders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchShipmentsRequest) GetCancelledOrdersOk() (*bool, bool) {
	if o == nil || IsNil(o.CancelledOrders) {
		return nil, false
	}
	return o.CancelledOrders, true
}

// HasCancelledOrders returns a boolean if a field has been set.
func (o *SearchShipmentsRequest) HasCancelledOrders() bool {
	if o != nil && !IsNil(o.CancelledOrders) {
		return true
	}

	return false
}

// SetCancelledOrders gets a reference to the given bool and assigns it to the CancelledOrders field.
func (o *SearchShipmentsRequest) SetCancelledOrders(v bool) {
	o.CancelledOrders = &v
}

func (o SearchShipmentsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchShipmentsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dateFrom"] = o.DateFrom
	toSerialize["dateTo"] = o.DateTo
	if o.Statuses != nil {
		toSerialize["statuses"] = o.Statuses
	}
	if o.OrderIds != nil {
		toSerialize["orderIds"] = o.OrderIds
	}
	if !IsNil(o.CancelledOrders) {
		toSerialize["cancelledOrders"] = o.CancelledOrders
	}
	return toSerialize, nil
}

func (o *SearchShipmentsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dateFrom",
		"dateTo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchShipmentsRequest := _SearchShipmentsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchShipmentsRequest)

	if err != nil {
		return err
	}

	*o = SearchShipmentsRequest(varSearchShipmentsRequest)

	return err
}

type NullableSearchShipmentsRequest struct {
	value *SearchShipmentsRequest
	isSet bool
}

func (v NullableSearchShipmentsRequest) Get() *SearchShipmentsRequest {
	return v.value
}

func (v *NullableSearchShipmentsRequest) Set(val *SearchShipmentsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchShipmentsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchShipmentsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchShipmentsRequest(val *SearchShipmentsRequest) *NullableSearchShipmentsRequest {
	return &NullableSearchShipmentsRequest{value: val, isSet: true}
}

func (v NullableSearchShipmentsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchShipmentsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


