/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StatisticsAttributionType Тип атрибуции:   * `CLICKS` — по кликам.   * `SHOWS` — по показам. <br><br>  О том, какие данные в отчете зависят и не зависят от типа атрибуции, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf#stats).
type StatisticsAttributionType string

// List of StatisticsAttributionType
const (
	StatisticsAttributionType_CLICKS StatisticsAttributionType = "CLICKS"
	StatisticsAttributionType_SHOWS  StatisticsAttributionType = "SHOWS"
)

// All allowed values of StatisticsAttributionType enum
var AllowedStatisticsAttributionTypeEnumValues = []StatisticsAttributionType{
	"CLICKS",
	"SHOWS",
}

func (v *StatisticsAttributionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatisticsAttributionType(value)
	for _, existing := range AllowedStatisticsAttributionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatisticsAttributionType", value)
}

// NewStatisticsAttributionTypeFromValue returns a pointer to a valid StatisticsAttributionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatisticsAttributionTypeFromValue(v string) (*StatisticsAttributionType, error) {
	ev := StatisticsAttributionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatisticsAttributionType: valid values are %v", v, AllowedStatisticsAttributionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatisticsAttributionType) IsValid() bool {
	for _, existing := range AllowedStatisticsAttributionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatisticsAttributionType value
func (v StatisticsAttributionType) Ptr() *StatisticsAttributionType {
	return &v
}

type NullableStatisticsAttributionType struct {
	value *StatisticsAttributionType
	isSet bool
}

func (v NullableStatisticsAttributionType) Get() *StatisticsAttributionType {
	return v.value
}

func (v *NullableStatisticsAttributionType) Set(val *StatisticsAttributionType) {
	v.value = val
	v.isSet = true
}

func (v NullableStatisticsAttributionType) IsSet() bool {
	return v.isSet
}

func (v *NullableStatisticsAttributionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatisticsAttributionType(val *StatisticsAttributionType) *NullableStatisticsAttributionType {
	return &NullableStatisticsAttributionType{value: val, isSet: true}
}

func (v NullableStatisticsAttributionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatisticsAttributionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
