/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OfferProcessingStatusType Статус публикации товара:  * `UNKNOWN` — неизвестный статус. * `READY` — товар прошел модерацию. Чтобы разместить его на Маркете, установите для него цену. * `IN_WORK` — товар проходит модерацию. Это занимает несколько дней. * `NEED_INFO` — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. Информация о причинах отклонения возвращается в параметре `notes`. * `NEED_MAPPING` — у товара нельзя создать карточку. * `NEED_CONTENT` — для товара без SKU на Маркете (`marketSku`) нужно найти карточку самостоятельно (через API или кабинет продавца на Маркете) или создать ее, если товар еще не продается на Маркете. * `CONTENT_PROCESSING` — товар находится на модерации. * `SUSPENDED` — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. * `REJECTED` — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * `REVIEW` — принимается решение о размещении товара. * `CREATE_ERROR` — не удалось создать карточку товара. * `UPDATE_ERROR` — у карточки товара есть непримененные изменения.
type OfferProcessingStatusType string

// List of OfferProcessingStatusType
const (
	UNKNOWN            OfferProcessingStatusType = "UNKNOWN"
	READY              OfferProcessingStatusType = "READY"
	IN_WORK            OfferProcessingStatusType = "IN_WORK"
	NEED_INFO          OfferProcessingStatusType = "NEED_INFO"
	NEED_MAPPING       OfferProcessingStatusType = "NEED_MAPPING"
	NEED_CONTENT       OfferProcessingStatusType = "NEED_CONTENT"
	CONTENT_PROCESSING OfferProcessingStatusType = "CONTENT_PROCESSING"
	SUSPENDED          OfferProcessingStatusType = "SUSPENDED"
	REJECTED           OfferProcessingStatusType = "REJECTED"
	REVIEW             OfferProcessingStatusType = "REVIEW"
	CREATE_ERROR       OfferProcessingStatusType = "CREATE_ERROR"
	UPDATE_ERROR       OfferProcessingStatusType = "UPDATE_ERROR"
)

// All allowed values of OfferProcessingStatusType enum
var AllowedOfferProcessingStatusTypeEnumValues = []OfferProcessingStatusType{
	"UNKNOWN",
	"READY",
	"IN_WORK",
	"NEED_INFO",
	"NEED_MAPPING",
	"NEED_CONTENT",
	"CONTENT_PROCESSING",
	"SUSPENDED",
	"REJECTED",
	"REVIEW",
	"CREATE_ERROR",
	"UPDATE_ERROR",
}

func (v *OfferProcessingStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OfferProcessingStatusType(value)
	for _, existing := range AllowedOfferProcessingStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OfferProcessingStatusType", value)
}

// NewOfferProcessingStatusTypeFromValue returns a pointer to a valid OfferProcessingStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOfferProcessingStatusTypeFromValue(v string) (*OfferProcessingStatusType, error) {
	ev := OfferProcessingStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OfferProcessingStatusType: valid values are %v", v, AllowedOfferProcessingStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OfferProcessingStatusType) IsValid() bool {
	for _, existing := range AllowedOfferProcessingStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OfferProcessingStatusType value
func (v OfferProcessingStatusType) Ptr() *OfferProcessingStatusType {
	return &v
}

type NullableOfferProcessingStatusType struct {
	value *OfferProcessingStatusType
	isSet bool
}

func (v NullableOfferProcessingStatusType) Get() *OfferProcessingStatusType {
	return v.value
}

func (v *NullableOfferProcessingStatusType) Set(val *OfferProcessingStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferProcessingStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferProcessingStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferProcessingStatusType(val *OfferProcessingStatusType) *NullableOfferProcessingStatusType {
	return &NullableOfferProcessingStatusType{value: val, isSet: true}
}

func (v NullableOfferProcessingStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferProcessingStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
