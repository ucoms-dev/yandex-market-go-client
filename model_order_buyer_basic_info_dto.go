/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OrderBuyerBasicInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderBuyerBasicInfoDTO{}

// OrderBuyerBasicInfoDTO Информация о покупателе с базовыми полями.
type OrderBuyerBasicInfoDTO struct {
	// Идентификатор покупателя.
	Id *string `json:"id,omitempty"`
	// Фамилия покупателя.
	LastName *string `json:"lastName,omitempty"`
	// Имя покупателя.
	FirstName *string `json:"firstName,omitempty"`
	// Отчество покупателя.
	MiddleName *string        `json:"middleName,omitempty"`
	Type       OrderBuyerType `json:"type"`
}

type _OrderBuyerBasicInfoDTO OrderBuyerBasicInfoDTO

// NewOrderBuyerBasicInfoDTO instantiates a new OrderBuyerBasicInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderBuyerBasicInfoDTO(type_ OrderBuyerType) *OrderBuyerBasicInfoDTO {
	this := OrderBuyerBasicInfoDTO{}
	this.Type = type_
	return &this
}

// NewOrderBuyerBasicInfoDTOWithDefaults instantiates a new OrderBuyerBasicInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderBuyerBasicInfoDTOWithDefaults() *OrderBuyerBasicInfoDTO {
	this := OrderBuyerBasicInfoDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrderBuyerBasicInfoDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBuyerBasicInfoDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrderBuyerBasicInfoDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrderBuyerBasicInfoDTO) SetId(v string) {
	o.Id = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *OrderBuyerBasicInfoDTO) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBuyerBasicInfoDTO) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *OrderBuyerBasicInfoDTO) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *OrderBuyerBasicInfoDTO) SetLastName(v string) {
	o.LastName = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *OrderBuyerBasicInfoDTO) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBuyerBasicInfoDTO) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *OrderBuyerBasicInfoDTO) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *OrderBuyerBasicInfoDTO) SetFirstName(v string) {
	o.FirstName = &v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise.
func (o *OrderBuyerBasicInfoDTO) GetMiddleName() string {
	if o == nil || IsNil(o.MiddleName) {
		var ret string
		return ret
	}
	return *o.MiddleName
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBuyerBasicInfoDTO) GetMiddleNameOk() (*string, bool) {
	if o == nil || IsNil(o.MiddleName) {
		return nil, false
	}
	return o.MiddleName, true
}

// HasMiddleName returns a boolean if a field has been set.
func (o *OrderBuyerBasicInfoDTO) HasMiddleName() bool {
	if o != nil && !IsNil(o.MiddleName) {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given string and assigns it to the MiddleName field.
func (o *OrderBuyerBasicInfoDTO) SetMiddleName(v string) {
	o.MiddleName = &v
}

// GetType returns the Type field value
func (o *OrderBuyerBasicInfoDTO) GetType() OrderBuyerType {
	if o == nil {
		var ret OrderBuyerType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OrderBuyerBasicInfoDTO) GetTypeOk() (*OrderBuyerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OrderBuyerBasicInfoDTO) SetType(v OrderBuyerType) {
	o.Type = v
}

func (o OrderBuyerBasicInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderBuyerBasicInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.MiddleName) {
		toSerialize["middleName"] = o.MiddleName
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *OrderBuyerBasicInfoDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderBuyerBasicInfoDTO := _OrderBuyerBasicInfoDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varOrderBuyerBasicInfoDTO)

	if err != nil {
		return err
	}

	*o = OrderBuyerBasicInfoDTO(varOrderBuyerBasicInfoDTO)

	return err
}

type NullableOrderBuyerBasicInfoDTO struct {
	value *OrderBuyerBasicInfoDTO
	isSet bool
}

func (v NullableOrderBuyerBasicInfoDTO) Get() *OrderBuyerBasicInfoDTO {
	return v.value
}

func (v *NullableOrderBuyerBasicInfoDTO) Set(val *OrderBuyerBasicInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderBuyerBasicInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderBuyerBasicInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderBuyerBasicInfoDTO(val *OrderBuyerBasicInfoDTO) *NullableOrderBuyerBasicInfoDTO {
	return &NullableOrderBuyerBasicInfoDTO{value: val, isSet: true}
}

func (v NullableOrderBuyerBasicInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderBuyerBasicInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
