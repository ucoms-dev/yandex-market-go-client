/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateStocksRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStocksRequest{}

// UpdateStocksRequest Запрос на изменение информации по остаткам товаров.
type UpdateStocksRequest struct {
	// Данные об остатках товаров. 
	Skus []UpdateStockDTO `json:"skus"`
}

type _UpdateStocksRequest UpdateStocksRequest

// NewUpdateStocksRequest instantiates a new UpdateStocksRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStocksRequest(skus []UpdateStockDTO) *UpdateStocksRequest {
	this := UpdateStocksRequest{}
	this.Skus = skus
	return &this
}

// NewUpdateStocksRequestWithDefaults instantiates a new UpdateStocksRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStocksRequestWithDefaults() *UpdateStocksRequest {
	this := UpdateStocksRequest{}
	return &this
}

// GetSkus returns the Skus field value
func (o *UpdateStocksRequest) GetSkus() []UpdateStockDTO {
	if o == nil {
		var ret []UpdateStockDTO
		return ret
	}

	return o.Skus
}

// GetSkusOk returns a tuple with the Skus field value
// and a boolean to check if the value has been set.
func (o *UpdateStocksRequest) GetSkusOk() ([]UpdateStockDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Skus, true
}

// SetSkus sets field value
func (o *UpdateStocksRequest) SetSkus(v []UpdateStockDTO) {
	o.Skus = v
}

func (o UpdateStocksRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStocksRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["skus"] = o.Skus
	return toSerialize, nil
}

func (o *UpdateStocksRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"skus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateStocksRequest := _UpdateStocksRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateStocksRequest)

	if err != nil {
		return err
	}

	*o = UpdateStocksRequest(varUpdateStocksRequest)

	return err
}

type NullableUpdateStocksRequest struct {
	value *UpdateStocksRequest
	isSet bool
}

func (v NullableUpdateStocksRequest) Get() *UpdateStocksRequest {
	return v.value
}

func (v *NullableUpdateStocksRequest) Set(val *UpdateStocksRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStocksRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStocksRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStocksRequest(val *UpdateStocksRequest) *NullableUpdateStocksRequest {
	return &NullableUpdateStocksRequest{value: val, isSet: true}
}

func (v NullableUpdateStocksRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStocksRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


