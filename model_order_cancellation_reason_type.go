/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderCancellationReasonType Варианты причин, по которым заказ не может быть отменен.  * `ORDER_DELIVERED` — заказ уже доставлен. * `ORDER_IN_DELIVERY` — заказ уже у курьера. 
type OrderCancellationReasonType string

// List of OrderCancellationReasonType
const (
	ORDER_DELIVERED OrderCancellationReasonType = "ORDER_DELIVERED"
	ORDER_IN_DELIVERY OrderCancellationReasonType = "ORDER_IN_DELIVERY"
)

// All allowed values of OrderCancellationReasonType enum
var AllowedOrderCancellationReasonTypeEnumValues = []OrderCancellationReasonType{
	"ORDER_DELIVERED",
	"ORDER_IN_DELIVERY",
}

func (v *OrderCancellationReasonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderCancellationReasonType(value)
	for _, existing := range AllowedOrderCancellationReasonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderCancellationReasonType", value)
}

// NewOrderCancellationReasonTypeFromValue returns a pointer to a valid OrderCancellationReasonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderCancellationReasonTypeFromValue(v string) (*OrderCancellationReasonType, error) {
	ev := OrderCancellationReasonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderCancellationReasonType: valid values are %v", v, AllowedOrderCancellationReasonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderCancellationReasonType) IsValid() bool {
	for _, existing := range AllowedOrderCancellationReasonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderCancellationReasonType value
func (v OrderCancellationReasonType) Ptr() *OrderCancellationReasonType {
	return &v
}

type NullableOrderCancellationReasonType struct {
	value *OrderCancellationReasonType
	isSet bool
}

func (v NullableOrderCancellationReasonType) Get() *OrderCancellationReasonType {
	return v.value
}

func (v *NullableOrderCancellationReasonType) Set(val *OrderCancellationReasonType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderCancellationReasonType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderCancellationReasonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderCancellationReasonType(val *OrderCancellationReasonType) *NullableOrderCancellationReasonType {
	return &NullableOrderCancellationReasonType{value: val, isSet: true}
}

func (v NullableOrderCancellationReasonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderCancellationReasonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

