/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetCategoriesMaxSaleQuantumResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCategoriesMaxSaleQuantumResponse{}

// GetCategoriesMaxSaleQuantumResponse struct for GetCategoriesMaxSaleQuantumResponse
type GetCategoriesMaxSaleQuantumResponse struct {
	Status *ApiResponseStatusType `json:"status,omitempty"`
	// Категории и лимит на установку кванта и минимального количества товаров.
	Results []MaxSaleQuantumDTO `json:"results"`
	// Ошибки, которые появились из-за переданных категорий.
	Errors []CategoryErrorDTO `json:"errors,omitempty"`
}

type _GetCategoriesMaxSaleQuantumResponse GetCategoriesMaxSaleQuantumResponse

// NewGetCategoriesMaxSaleQuantumResponse instantiates a new GetCategoriesMaxSaleQuantumResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCategoriesMaxSaleQuantumResponse(results []MaxSaleQuantumDTO) *GetCategoriesMaxSaleQuantumResponse {
	this := GetCategoriesMaxSaleQuantumResponse{}
	this.Results = results
	return &this
}

// NewGetCategoriesMaxSaleQuantumResponseWithDefaults instantiates a new GetCategoriesMaxSaleQuantumResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCategoriesMaxSaleQuantumResponseWithDefaults() *GetCategoriesMaxSaleQuantumResponse {
	this := GetCategoriesMaxSaleQuantumResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GetCategoriesMaxSaleQuantumResponse) GetStatus() ApiResponseStatusType {
	if o == nil || IsNil(o.Status) {
		var ret ApiResponseStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCategoriesMaxSaleQuantumResponse) GetStatusOk() (*ApiResponseStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GetCategoriesMaxSaleQuantumResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ApiResponseStatusType and assigns it to the Status field.
func (o *GetCategoriesMaxSaleQuantumResponse) SetStatus(v ApiResponseStatusType) {
	o.Status = &v
}

// GetResults returns the Results field value
func (o *GetCategoriesMaxSaleQuantumResponse) GetResults() []MaxSaleQuantumDTO {
	if o == nil {
		var ret []MaxSaleQuantumDTO
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *GetCategoriesMaxSaleQuantumResponse) GetResultsOk() ([]MaxSaleQuantumDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *GetCategoriesMaxSaleQuantumResponse) SetResults(v []MaxSaleQuantumDTO) {
	o.Results = v
}

// GetErrors returns the Errors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetCategoriesMaxSaleQuantumResponse) GetErrors() []CategoryErrorDTO {
	if o == nil {
		var ret []CategoryErrorDTO
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetCategoriesMaxSaleQuantumResponse) GetErrorsOk() ([]CategoryErrorDTO, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *GetCategoriesMaxSaleQuantumResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []CategoryErrorDTO and assigns it to the Errors field.
func (o *GetCategoriesMaxSaleQuantumResponse) SetErrors(v []CategoryErrorDTO) {
	o.Errors = v
}

func (o GetCategoriesMaxSaleQuantumResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCategoriesMaxSaleQuantumResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["results"] = o.Results
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

func (o *GetCategoriesMaxSaleQuantumResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetCategoriesMaxSaleQuantumResponse := _GetCategoriesMaxSaleQuantumResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetCategoriesMaxSaleQuantumResponse)

	if err != nil {
		return err
	}

	*o = GetCategoriesMaxSaleQuantumResponse(varGetCategoriesMaxSaleQuantumResponse)

	return err
}

type NullableGetCategoriesMaxSaleQuantumResponse struct {
	value *GetCategoriesMaxSaleQuantumResponse
	isSet bool
}

func (v NullableGetCategoriesMaxSaleQuantumResponse) Get() *GetCategoriesMaxSaleQuantumResponse {
	return v.value
}

func (v *NullableGetCategoriesMaxSaleQuantumResponse) Set(val *GetCategoriesMaxSaleQuantumResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCategoriesMaxSaleQuantumResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCategoriesMaxSaleQuantumResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCategoriesMaxSaleQuantumResponse(val *GetCategoriesMaxSaleQuantumResponse) *NullableGetCategoriesMaxSaleQuantumResponse {
	return &NullableGetCategoriesMaxSaleQuantumResponse{value: val, isSet: true}
}

func (v NullableGetCategoriesMaxSaleQuantumResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCategoriesMaxSaleQuantumResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


