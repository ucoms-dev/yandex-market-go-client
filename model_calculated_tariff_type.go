/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CalculatedTariffType Услуга Маркета:  * `AGENCY_COMMISSION` — прием платежа покупателя.  * `PAYMENT_TRANSFER` — перевод платежа покупателя.  * `FEE` — размещение товара на Маркете.  * `DELIVERY_TO_CUSTOMER` — доставка покупателю.  * `CROSSREGIONAL_DELIVERY` — доставка в федеральный округ, город или населенный пункт.  * `EXPRESS_DELIVERY` — экспресс-доставка покупателю.  * `SORTING` — обработка заказа.  * `MIDDLE_MILE` — средняя миля.  Подробнее об услугах Маркета читайте [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/introduction/rates/index.html). 
type CalculatedTariffType string

// List of CalculatedTariffType
const (
	AGENCY_COMMISSION CalculatedTariffType = "AGENCY_COMMISSION"
	PAYMENT_TRANSFER CalculatedTariffType = "PAYMENT_TRANSFER"
	FEE CalculatedTariffType = "FEE"
	DELIVERY_TO_CUSTOMER CalculatedTariffType = "DELIVERY_TO_CUSTOMER"
	CROSSREGIONAL_DELIVERY CalculatedTariffType = "CROSSREGIONAL_DELIVERY"
	EXPRESS_DELIVERY CalculatedTariffType = "EXPRESS_DELIVERY"
	SORTING CalculatedTariffType = "SORTING"
	MIDDLE_MILE CalculatedTariffType = "MIDDLE_MILE"
)

// All allowed values of CalculatedTariffType enum
var AllowedCalculatedTariffTypeEnumValues = []CalculatedTariffType{
	"AGENCY_COMMISSION",
	"PAYMENT_TRANSFER",
	"FEE",
	"DELIVERY_TO_CUSTOMER",
	"CROSSREGIONAL_DELIVERY",
	"EXPRESS_DELIVERY",
	"SORTING",
	"MIDDLE_MILE",
}

func (v *CalculatedTariffType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CalculatedTariffType(value)
	for _, existing := range AllowedCalculatedTariffTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CalculatedTariffType", value)
}

// NewCalculatedTariffTypeFromValue returns a pointer to a valid CalculatedTariffType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCalculatedTariffTypeFromValue(v string) (*CalculatedTariffType, error) {
	ev := CalculatedTariffType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CalculatedTariffType: valid values are %v", v, AllowedCalculatedTariffTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CalculatedTariffType) IsValid() bool {
	for _, existing := range AllowedCalculatedTariffTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CalculatedTariffType value
func (v CalculatedTariffType) Ptr() *CalculatedTariffType {
	return &v
}

type NullableCalculatedTariffType struct {
	value *CalculatedTariffType
	isSet bool
}

func (v NullableCalculatedTariffType) Get() *CalculatedTariffType {
	return v.value
}

func (v *NullableCalculatedTariffType) Set(val *CalculatedTariffType) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculatedTariffType) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculatedTariffType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculatedTariffType(val *CalculatedTariffType) *NullableCalculatedTariffType {
	return &NullableCalculatedTariffType{value: val, isSet: true}
}

func (v NullableCalculatedTariffType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculatedTariffType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

