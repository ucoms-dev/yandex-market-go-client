/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GenerateShowsSalesReportRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenerateShowsSalesReportRequest{}

// GenerateShowsSalesReportRequest Данные, необходимые для генерации отчета.
type GenerateShowsSalesReportRequest struct {
	// Идентификатор кабинета.  Указывается, если нужно составить отчет по всем магазинам в кабинете. В запросе обязательно должен быть либо `businessId`, либо `campaignId`, но не оба сразу. 
	BusinessId *int64 `json:"businessId,omitempty"`
	// Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо `businessId`, либо `campaignId`, но не оба сразу.  Его можно узнать с помощью запроса [GET campaigns](../../reference/campaigns/getCampaigns.md) или найти в кабинете продавца на Маркете — нажмите на название своего бизнеса и перейдите на страницу:    * **Модули и API** → блок **Передача данных Маркету**.   * **Лог запросов** → выпадающий список в блоке **Показывать логи**.  ⚠️ Не передавайте вместо него идентификатор магазина, который указан в кабинете продавца на Маркете рядом с названием магазина и в некоторых отчетах. 
	CampaignId *int64 `json:"campaignId,omitempty"`
	// Начало периода, включительно.
	DateFrom string `json:"dateFrom"`
	// Конец периода, включительно.
	DateTo string `json:"dateTo"`
	Grouping ShowsSalesGroupingType `json:"grouping"`
}

type _GenerateShowsSalesReportRequest GenerateShowsSalesReportRequest

// NewGenerateShowsSalesReportRequest instantiates a new GenerateShowsSalesReportRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateShowsSalesReportRequest(dateFrom string, dateTo string, grouping ShowsSalesGroupingType) *GenerateShowsSalesReportRequest {
	this := GenerateShowsSalesReportRequest{}
	this.DateFrom = dateFrom
	this.DateTo = dateTo
	this.Grouping = grouping
	return &this
}

// NewGenerateShowsSalesReportRequestWithDefaults instantiates a new GenerateShowsSalesReportRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateShowsSalesReportRequestWithDefaults() *GenerateShowsSalesReportRequest {
	this := GenerateShowsSalesReportRequest{}
	return &this
}

// GetBusinessId returns the BusinessId field value if set, zero value otherwise.
func (o *GenerateShowsSalesReportRequest) GetBusinessId() int64 {
	if o == nil || IsNil(o.BusinessId) {
		var ret int64
		return ret
	}
	return *o.BusinessId
}

// GetBusinessIdOk returns a tuple with the BusinessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateShowsSalesReportRequest) GetBusinessIdOk() (*int64, bool) {
	if o == nil || IsNil(o.BusinessId) {
		return nil, false
	}
	return o.BusinessId, true
}

// HasBusinessId returns a boolean if a field has been set.
func (o *GenerateShowsSalesReportRequest) HasBusinessId() bool {
	if o != nil && !IsNil(o.BusinessId) {
		return true
	}

	return false
}

// SetBusinessId gets a reference to the given int64 and assigns it to the BusinessId field.
func (o *GenerateShowsSalesReportRequest) SetBusinessId(v int64) {
	o.BusinessId = &v
}

// GetCampaignId returns the CampaignId field value if set, zero value otherwise.
func (o *GenerateShowsSalesReportRequest) GetCampaignId() int64 {
	if o == nil || IsNil(o.CampaignId) {
		var ret int64
		return ret
	}
	return *o.CampaignId
}

// GetCampaignIdOk returns a tuple with the CampaignId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateShowsSalesReportRequest) GetCampaignIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CampaignId) {
		return nil, false
	}
	return o.CampaignId, true
}

// HasCampaignId returns a boolean if a field has been set.
func (o *GenerateShowsSalesReportRequest) HasCampaignId() bool {
	if o != nil && !IsNil(o.CampaignId) {
		return true
	}

	return false
}

// SetCampaignId gets a reference to the given int64 and assigns it to the CampaignId field.
func (o *GenerateShowsSalesReportRequest) SetCampaignId(v int64) {
	o.CampaignId = &v
}

// GetDateFrom returns the DateFrom field value
func (o *GenerateShowsSalesReportRequest) GetDateFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateFrom
}

// GetDateFromOk returns a tuple with the DateFrom field value
// and a boolean to check if the value has been set.
func (o *GenerateShowsSalesReportRequest) GetDateFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateFrom, true
}

// SetDateFrom sets field value
func (o *GenerateShowsSalesReportRequest) SetDateFrom(v string) {
	o.DateFrom = v
}

// GetDateTo returns the DateTo field value
func (o *GenerateShowsSalesReportRequest) GetDateTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateTo
}

// GetDateToOk returns a tuple with the DateTo field value
// and a boolean to check if the value has been set.
func (o *GenerateShowsSalesReportRequest) GetDateToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateTo, true
}

// SetDateTo sets field value
func (o *GenerateShowsSalesReportRequest) SetDateTo(v string) {
	o.DateTo = v
}

// GetGrouping returns the Grouping field value
func (o *GenerateShowsSalesReportRequest) GetGrouping() ShowsSalesGroupingType {
	if o == nil {
		var ret ShowsSalesGroupingType
		return ret
	}

	return o.Grouping
}

// GetGroupingOk returns a tuple with the Grouping field value
// and a boolean to check if the value has been set.
func (o *GenerateShowsSalesReportRequest) GetGroupingOk() (*ShowsSalesGroupingType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Grouping, true
}

// SetGrouping sets field value
func (o *GenerateShowsSalesReportRequest) SetGrouping(v ShowsSalesGroupingType) {
	o.Grouping = v
}

func (o GenerateShowsSalesReportRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateShowsSalesReportRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BusinessId) {
		toSerialize["businessId"] = o.BusinessId
	}
	if !IsNil(o.CampaignId) {
		toSerialize["campaignId"] = o.CampaignId
	}
	toSerialize["dateFrom"] = o.DateFrom
	toSerialize["dateTo"] = o.DateTo
	toSerialize["grouping"] = o.Grouping
	return toSerialize, nil
}

func (o *GenerateShowsSalesReportRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dateFrom",
		"dateTo",
		"grouping",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenerateShowsSalesReportRequest := _GenerateShowsSalesReportRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGenerateShowsSalesReportRequest)

	if err != nil {
		return err
	}

	*o = GenerateShowsSalesReportRequest(varGenerateShowsSalesReportRequest)

	return err
}

type NullableGenerateShowsSalesReportRequest struct {
	value *GenerateShowsSalesReportRequest
	isSet bool
}

func (v NullableGenerateShowsSalesReportRequest) Get() *GenerateShowsSalesReportRequest {
	return v.value
}

func (v *NullableGenerateShowsSalesReportRequest) Set(val *GenerateShowsSalesReportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateShowsSalesReportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateShowsSalesReportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateShowsSalesReportRequest(val *GenerateShowsSalesReportRequest) *NullableGenerateShowsSalesReportRequest {
	return &NullableGenerateShowsSalesReportRequest{value: val, isSet: true}
}

func (v NullableGenerateShowsSalesReportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateShowsSalesReportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


