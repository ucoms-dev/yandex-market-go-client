/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ReturnDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReturnDTO{}

// ReturnDTO Невыкуп или возврат в заказе.  Параметров `logisticPickupPoint`, `shipmentRecipientType` и `shipmentStatus` может не быть в случае возврата:   * С опцией **Быстрый возврат денег за дешевый брак**, когда товар остается у покупателя (`fastReturn=true`).   * По заказу от бизнеса, если:     * статус возврата `STARTED_BY_USER` или `WAITING_FOR_DECISION`;     * возврат отменен до передачи товара.  Статус возврата денег `refundStatus` актуален только для `returnType=RETURN`. 
type ReturnDTO struct {
	// Идентификатор невыкупа или возврата.
	Id int64 `json:"id"`
	// Номер заказа.
	OrderId int64 `json:"orderId"`
	// Дата создания невыкупа или возврата клиентом.  Формат даты: ISO 8601 со смещением относительно UTC. 
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// Дата обновления невыкупа или возврата.  Формат даты: ISO 8601 со смещением относительно UTC. 
	UpdateDate *time.Time `json:"updateDate,omitempty"`
	RefundStatus *RefundStatusType `json:"refundStatus,omitempty"`
	LogisticPickupPoint *LogisticPickupPointDTO `json:"logisticPickupPoint,omitempty"`
	ShipmentRecipientType *RecipientType `json:"shipmentRecipientType,omitempty"`
	ShipmentStatus *ReturnShipmentStatusType `json:"shipmentStatus,omitempty"`
	// {% note warning \"Вместо него используйте `amount`.\" %}     {% endnote %}  Сумма возврата в копейках. 
	// Deprecated
	RefundAmount *int64 `json:"refundAmount,omitempty"`
	Amount *CurrencyValueDTO `json:"amount,omitempty"`
	// Список товаров в невыкупе или возврате.
	Items []ReturnItemDTO `json:"items"`
	ReturnType ReturnType `json:"returnType"`
	// Используется ли опция **Быстрый возврат денег за дешевый брак**.  Актуально только для `returnType=RETURN`. 
	FastReturn *bool `json:"fastReturn,omitempty"`
}

type _ReturnDTO ReturnDTO

// NewReturnDTO instantiates a new ReturnDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReturnDTO(id int64, orderId int64, items []ReturnItemDTO, returnType ReturnType) *ReturnDTO {
	this := ReturnDTO{}
	this.Id = id
	this.OrderId = orderId
	this.Items = items
	this.ReturnType = returnType
	return &this
}

// NewReturnDTOWithDefaults instantiates a new ReturnDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReturnDTOWithDefaults() *ReturnDTO {
	this := ReturnDTO{}
	return &this
}

// GetId returns the Id field value
func (o *ReturnDTO) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ReturnDTO) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ReturnDTO) SetId(v int64) {
	o.Id = v
}

// GetOrderId returns the OrderId field value
func (o *ReturnDTO) GetOrderId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *ReturnDTO) GetOrderIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *ReturnDTO) SetOrderId(v int64) {
	o.OrderId = v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *ReturnDTO) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnDTO) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *ReturnDTO) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *ReturnDTO) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetUpdateDate returns the UpdateDate field value if set, zero value otherwise.
func (o *ReturnDTO) GetUpdateDate() time.Time {
	if o == nil || IsNil(o.UpdateDate) {
		var ret time.Time
		return ret
	}
	return *o.UpdateDate
}

// GetUpdateDateOk returns a tuple with the UpdateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnDTO) GetUpdateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateDate) {
		return nil, false
	}
	return o.UpdateDate, true
}

// HasUpdateDate returns a boolean if a field has been set.
func (o *ReturnDTO) HasUpdateDate() bool {
	if o != nil && !IsNil(o.UpdateDate) {
		return true
	}

	return false
}

// SetUpdateDate gets a reference to the given time.Time and assigns it to the UpdateDate field.
func (o *ReturnDTO) SetUpdateDate(v time.Time) {
	o.UpdateDate = &v
}

// GetRefundStatus returns the RefundStatus field value if set, zero value otherwise.
func (o *ReturnDTO) GetRefundStatus() RefundStatusType {
	if o == nil || IsNil(o.RefundStatus) {
		var ret RefundStatusType
		return ret
	}
	return *o.RefundStatus
}

// GetRefundStatusOk returns a tuple with the RefundStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnDTO) GetRefundStatusOk() (*RefundStatusType, bool) {
	if o == nil || IsNil(o.RefundStatus) {
		return nil, false
	}
	return o.RefundStatus, true
}

// HasRefundStatus returns a boolean if a field has been set.
func (o *ReturnDTO) HasRefundStatus() bool {
	if o != nil && !IsNil(o.RefundStatus) {
		return true
	}

	return false
}

// SetRefundStatus gets a reference to the given RefundStatusType and assigns it to the RefundStatus field.
func (o *ReturnDTO) SetRefundStatus(v RefundStatusType) {
	o.RefundStatus = &v
}

// GetLogisticPickupPoint returns the LogisticPickupPoint field value if set, zero value otherwise.
func (o *ReturnDTO) GetLogisticPickupPoint() LogisticPickupPointDTO {
	if o == nil || IsNil(o.LogisticPickupPoint) {
		var ret LogisticPickupPointDTO
		return ret
	}
	return *o.LogisticPickupPoint
}

// GetLogisticPickupPointOk returns a tuple with the LogisticPickupPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnDTO) GetLogisticPickupPointOk() (*LogisticPickupPointDTO, bool) {
	if o == nil || IsNil(o.LogisticPickupPoint) {
		return nil, false
	}
	return o.LogisticPickupPoint, true
}

// HasLogisticPickupPoint returns a boolean if a field has been set.
func (o *ReturnDTO) HasLogisticPickupPoint() bool {
	if o != nil && !IsNil(o.LogisticPickupPoint) {
		return true
	}

	return false
}

// SetLogisticPickupPoint gets a reference to the given LogisticPickupPointDTO and assigns it to the LogisticPickupPoint field.
func (o *ReturnDTO) SetLogisticPickupPoint(v LogisticPickupPointDTO) {
	o.LogisticPickupPoint = &v
}

// GetShipmentRecipientType returns the ShipmentRecipientType field value if set, zero value otherwise.
func (o *ReturnDTO) GetShipmentRecipientType() RecipientType {
	if o == nil || IsNil(o.ShipmentRecipientType) {
		var ret RecipientType
		return ret
	}
	return *o.ShipmentRecipientType
}

// GetShipmentRecipientTypeOk returns a tuple with the ShipmentRecipientType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnDTO) GetShipmentRecipientTypeOk() (*RecipientType, bool) {
	if o == nil || IsNil(o.ShipmentRecipientType) {
		return nil, false
	}
	return o.ShipmentRecipientType, true
}

// HasShipmentRecipientType returns a boolean if a field has been set.
func (o *ReturnDTO) HasShipmentRecipientType() bool {
	if o != nil && !IsNil(o.ShipmentRecipientType) {
		return true
	}

	return false
}

// SetShipmentRecipientType gets a reference to the given RecipientType and assigns it to the ShipmentRecipientType field.
func (o *ReturnDTO) SetShipmentRecipientType(v RecipientType) {
	o.ShipmentRecipientType = &v
}

// GetShipmentStatus returns the ShipmentStatus field value if set, zero value otherwise.
func (o *ReturnDTO) GetShipmentStatus() ReturnShipmentStatusType {
	if o == nil || IsNil(o.ShipmentStatus) {
		var ret ReturnShipmentStatusType
		return ret
	}
	return *o.ShipmentStatus
}

// GetShipmentStatusOk returns a tuple with the ShipmentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnDTO) GetShipmentStatusOk() (*ReturnShipmentStatusType, bool) {
	if o == nil || IsNil(o.ShipmentStatus) {
		return nil, false
	}
	return o.ShipmentStatus, true
}

// HasShipmentStatus returns a boolean if a field has been set.
func (o *ReturnDTO) HasShipmentStatus() bool {
	if o != nil && !IsNil(o.ShipmentStatus) {
		return true
	}

	return false
}

// SetShipmentStatus gets a reference to the given ReturnShipmentStatusType and assigns it to the ShipmentStatus field.
func (o *ReturnDTO) SetShipmentStatus(v ReturnShipmentStatusType) {
	o.ShipmentStatus = &v
}

// GetRefundAmount returns the RefundAmount field value if set, zero value otherwise.
// Deprecated
func (o *ReturnDTO) GetRefundAmount() int64 {
	if o == nil || IsNil(o.RefundAmount) {
		var ret int64
		return ret
	}
	return *o.RefundAmount
}

// GetRefundAmountOk returns a tuple with the RefundAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ReturnDTO) GetRefundAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.RefundAmount) {
		return nil, false
	}
	return o.RefundAmount, true
}

// HasRefundAmount returns a boolean if a field has been set.
func (o *ReturnDTO) HasRefundAmount() bool {
	if o != nil && !IsNil(o.RefundAmount) {
		return true
	}

	return false
}

// SetRefundAmount gets a reference to the given int64 and assigns it to the RefundAmount field.
// Deprecated
func (o *ReturnDTO) SetRefundAmount(v int64) {
	o.RefundAmount = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ReturnDTO) GetAmount() CurrencyValueDTO {
	if o == nil || IsNil(o.Amount) {
		var ret CurrencyValueDTO
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnDTO) GetAmountOk() (*CurrencyValueDTO, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ReturnDTO) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given CurrencyValueDTO and assigns it to the Amount field.
func (o *ReturnDTO) SetAmount(v CurrencyValueDTO) {
	o.Amount = &v
}

// GetItems returns the Items field value
func (o *ReturnDTO) GetItems() []ReturnItemDTO {
	if o == nil {
		var ret []ReturnItemDTO
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ReturnDTO) GetItemsOk() ([]ReturnItemDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *ReturnDTO) SetItems(v []ReturnItemDTO) {
	o.Items = v
}

// GetReturnType returns the ReturnType field value
func (o *ReturnDTO) GetReturnType() ReturnType {
	if o == nil {
		var ret ReturnType
		return ret
	}

	return o.ReturnType
}

// GetReturnTypeOk returns a tuple with the ReturnType field value
// and a boolean to check if the value has been set.
func (o *ReturnDTO) GetReturnTypeOk() (*ReturnType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReturnType, true
}

// SetReturnType sets field value
func (o *ReturnDTO) SetReturnType(v ReturnType) {
	o.ReturnType = v
}

// GetFastReturn returns the FastReturn field value if set, zero value otherwise.
func (o *ReturnDTO) GetFastReturn() bool {
	if o == nil || IsNil(o.FastReturn) {
		var ret bool
		return ret
	}
	return *o.FastReturn
}

// GetFastReturnOk returns a tuple with the FastReturn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnDTO) GetFastReturnOk() (*bool, bool) {
	if o == nil || IsNil(o.FastReturn) {
		return nil, false
	}
	return o.FastReturn, true
}

// HasFastReturn returns a boolean if a field has been set.
func (o *ReturnDTO) HasFastReturn() bool {
	if o != nil && !IsNil(o.FastReturn) {
		return true
	}

	return false
}

// SetFastReturn gets a reference to the given bool and assigns it to the FastReturn field.
func (o *ReturnDTO) SetFastReturn(v bool) {
	o.FastReturn = &v
}

func (o ReturnDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReturnDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["orderId"] = o.OrderId
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !IsNil(o.UpdateDate) {
		toSerialize["updateDate"] = o.UpdateDate
	}
	if !IsNil(o.RefundStatus) {
		toSerialize["refundStatus"] = o.RefundStatus
	}
	if !IsNil(o.LogisticPickupPoint) {
		toSerialize["logisticPickupPoint"] = o.LogisticPickupPoint
	}
	if !IsNil(o.ShipmentRecipientType) {
		toSerialize["shipmentRecipientType"] = o.ShipmentRecipientType
	}
	if !IsNil(o.ShipmentStatus) {
		toSerialize["shipmentStatus"] = o.ShipmentStatus
	}
	if !IsNil(o.RefundAmount) {
		toSerialize["refundAmount"] = o.RefundAmount
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	toSerialize["items"] = o.Items
	toSerialize["returnType"] = o.ReturnType
	if !IsNil(o.FastReturn) {
		toSerialize["fastReturn"] = o.FastReturn
	}
	return toSerialize, nil
}

func (o *ReturnDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"orderId",
		"items",
		"returnType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReturnDTO := _ReturnDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReturnDTO)

	if err != nil {
		return err
	}

	*o = ReturnDTO(varReturnDTO)

	return err
}

type NullableReturnDTO struct {
	value *ReturnDTO
	isSet bool
}

func (v NullableReturnDTO) Get() *ReturnDTO {
	return v.value
}

func (v *NullableReturnDTO) Set(val *ReturnDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnDTO(val *ReturnDTO) *NullableReturnDTO {
	return &NullableReturnDTO{value: val, isSet: true}
}

func (v NullableReturnDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


