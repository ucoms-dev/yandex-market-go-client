/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateChatResultDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateChatResultDTO{}

// CreateChatResultDTO Информация о созданном чате.
type CreateChatResultDTO struct {
	// Идентификатор чата.
	ChatId int64 `json:"chatId"`
}

type _CreateChatResultDTO CreateChatResultDTO

// NewCreateChatResultDTO instantiates a new CreateChatResultDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateChatResultDTO(chatId int64) *CreateChatResultDTO {
	this := CreateChatResultDTO{}
	this.ChatId = chatId
	return &this
}

// NewCreateChatResultDTOWithDefaults instantiates a new CreateChatResultDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateChatResultDTOWithDefaults() *CreateChatResultDTO {
	this := CreateChatResultDTO{}
	return &this
}

// GetChatId returns the ChatId field value
func (o *CreateChatResultDTO) GetChatId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ChatId
}

// GetChatIdOk returns a tuple with the ChatId field value
// and a boolean to check if the value has been set.
func (o *CreateChatResultDTO) GetChatIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChatId, true
}

// SetChatId sets field value
func (o *CreateChatResultDTO) SetChatId(v int64) {
	o.ChatId = v
}

func (o CreateChatResultDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateChatResultDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chatId"] = o.ChatId
	return toSerialize, nil
}

func (o *CreateChatResultDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chatId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateChatResultDTO := _CreateChatResultDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateChatResultDTO)

	if err != nil {
		return err
	}

	*o = CreateChatResultDTO(varCreateChatResultDTO)

	return err
}

type NullableCreateChatResultDTO struct {
	value *CreateChatResultDTO
	isSet bool
}

func (v NullableCreateChatResultDTO) Get() *CreateChatResultDTO {
	return v.value
}

func (v *NullableCreateChatResultDTO) Set(val *CreateChatResultDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateChatResultDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateChatResultDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateChatResultDTO(val *CreateChatResultDTO) *NullableCreateChatResultDTO {
	return &NullableCreateChatResultDTO{value: val, isSet: true}
}

func (v NullableCreateChatResultDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateChatResultDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


