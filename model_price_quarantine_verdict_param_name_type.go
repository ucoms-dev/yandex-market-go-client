/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PriceQuarantineVerdictParamNameType Имя параметра причины скрытия товара по цене.  * `CURRENT_PRICE` — цена, из-за которой товар попал в карантин. * `LAST_VALID_PRICE` — последняя цена до попадания в карантин (только для карантина типа `PRICE_CHANGE`). * `MIN_PRICE` — порог попадания в карантин (только для карантина типов `LOW_PRICE` и `LOW_PRICE_PROMO`). * `CURRENCY` — валюта. 
type PriceQuarantineVerdictParamNameType string

// List of PriceQuarantineVerdictParamNameType
const (
	CURRENT_PRICE PriceQuarantineVerdictParamNameType = "CURRENT_PRICE"
	LAST_VALID_PRICE PriceQuarantineVerdictParamNameType = "LAST_VALID_PRICE"
	MIN_PRICE PriceQuarantineVerdictParamNameType = "MIN_PRICE"
	CURRENCY PriceQuarantineVerdictParamNameType = "CURRENCY"
)

// All allowed values of PriceQuarantineVerdictParamNameType enum
var AllowedPriceQuarantineVerdictParamNameTypeEnumValues = []PriceQuarantineVerdictParamNameType{
	"CURRENT_PRICE",
	"LAST_VALID_PRICE",
	"MIN_PRICE",
	"CURRENCY",
}

func (v *PriceQuarantineVerdictParamNameType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceQuarantineVerdictParamNameType(value)
	for _, existing := range AllowedPriceQuarantineVerdictParamNameTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceQuarantineVerdictParamNameType", value)
}

// NewPriceQuarantineVerdictParamNameTypeFromValue returns a pointer to a valid PriceQuarantineVerdictParamNameType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceQuarantineVerdictParamNameTypeFromValue(v string) (*PriceQuarantineVerdictParamNameType, error) {
	ev := PriceQuarantineVerdictParamNameType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceQuarantineVerdictParamNameType: valid values are %v", v, AllowedPriceQuarantineVerdictParamNameTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceQuarantineVerdictParamNameType) IsValid() bool {
	for _, existing := range AllowedPriceQuarantineVerdictParamNameTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PriceQuarantineVerdictParamNameType value
func (v PriceQuarantineVerdictParamNameType) Ptr() *PriceQuarantineVerdictParamNameType {
	return &v
}

type NullablePriceQuarantineVerdictParamNameType struct {
	value *PriceQuarantineVerdictParamNameType
	isSet bool
}

func (v NullablePriceQuarantineVerdictParamNameType) Get() *PriceQuarantineVerdictParamNameType {
	return v.value
}

func (v *NullablePriceQuarantineVerdictParamNameType) Set(val *PriceQuarantineVerdictParamNameType) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceQuarantineVerdictParamNameType) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceQuarantineVerdictParamNameType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceQuarantineVerdictParamNameType(val *PriceQuarantineVerdictParamNameType) *NullablePriceQuarantineVerdictParamNameType {
	return &NullablePriceQuarantineVerdictParamNameType{value: val, isSet: true}
}

func (v NullablePriceQuarantineVerdictParamNameType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceQuarantineVerdictParamNameType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

