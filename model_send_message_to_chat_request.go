/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SendMessageToChatRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendMessageToChatRequest{}

// SendMessageToChatRequest В какой чат нужно отправить сообщение и текст сообщения.
type SendMessageToChatRequest struct {
	// Текст сообщения.
	Message string `json:"message"`
}

type _SendMessageToChatRequest SendMessageToChatRequest

// NewSendMessageToChatRequest instantiates a new SendMessageToChatRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendMessageToChatRequest(message string) *SendMessageToChatRequest {
	this := SendMessageToChatRequest{}
	this.Message = message
	return &this
}

// NewSendMessageToChatRequestWithDefaults instantiates a new SendMessageToChatRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendMessageToChatRequestWithDefaults() *SendMessageToChatRequest {
	this := SendMessageToChatRequest{}
	return &this
}

// GetMessage returns the Message field value
func (o *SendMessageToChatRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SendMessageToChatRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SendMessageToChatRequest) SetMessage(v string) {
	o.Message = v
}

func (o SendMessageToChatRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendMessageToChatRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *SendMessageToChatRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendMessageToChatRequest := _SendMessageToChatRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendMessageToChatRequest)

	if err != nil {
		return err
	}

	*o = SendMessageToChatRequest(varSendMessageToChatRequest)

	return err
}

type NullableSendMessageToChatRequest struct {
	value *SendMessageToChatRequest
	isSet bool
}

func (v NullableSendMessageToChatRequest) Get() *SendMessageToChatRequest {
	return v.value
}

func (v *NullableSendMessageToChatRequest) Set(val *SendMessageToChatRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSendMessageToChatRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSendMessageToChatRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendMessageToChatRequest(val *SendMessageToChatRequest) *NullableSendMessageToChatRequest {
	return &NullableSendMessageToChatRequest{value: val, isSet: true}
}

func (v NullableSendMessageToChatRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendMessageToChatRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


