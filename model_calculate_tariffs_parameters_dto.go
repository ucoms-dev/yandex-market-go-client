/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CalculateTariffsParametersDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalculateTariffsParametersDTO{}

// CalculateTariffsParametersDTO Параметры для расчета стоимости услуг.
type CalculateTariffsParametersDTO struct {
	// Идентификатор кампании.  Его можно узнать с помощью запроса [GET campaigns](../../reference/campaigns/getCampaigns.md) или найти в кабинете продавца на Маркете — нажмите на название своего бизнеса и перейдите на страницу:    * **Модули и API** → блок **Передача данных Маркету**.   * **Лог запросов** → выпадающий список в блоке **Показывать логи**.  ⚠️ Не передавайте вместо него идентификатор магазина, который указан в кабинете продавца на Маркете рядом с названием магазина и в некоторых отчетах.  У пользователя, который выполняет запрос, должен быть доступ к этой кампании.  Используйте параметр `campaignId`, если уже завершили подключение магазина на Маркете. Иначе вернется пустой список.  Обязательный параметр, если не указан параметр `sellingProgram`. Совместное использование параметров приведет к ошибке.
	CampaignId     *int64                `json:"campaignId,omitempty"`
	SellingProgram *SellingProgramType   `json:"sellingProgram,omitempty"`
	Frequency      *PaymentFrequencyType `json:"frequency,omitempty"`
}

// NewCalculateTariffsParametersDTO instantiates a new CalculateTariffsParametersDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalculateTariffsParametersDTO() *CalculateTariffsParametersDTO {
	this := CalculateTariffsParametersDTO{}
	return &this
}

// NewCalculateTariffsParametersDTOWithDefaults instantiates a new CalculateTariffsParametersDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalculateTariffsParametersDTOWithDefaults() *CalculateTariffsParametersDTO {
	this := CalculateTariffsParametersDTO{}
	return &this
}

// GetCampaignId returns the CampaignId field value if set, zero value otherwise.
func (o *CalculateTariffsParametersDTO) GetCampaignId() int64 {
	if o == nil || IsNil(o.CampaignId) {
		var ret int64
		return ret
	}
	return *o.CampaignId
}

// GetCampaignIdOk returns a tuple with the CampaignId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculateTariffsParametersDTO) GetCampaignIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CampaignId) {
		return nil, false
	}
	return o.CampaignId, true
}

// HasCampaignId returns a boolean if a field has been set.
func (o *CalculateTariffsParametersDTO) HasCampaignId() bool {
	if o != nil && !IsNil(o.CampaignId) {
		return true
	}

	return false
}

// SetCampaignId gets a reference to the given int64 and assigns it to the CampaignId field.
func (o *CalculateTariffsParametersDTO) SetCampaignId(v int64) {
	o.CampaignId = &v
}

// GetSellingProgram returns the SellingProgram field value if set, zero value otherwise.
func (o *CalculateTariffsParametersDTO) GetSellingProgram() SellingProgramType {
	if o == nil || IsNil(o.SellingProgram) {
		var ret SellingProgramType
		return ret
	}
	return *o.SellingProgram
}

// GetSellingProgramOk returns a tuple with the SellingProgram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculateTariffsParametersDTO) GetSellingProgramOk() (*SellingProgramType, bool) {
	if o == nil || IsNil(o.SellingProgram) {
		return nil, false
	}
	return o.SellingProgram, true
}

// HasSellingProgram returns a boolean if a field has been set.
func (o *CalculateTariffsParametersDTO) HasSellingProgram() bool {
	if o != nil && !IsNil(o.SellingProgram) {
		return true
	}

	return false
}

// SetSellingProgram gets a reference to the given SellingProgramType and assigns it to the SellingProgram field.
func (o *CalculateTariffsParametersDTO) SetSellingProgram(v SellingProgramType) {
	o.SellingProgram = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *CalculateTariffsParametersDTO) GetFrequency() PaymentFrequencyType {
	if o == nil || IsNil(o.Frequency) {
		var ret PaymentFrequencyType
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculateTariffsParametersDTO) GetFrequencyOk() (*PaymentFrequencyType, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *CalculateTariffsParametersDTO) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given PaymentFrequencyType and assigns it to the Frequency field.
func (o *CalculateTariffsParametersDTO) SetFrequency(v PaymentFrequencyType) {
	o.Frequency = &v
}

func (o CalculateTariffsParametersDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalculateTariffsParametersDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CampaignId) {
		toSerialize["campaignId"] = o.CampaignId
	}
	if !IsNil(o.SellingProgram) {
		toSerialize["sellingProgram"] = o.SellingProgram
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	return toSerialize, nil
}

type NullableCalculateTariffsParametersDTO struct {
	value *CalculateTariffsParametersDTO
	isSet bool
}

func (v NullableCalculateTariffsParametersDTO) Get() *CalculateTariffsParametersDTO {
	return v.value
}

func (v *NullableCalculateTariffsParametersDTO) Set(val *CalculateTariffsParametersDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculateTariffsParametersDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculateTariffsParametersDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculateTariffsParametersDTO(val *CalculateTariffsParametersDTO) *NullableCalculateTariffsParametersDTO {
	return &NullableCalculateTariffsParametersDTO{value: val, isSet: true}
}

func (v NullableCalculateTariffsParametersDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculateTariffsParametersDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
