/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UinStatusType Статус проверки УИНа:  * `FAILED` — не прошел проверку.  * `IN_PROGRESS` — в процессе проверки.  * `NOT_ON_VALIDATION` — УИН не отправлен на проверку или переданы не все УИНы в заказе.  * `OK` — проверка успешно пройдена.
type UinStatusType string

// List of UinStatusType
const (
	UinStatusType_OK                UinStatusType = "OK"
	UinStatusType_IN_PROGRESS       UinStatusType = "IN_PROGRESS"
	UinStatusType_FAILED            UinStatusType = "FAILED"
	UinStatusType_NOT_ON_VALIDATION UinStatusType = "NOT_ON_VALIDATION"
)

// All allowed values of UinStatusType enum
var AllowedUinStatusTypeEnumValues = []UinStatusType{
	"OK",
	"IN_PROGRESS",
	"FAILED",
	"NOT_ON_VALIDATION",
}

func (v *UinStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UinStatusType(value)
	for _, existing := range AllowedUinStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UinStatusType", value)
}

// NewUinStatusTypeFromValue returns a pointer to a valid UinStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUinStatusTypeFromValue(v string) (*UinStatusType, error) {
	ev := UinStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UinStatusType: valid values are %v", v, AllowedUinStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UinStatusType) IsValid() bool {
	for _, existing := range AllowedUinStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UinStatusType value
func (v UinStatusType) Ptr() *UinStatusType {
	return &v
}

type NullableUinStatusType struct {
	value *UinStatusType
	isSet bool
}

func (v NullableUinStatusType) Get() *UinStatusType {
	return v.value
}

func (v *NullableUinStatusType) Set(val *UinStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableUinStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableUinStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUinStatusType(val *UinStatusType) *NullableUinStatusType {
	return &NullableUinStatusType{value: val, isSet: true}
}

func (v NullableUinStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUinStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
