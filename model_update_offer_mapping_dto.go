/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateOfferMappingDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateOfferMappingDTO{}

// UpdateOfferMappingDTO Информация о товаре.
type UpdateOfferMappingDTO struct {
	Offer UpdateOfferDTO `json:"offer"`
	Mapping *UpdateMappingDTO `json:"mapping,omitempty"`
}

type _UpdateOfferMappingDTO UpdateOfferMappingDTO

// NewUpdateOfferMappingDTO instantiates a new UpdateOfferMappingDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateOfferMappingDTO(offer UpdateOfferDTO) *UpdateOfferMappingDTO {
	this := UpdateOfferMappingDTO{}
	this.Offer = offer
	return &this
}

// NewUpdateOfferMappingDTOWithDefaults instantiates a new UpdateOfferMappingDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateOfferMappingDTOWithDefaults() *UpdateOfferMappingDTO {
	this := UpdateOfferMappingDTO{}
	return &this
}

// GetOffer returns the Offer field value
func (o *UpdateOfferMappingDTO) GetOffer() UpdateOfferDTO {
	if o == nil {
		var ret UpdateOfferDTO
		return ret
	}

	return o.Offer
}

// GetOfferOk returns a tuple with the Offer field value
// and a boolean to check if the value has been set.
func (o *UpdateOfferMappingDTO) GetOfferOk() (*UpdateOfferDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offer, true
}

// SetOffer sets field value
func (o *UpdateOfferMappingDTO) SetOffer(v UpdateOfferDTO) {
	o.Offer = v
}

// GetMapping returns the Mapping field value if set, zero value otherwise.
func (o *UpdateOfferMappingDTO) GetMapping() UpdateMappingDTO {
	if o == nil || IsNil(o.Mapping) {
		var ret UpdateMappingDTO
		return ret
	}
	return *o.Mapping
}

// GetMappingOk returns a tuple with the Mapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferMappingDTO) GetMappingOk() (*UpdateMappingDTO, bool) {
	if o == nil || IsNil(o.Mapping) {
		return nil, false
	}
	return o.Mapping, true
}

// HasMapping returns a boolean if a field has been set.
func (o *UpdateOfferMappingDTO) HasMapping() bool {
	if o != nil && !IsNil(o.Mapping) {
		return true
	}

	return false
}

// SetMapping gets a reference to the given UpdateMappingDTO and assigns it to the Mapping field.
func (o *UpdateOfferMappingDTO) SetMapping(v UpdateMappingDTO) {
	o.Mapping = &v
}

func (o UpdateOfferMappingDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateOfferMappingDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["offer"] = o.Offer
	if !IsNil(o.Mapping) {
		toSerialize["mapping"] = o.Mapping
	}
	return toSerialize, nil
}

func (o *UpdateOfferMappingDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"offer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateOfferMappingDTO := _UpdateOfferMappingDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateOfferMappingDTO)

	if err != nil {
		return err
	}

	*o = UpdateOfferMappingDTO(varUpdateOfferMappingDTO)

	return err
}

type NullableUpdateOfferMappingDTO struct {
	value *UpdateOfferMappingDTO
	isSet bool
}

func (v NullableUpdateOfferMappingDTO) Get() *UpdateOfferMappingDTO {
	return v.value
}

func (v *NullableUpdateOfferMappingDTO) Set(val *UpdateOfferMappingDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateOfferMappingDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateOfferMappingDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateOfferMappingDTO(val *UpdateOfferMappingDTO) *NullableUpdateOfferMappingDTO {
	return &NullableUpdateOfferMappingDTO{value: val, isSet: true}
}

func (v NullableUpdateOfferMappingDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateOfferMappingDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


