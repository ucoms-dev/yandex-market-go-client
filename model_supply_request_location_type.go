/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SupplyRequestLocationType Тип склада или ПВЗ:  * `FULFILLMENT` — склад хранения. * `XDOC` — транзитный склад. * `PICKUP_POINT` — ПВЗ. 
type SupplyRequestLocationType string

// List of SupplyRequestLocationType
const (
	FULFILLMENT SupplyRequestLocationType = "FULFILLMENT"
	XDOC SupplyRequestLocationType = "XDOC"
	PICKUP_POINT SupplyRequestLocationType = "PICKUP_POINT"
)

// All allowed values of SupplyRequestLocationType enum
var AllowedSupplyRequestLocationTypeEnumValues = []SupplyRequestLocationType{
	"FULFILLMENT",
	"XDOC",
	"PICKUP_POINT",
}

func (v *SupplyRequestLocationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SupplyRequestLocationType(value)
	for _, existing := range AllowedSupplyRequestLocationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SupplyRequestLocationType", value)
}

// NewSupplyRequestLocationTypeFromValue returns a pointer to a valid SupplyRequestLocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSupplyRequestLocationTypeFromValue(v string) (*SupplyRequestLocationType, error) {
	ev := SupplyRequestLocationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SupplyRequestLocationType: valid values are %v", v, AllowedSupplyRequestLocationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SupplyRequestLocationType) IsValid() bool {
	for _, existing := range AllowedSupplyRequestLocationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SupplyRequestLocationType value
func (v SupplyRequestLocationType) Ptr() *SupplyRequestLocationType {
	return &v
}

type NullableSupplyRequestLocationType struct {
	value *SupplyRequestLocationType
	isSet bool
}

func (v NullableSupplyRequestLocationType) Get() *SupplyRequestLocationType {
	return v.value
}

func (v *NullableSupplyRequestLocationType) Set(val *SupplyRequestLocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyRequestLocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyRequestLocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyRequestLocationType(val *SupplyRequestLocationType) *NullableSupplyRequestLocationType {
	return &NullableSupplyRequestLocationType{value: val, isSet: true}
}

func (v NullableSupplyRequestLocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyRequestLocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

