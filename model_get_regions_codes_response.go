/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetRegionsCodesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRegionsCodesResponse{}

// GetRegionsCodesResponse struct for GetRegionsCodesResponse
type GetRegionsCodesResponse struct {
	// Список стран с их кодами в формате ISO 3166-1 alpha-2.
	Countries []CountryDTO `json:"countries"`
}

type _GetRegionsCodesResponse GetRegionsCodesResponse

// NewGetRegionsCodesResponse instantiates a new GetRegionsCodesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRegionsCodesResponse(countries []CountryDTO) *GetRegionsCodesResponse {
	this := GetRegionsCodesResponse{}
	this.Countries = countries
	return &this
}

// NewGetRegionsCodesResponseWithDefaults instantiates a new GetRegionsCodesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRegionsCodesResponseWithDefaults() *GetRegionsCodesResponse {
	this := GetRegionsCodesResponse{}
	return &this
}

// GetCountries returns the Countries field value
func (o *GetRegionsCodesResponse) GetCountries() []CountryDTO {
	if o == nil {
		var ret []CountryDTO
		return ret
	}

	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value
// and a boolean to check if the value has been set.
func (o *GetRegionsCodesResponse) GetCountriesOk() ([]CountryDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Countries, true
}

// SetCountries sets field value
func (o *GetRegionsCodesResponse) SetCountries(v []CountryDTO) {
	o.Countries = v
}

func (o GetRegionsCodesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRegionsCodesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["countries"] = o.Countries
	return toSerialize, nil
}

func (o *GetRegionsCodesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"countries",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRegionsCodesResponse := _GetRegionsCodesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRegionsCodesResponse)

	if err != nil {
		return err
	}

	*o = GetRegionsCodesResponse(varGetRegionsCodesResponse)

	return err
}

type NullableGetRegionsCodesResponse struct {
	value *GetRegionsCodesResponse
	isSet bool
}

func (v NullableGetRegionsCodesResponse) Get() *GetRegionsCodesResponse {
	return v.value
}

func (v *NullableGetRegionsCodesResponse) Set(val *GetRegionsCodesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRegionsCodesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRegionsCodesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRegionsCodesResponse(val *GetRegionsCodesResponse) *NullableGetRegionsCodesResponse {
	return &NullableGetRegionsCodesResponse{value: val, isSet: true}
}

func (v NullableGetRegionsCodesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRegionsCodesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
