/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WarehouseAddressDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WarehouseAddressDTO{}

// WarehouseAddressDTO Адрес склада.
type WarehouseAddressDTO struct {
	// Город.
	City string `json:"city"`
	// Улица.
	Street *string `json:"street,omitempty"`
	// Номер дома.
	Number *string `json:"number,omitempty"`
	// Номер строения.
	Building *string `json:"building,omitempty"`
	// Номер корпуса.
	Block *string `json:"block,omitempty"`
	Gps GpsDTO `json:"gps"`
}

type _WarehouseAddressDTO WarehouseAddressDTO

// NewWarehouseAddressDTO instantiates a new WarehouseAddressDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWarehouseAddressDTO(city string, gps GpsDTO) *WarehouseAddressDTO {
	this := WarehouseAddressDTO{}
	this.City = city
	this.Gps = gps
	return &this
}

// NewWarehouseAddressDTOWithDefaults instantiates a new WarehouseAddressDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWarehouseAddressDTOWithDefaults() *WarehouseAddressDTO {
	this := WarehouseAddressDTO{}
	return &this
}

// GetCity returns the City field value
func (o *WarehouseAddressDTO) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *WarehouseAddressDTO) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *WarehouseAddressDTO) SetCity(v string) {
	o.City = v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *WarehouseAddressDTO) GetStreet() string {
	if o == nil || IsNil(o.Street) {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseAddressDTO) GetStreetOk() (*string, bool) {
	if o == nil || IsNil(o.Street) {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *WarehouseAddressDTO) HasStreet() bool {
	if o != nil && !IsNil(o.Street) {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *WarehouseAddressDTO) SetStreet(v string) {
	o.Street = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *WarehouseAddressDTO) GetNumber() string {
	if o == nil || IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseAddressDTO) GetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *WarehouseAddressDTO) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *WarehouseAddressDTO) SetNumber(v string) {
	o.Number = &v
}

// GetBuilding returns the Building field value if set, zero value otherwise.
func (o *WarehouseAddressDTO) GetBuilding() string {
	if o == nil || IsNil(o.Building) {
		var ret string
		return ret
	}
	return *o.Building
}

// GetBuildingOk returns a tuple with the Building field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseAddressDTO) GetBuildingOk() (*string, bool) {
	if o == nil || IsNil(o.Building) {
		return nil, false
	}
	return o.Building, true
}

// HasBuilding returns a boolean if a field has been set.
func (o *WarehouseAddressDTO) HasBuilding() bool {
	if o != nil && !IsNil(o.Building) {
		return true
	}

	return false
}

// SetBuilding gets a reference to the given string and assigns it to the Building field.
func (o *WarehouseAddressDTO) SetBuilding(v string) {
	o.Building = &v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *WarehouseAddressDTO) GetBlock() string {
	if o == nil || IsNil(o.Block) {
		var ret string
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseAddressDTO) GetBlockOk() (*string, bool) {
	if o == nil || IsNil(o.Block) {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *WarehouseAddressDTO) HasBlock() bool {
	if o != nil && !IsNil(o.Block) {
		return true
	}

	return false
}

// SetBlock gets a reference to the given string and assigns it to the Block field.
func (o *WarehouseAddressDTO) SetBlock(v string) {
	o.Block = &v
}

// GetGps returns the Gps field value
func (o *WarehouseAddressDTO) GetGps() GpsDTO {
	if o == nil {
		var ret GpsDTO
		return ret
	}

	return o.Gps
}

// GetGpsOk returns a tuple with the Gps field value
// and a boolean to check if the value has been set.
func (o *WarehouseAddressDTO) GetGpsOk() (*GpsDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gps, true
}

// SetGps sets field value
func (o *WarehouseAddressDTO) SetGps(v GpsDTO) {
	o.Gps = v
}

func (o WarehouseAddressDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WarehouseAddressDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["city"] = o.City
	if !IsNil(o.Street) {
		toSerialize["street"] = o.Street
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.Building) {
		toSerialize["building"] = o.Building
	}
	if !IsNil(o.Block) {
		toSerialize["block"] = o.Block
	}
	toSerialize["gps"] = o.Gps
	return toSerialize, nil
}

func (o *WarehouseAddressDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"city",
		"gps",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWarehouseAddressDTO := _WarehouseAddressDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWarehouseAddressDTO)

	if err != nil {
		return err
	}

	*o = WarehouseAddressDTO(varWarehouseAddressDTO)

	return err
}

type NullableWarehouseAddressDTO struct {
	value *WarehouseAddressDTO
	isSet bool
}

func (v NullableWarehouseAddressDTO) Get() *WarehouseAddressDTO {
	return v.value
}

func (v *NullableWarehouseAddressDTO) Set(val *WarehouseAddressDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableWarehouseAddressDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableWarehouseAddressDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarehouseAddressDTO(val *WarehouseAddressDTO) *NullableWarehouseAddressDTO {
	return &NullableWarehouseAddressDTO{value: val, isSet: true}
}

func (v NullableWarehouseAddressDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarehouseAddressDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


