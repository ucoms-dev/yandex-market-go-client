/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderTaxSystemType Система налогообложения (СНО) магазина на момент оформления заказа:  * `ECHN` — единый сельскохозяйственный налог (ЕСХН).  * `ENVD` — единый налог на вмененный доход (ЕНВД).  * `OSN` — общая система налогообложения (ОСН).  * `PSN` — патентная система налогообложения (ПСН).  * `USN` — упрощенная система налогообложения (УСН).  * `USN_MINUS_COST` — упрощенная система налогообложения, доходы, уменьшенные на величину расходов (УСН «Доходы минус расходы»).  * `NPD` — налог на профессиональный доход (НПД).  * `UNKNOWN_VALUE` — неизвестное значение. Используется только совместно с параметром `payment-method=YANDEX`. 
type OrderTaxSystemType string

// List of OrderTaxSystemType
const (
	OSN OrderTaxSystemType = "OSN"
	USN OrderTaxSystemType = "USN"
	USN_MINUS_COST OrderTaxSystemType = "USN_MINUS_COST"
	ENVD OrderTaxSystemType = "ENVD"
	ECHN OrderTaxSystemType = "ECHN"
	PSN OrderTaxSystemType = "PSN"
	NPD OrderTaxSystemType = "NPD"
	UNKNOWN_VALUE OrderTaxSystemType = "UNKNOWN_VALUE"
)

// All allowed values of OrderTaxSystemType enum
var AllowedOrderTaxSystemTypeEnumValues = []OrderTaxSystemType{
	"OSN",
	"USN",
	"USN_MINUS_COST",
	"ENVD",
	"ECHN",
	"PSN",
	"NPD",
	"UNKNOWN_VALUE",
}

func (v *OrderTaxSystemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderTaxSystemType(value)
	for _, existing := range AllowedOrderTaxSystemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderTaxSystemType", value)
}

// NewOrderTaxSystemTypeFromValue returns a pointer to a valid OrderTaxSystemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderTaxSystemTypeFromValue(v string) (*OrderTaxSystemType, error) {
	ev := OrderTaxSystemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderTaxSystemType: valid values are %v", v, AllowedOrderTaxSystemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderTaxSystemType) IsValid() bool {
	for _, existing := range AllowedOrderTaxSystemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderTaxSystemType value
func (v OrderTaxSystemType) Ptr() *OrderTaxSystemType {
	return &v
}

type NullableOrderTaxSystemType struct {
	value *OrderTaxSystemType
	isSet bool
}

func (v NullableOrderTaxSystemType) Get() *OrderTaxSystemType {
	return v.value
}

func (v *NullableOrderTaxSystemType) Set(val *OrderTaxSystemType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderTaxSystemType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderTaxSystemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderTaxSystemType(val *OrderTaxSystemType) *NullableOrderTaxSystemType {
	return &NullableOrderTaxSystemType{value: val, isSet: true}
}

func (v NullableOrderTaxSystemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderTaxSystemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

