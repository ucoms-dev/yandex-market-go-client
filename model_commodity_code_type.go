/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CommodityCodeType Тип товарного кода:  * `CUSTOMS_COMMODITY_CODE` — код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов. * `IKPU_CODE` — идентификационный код продукции и услуг (ИКПУ) в Узбекистане – 17 цифр без пробелов.  Не передавайте несколько кодов одного типа.
type CommodityCodeType string

// List of CommodityCodeType
const (
	CUSTOMS_COMMODITY_CODE CommodityCodeType = "CUSTOMS_COMMODITY_CODE"
	IKPU_CODE              CommodityCodeType = "IKPU_CODE"
)

// All allowed values of CommodityCodeType enum
var AllowedCommodityCodeTypeEnumValues = []CommodityCodeType{
	"CUSTOMS_COMMODITY_CODE",
	"IKPU_CODE",
}

func (v *CommodityCodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommodityCodeType(value)
	for _, existing := range AllowedCommodityCodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommodityCodeType", value)
}

// NewCommodityCodeTypeFromValue returns a pointer to a valid CommodityCodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommodityCodeTypeFromValue(v string) (*CommodityCodeType, error) {
	ev := CommodityCodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommodityCodeType: valid values are %v", v, AllowedCommodityCodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommodityCodeType) IsValid() bool {
	for _, existing := range AllowedCommodityCodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommodityCodeType value
func (v CommodityCodeType) Ptr() *CommodityCodeType {
	return &v
}

type NullableCommodityCodeType struct {
	value *CommodityCodeType
	isSet bool
}

func (v NullableCommodityCodeType) Get() *CommodityCodeType {
	return v.value
}

func (v *NullableCommodityCodeType) Set(val *CommodityCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommodityCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommodityCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommodityCodeType(val *CommodityCodeType) *NullableCommodityCodeType {
	return &NullableCommodityCodeType{value: val, isSet: true}
}

func (v NullableCommodityCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommodityCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
