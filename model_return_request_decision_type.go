/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReturnRequestDecisionType Решение по товару в возврате:  * `REFUND_MONEY` — вернуть деньги за товар. * `REFUND_MONEY_INCLUDING_SHIPMENT` — вернуть деньги за товар и обратную пересылку. * `REPAIR` — магазин устранит недостатки товара. * `REPLACE` — магазин заменит товар. * `SEND_TO_EXAMINATION` — магазин отправит товар на экспертизу. * `DECLINE_REFUND` — не возвращать деньги. * `OTHER_DECISION` — другое решение.
type ReturnRequestDecisionType string

// List of ReturnRequestDecisionType
const (
	ReturnRequestDecisionType_REFUND_MONEY                    ReturnRequestDecisionType = "REFUND_MONEY"
	ReturnRequestDecisionType_REFUND_MONEY_INCLUDING_SHIPMENT ReturnRequestDecisionType = "REFUND_MONEY_INCLUDING_SHIPMENT"
	ReturnRequestDecisionType_REPAIR                          ReturnRequestDecisionType = "REPAIR"
	ReturnRequestDecisionType_REPLACE                         ReturnRequestDecisionType = "REPLACE"
	ReturnRequestDecisionType_SEND_TO_EXAMINATION             ReturnRequestDecisionType = "SEND_TO_EXAMINATION"
	ReturnRequestDecisionType_DECLINE_REFUND                  ReturnRequestDecisionType = "DECLINE_REFUND"
	ReturnRequestDecisionType_OTHER_DECISION                  ReturnRequestDecisionType = "OTHER_DECISION"
)

// All allowed values of ReturnRequestDecisionType enum
var AllowedReturnRequestDecisionTypeEnumValues = []ReturnRequestDecisionType{
	"REFUND_MONEY",
	"REFUND_MONEY_INCLUDING_SHIPMENT",
	"REPAIR",
	"REPLACE",
	"SEND_TO_EXAMINATION",
	"DECLINE_REFUND",
	"OTHER_DECISION",
}

func (v *ReturnRequestDecisionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReturnRequestDecisionType(value)
	for _, existing := range AllowedReturnRequestDecisionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReturnRequestDecisionType", value)
}

// NewReturnRequestDecisionTypeFromValue returns a pointer to a valid ReturnRequestDecisionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReturnRequestDecisionTypeFromValue(v string) (*ReturnRequestDecisionType, error) {
	ev := ReturnRequestDecisionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReturnRequestDecisionType: valid values are %v", v, AllowedReturnRequestDecisionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReturnRequestDecisionType) IsValid() bool {
	for _, existing := range AllowedReturnRequestDecisionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReturnRequestDecisionType value
func (v ReturnRequestDecisionType) Ptr() *ReturnRequestDecisionType {
	return &v
}

type NullableReturnRequestDecisionType struct {
	value *ReturnRequestDecisionType
	isSet bool
}

func (v NullableReturnRequestDecisionType) Get() *ReturnRequestDecisionType {
	return v.value
}

func (v *NullableReturnRequestDecisionType) Set(val *ReturnRequestDecisionType) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnRequestDecisionType) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnRequestDecisionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnRequestDecisionType(val *ReturnRequestDecisionType) *NullableReturnRequestDecisionType {
	return &NullableReturnRequestDecisionType{value: val, isSet: true}
}

func (v NullableReturnRequestDecisionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnRequestDecisionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
