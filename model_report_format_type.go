/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReportFormatType Формат отчета:  * `FILE` — файл с электронной таблицей (XLSX). * `CSV` — ZIP-архив с CSV-файлами на каждый лист отчета. * `JSON` — ZIP-архив с JSON-файлами на каждый лист отчета. 
type ReportFormatType string

// List of ReportFormatType
const (
	FILE ReportFormatType = "FILE"
	CSV ReportFormatType = "CSV"
	JSON ReportFormatType = "JSON"
)

// All allowed values of ReportFormatType enum
var AllowedReportFormatTypeEnumValues = []ReportFormatType{
	"FILE",
	"CSV",
	"JSON",
}

func (v *ReportFormatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReportFormatType(value)
	for _, existing := range AllowedReportFormatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReportFormatType", value)
}

// NewReportFormatTypeFromValue returns a pointer to a valid ReportFormatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportFormatTypeFromValue(v string) (*ReportFormatType, error) {
	ev := ReportFormatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReportFormatType: valid values are %v", v, AllowedReportFormatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportFormatType) IsValid() bool {
	for _, existing := range AllowedReportFormatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReportFormatType value
func (v ReportFormatType) Ptr() *ReportFormatType {
	return &v
}

type NullableReportFormatType struct {
	value *ReportFormatType
	isSet bool
}

func (v NullableReportFormatType) Get() *ReportFormatType {
	return v.value
}

func (v *NullableReportFormatType) Set(val *ReportFormatType) {
	v.value = val
	v.isSet = true
}

func (v NullableReportFormatType) IsSet() bool {
	return v.isSet
}

func (v *NullableReportFormatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportFormatType(val *ReportFormatType) *NullableReportFormatType {
	return &NullableReportFormatType{value: val, isSet: true}
}

func (v NullableReportFormatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportFormatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

