/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderStatsStatusType Текущий статус заказа:  * `CANCELLED_BEFORE_PROCESSING` — заказ отменен до начала его обработки.  * `CANCELLED_IN_DELIVERY` — заказ отменен во время его доставки.  * `CANCELLED_IN_PROCESSING` — заказ отменен во время его обработки.  * `DELIVERY` — заказ передан службе доставки.  * `DELIVERED` — заказ доставлен.  * `PARTIALLY_DELIVERED` — заказ частично доставлен.      {% note warning \"Статус заказа может перейти в `PARTIALLY_DELIVERED` не сразу\" %}      Если в доставленном заказе был невыкуп, статус изменится только после получения заказа на складе Маркета.      {% endnote %}  * `PARTIALLY_RETURNED` — заказ частично возвращен покупателем.  * `PENDING` — заказ ожидает подтверждения.  * `PICKUP` — заказ доставлен в пункт выдачи.  * `PROCESSING` — заказ в обработке.  * `RESERVED` — товар зарезервирован на складе.  * `RETURNED` — заказ полностью возвращен покупателем.  * `UNKNOWN` — неизвестный статус заказа.  * `UNPAID` — заказ от юридического лица ожидает оплаты.  * `LOST` — заказ утерян. 
type OrderStatsStatusType string

// List of OrderStatsStatusType
const (
	CANCELLED_BEFORE_PROCESSING OrderStatsStatusType = "CANCELLED_BEFORE_PROCESSING"
	CANCELLED_IN_DELIVERY OrderStatsStatusType = "CANCELLED_IN_DELIVERY"
	CANCELLED_IN_PROCESSING OrderStatsStatusType = "CANCELLED_IN_PROCESSING"
	DELIVERY OrderStatsStatusType = "DELIVERY"
	DELIVERED OrderStatsStatusType = "DELIVERED"
	PARTIALLY_DELIVERED OrderStatsStatusType = "PARTIALLY_DELIVERED"
	PARTIALLY_RETURNED OrderStatsStatusType = "PARTIALLY_RETURNED"
	PENDING OrderStatsStatusType = "PENDING"
	PICKUP OrderStatsStatusType = "PICKUP"
	PROCESSING OrderStatsStatusType = "PROCESSING"
	RESERVED OrderStatsStatusType = "RESERVED"
	RETURNED OrderStatsStatusType = "RETURNED"
	UNKNOWN OrderStatsStatusType = "UNKNOWN"
	UNPAID OrderStatsStatusType = "UNPAID"
	LOST OrderStatsStatusType = "LOST"
)

// All allowed values of OrderStatsStatusType enum
var AllowedOrderStatsStatusTypeEnumValues = []OrderStatsStatusType{
	"CANCELLED_BEFORE_PROCESSING",
	"CANCELLED_IN_DELIVERY",
	"CANCELLED_IN_PROCESSING",
	"DELIVERY",
	"DELIVERED",
	"PARTIALLY_DELIVERED",
	"PARTIALLY_RETURNED",
	"PENDING",
	"PICKUP",
	"PROCESSING",
	"RESERVED",
	"RETURNED",
	"UNKNOWN",
	"UNPAID",
	"LOST",
}

func (v *OrderStatsStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderStatsStatusType(value)
	for _, existing := range AllowedOrderStatsStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderStatsStatusType", value)
}

// NewOrderStatsStatusTypeFromValue returns a pointer to a valid OrderStatsStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderStatsStatusTypeFromValue(v string) (*OrderStatsStatusType, error) {
	ev := OrderStatsStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderStatsStatusType: valid values are %v", v, AllowedOrderStatsStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderStatsStatusType) IsValid() bool {
	for _, existing := range AllowedOrderStatsStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderStatsStatusType value
func (v OrderStatsStatusType) Ptr() *OrderStatsStatusType {
	return &v
}

type NullableOrderStatsStatusType struct {
	value *OrderStatsStatusType
	isSet bool
}

func (v NullableOrderStatsStatusType) Get() *OrderStatsStatusType {
	return v.value
}

func (v *NullableOrderStatsStatusType) Set(val *OrderStatsStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderStatsStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderStatsStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderStatsStatusType(val *OrderStatsStatusType) *NullableOrderStatsStatusType {
	return &NullableOrderStatsStatusType{value: val, isSet: true}
}

func (v NullableOrderStatsStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderStatsStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

