/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GoodsFeedbackCommentStatusType Статус комментария:  * `PUBLISHED` — опубликован. * `UNMODERATED` — не проверен. * `BANNED` — заблокирован. * `DELETED` — удален. 
type GoodsFeedbackCommentStatusType string

// List of GoodsFeedbackCommentStatusType
const (
	PUBLISHED GoodsFeedbackCommentStatusType = "PUBLISHED"
	UNMODERATED GoodsFeedbackCommentStatusType = "UNMODERATED"
	BANNED GoodsFeedbackCommentStatusType = "BANNED"
	DELETED GoodsFeedbackCommentStatusType = "DELETED"
)

// All allowed values of GoodsFeedbackCommentStatusType enum
var AllowedGoodsFeedbackCommentStatusTypeEnumValues = []GoodsFeedbackCommentStatusType{
	"PUBLISHED",
	"UNMODERATED",
	"BANNED",
	"DELETED",
}

func (v *GoodsFeedbackCommentStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GoodsFeedbackCommentStatusType(value)
	for _, existing := range AllowedGoodsFeedbackCommentStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GoodsFeedbackCommentStatusType", value)
}

// NewGoodsFeedbackCommentStatusTypeFromValue returns a pointer to a valid GoodsFeedbackCommentStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGoodsFeedbackCommentStatusTypeFromValue(v string) (*GoodsFeedbackCommentStatusType, error) {
	ev := GoodsFeedbackCommentStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GoodsFeedbackCommentStatusType: valid values are %v", v, AllowedGoodsFeedbackCommentStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GoodsFeedbackCommentStatusType) IsValid() bool {
	for _, existing := range AllowedGoodsFeedbackCommentStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GoodsFeedbackCommentStatusType value
func (v GoodsFeedbackCommentStatusType) Ptr() *GoodsFeedbackCommentStatusType {
	return &v
}

type NullableGoodsFeedbackCommentStatusType struct {
	value *GoodsFeedbackCommentStatusType
	isSet bool
}

func (v NullableGoodsFeedbackCommentStatusType) Get() *GoodsFeedbackCommentStatusType {
	return v.value
}

func (v *NullableGoodsFeedbackCommentStatusType) Set(val *GoodsFeedbackCommentStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableGoodsFeedbackCommentStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableGoodsFeedbackCommentStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoodsFeedbackCommentStatusType(val *GoodsFeedbackCommentStatusType) *NullableGoodsFeedbackCommentStatusType {
	return &NullableGoodsFeedbackCommentStatusType{value: val, isSet: true}
}

func (v NullableGoodsFeedbackCommentStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoodsFeedbackCommentStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

