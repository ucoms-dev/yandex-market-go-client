/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrdersStatsPriceType Тип скидки или цена на товар: - `BUYER` — цена на товар с учетом скидок, в том числе купонов. - `CASHBACK` — баллы Плюса. - `MARKETPLACE` — купоны. 
type OrdersStatsPriceType string

// List of OrdersStatsPriceType
const (
	BUYER OrdersStatsPriceType = "BUYER"
	CASHBACK OrdersStatsPriceType = "CASHBACK"
	MARKETPLACE OrdersStatsPriceType = "MARKETPLACE"
)

// All allowed values of OrdersStatsPriceType enum
var AllowedOrdersStatsPriceTypeEnumValues = []OrdersStatsPriceType{
	"BUYER",
	"CASHBACK",
	"MARKETPLACE",
}

func (v *OrdersStatsPriceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrdersStatsPriceType(value)
	for _, existing := range AllowedOrdersStatsPriceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrdersStatsPriceType", value)
}

// NewOrdersStatsPriceTypeFromValue returns a pointer to a valid OrdersStatsPriceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersStatsPriceTypeFromValue(v string) (*OrdersStatsPriceType, error) {
	ev := OrdersStatsPriceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrdersStatsPriceType: valid values are %v", v, AllowedOrdersStatsPriceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersStatsPriceType) IsValid() bool {
	for _, existing := range AllowedOrdersStatsPriceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrdersStatsPriceType value
func (v OrdersStatsPriceType) Ptr() *OrdersStatsPriceType {
	return &v
}

type NullableOrdersStatsPriceType struct {
	value *OrdersStatsPriceType
	isSet bool
}

func (v NullableOrdersStatsPriceType) Get() *OrdersStatsPriceType {
	return v.value
}

func (v *NullableOrdersStatsPriceType) Set(val *OrdersStatsPriceType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersStatsPriceType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersStatsPriceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersStatsPriceType(val *OrdersStatsPriceType) *NullableOrdersStatsPriceType {
	return &NullableOrdersStatsPriceType{value: val, isSet: true}
}

func (v NullableOrdersStatsPriceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersStatsPriceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

