/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OfferParamDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferParamDTO{}

// OfferParamDTO Параметры товара.  Если у товара несколько значений одного параметра, передайте их с одним и тем же `name`, но разными `value`.  {% cut \"Пример\" %}  ```json translate=no \"params\": [   {     \"name\": \"Цвет для фильтра\",     \"value\": \"Зеленый\"   },   {     \"name\": \"Цвет для фильтра\",     \"value\": \"Желтый\"   } ] ```  {% endcut %}
type OfferParamDTO struct {
	// Название характеристики.  Должно совпадать с названием характеристики на Маркете. Узнать его можно из Excel-шаблона категории или через запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).
	Name string `json:"name"`
	// Значение.
	Value string `json:"value"`
}

type _OfferParamDTO OfferParamDTO

// NewOfferParamDTO instantiates a new OfferParamDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferParamDTO(name string, value string) *OfferParamDTO {
	this := OfferParamDTO{}
	this.Name = name
	this.Value = value
	return &this
}

// NewOfferParamDTOWithDefaults instantiates a new OfferParamDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferParamDTOWithDefaults() *OfferParamDTO {
	this := OfferParamDTO{}
	return &this
}

// GetName returns the Name field value
func (o *OfferParamDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OfferParamDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OfferParamDTO) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *OfferParamDTO) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *OfferParamDTO) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *OfferParamDTO) SetValue(v string) {
	o.Value = v
}

func (o OfferParamDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferParamDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *OfferParamDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOfferParamDTO := _OfferParamDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varOfferParamDTO)

	if err != nil {
		return err
	}

	*o = OfferParamDTO(varOfferParamDTO)

	return err
}

type NullableOfferParamDTO struct {
	value *OfferParamDTO
	isSet bool
}

func (v NullableOfferParamDTO) Get() *OfferParamDTO {
	return v.value
}

func (v *NullableOfferParamDTO) Set(val *OfferParamDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferParamDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferParamDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferParamDTO(val *OfferParamDTO) *NullableOfferParamDTO {
	return &NullableOfferParamDTO{value: val, isSet: true}
}

func (v NullableOfferParamDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferParamDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
