/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateWarehouseStatusRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWarehouseStatusRequest{}

// UpdateWarehouseStatusRequest Запрос на изменение статуса склада партнером.  Позволяет выключить склад или включить ранее отключенный вами склад.  Если склад был отключен Маркетом, то включить его вручную с помощью этого метода не получится.
type UpdateWarehouseStatusRequest struct {
	// Статус склада:  * `true` — включен. * `false` — отключен.
	Enabled bool `json:"enabled"`
}

type _UpdateWarehouseStatusRequest UpdateWarehouseStatusRequest

// NewUpdateWarehouseStatusRequest instantiates a new UpdateWarehouseStatusRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWarehouseStatusRequest(enabled bool) *UpdateWarehouseStatusRequest {
	this := UpdateWarehouseStatusRequest{}
	this.Enabled = enabled
	return &this
}

// NewUpdateWarehouseStatusRequestWithDefaults instantiates a new UpdateWarehouseStatusRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWarehouseStatusRequestWithDefaults() *UpdateWarehouseStatusRequest {
	this := UpdateWarehouseStatusRequest{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *UpdateWarehouseStatusRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *UpdateWarehouseStatusRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *UpdateWarehouseStatusRequest) SetEnabled(v bool) {
	o.Enabled = v
}

func (o UpdateWarehouseStatusRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWarehouseStatusRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

func (o *UpdateWarehouseStatusRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateWarehouseStatusRequest := _UpdateWarehouseStatusRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varUpdateWarehouseStatusRequest)

	if err != nil {
		return err
	}

	*o = UpdateWarehouseStatusRequest(varUpdateWarehouseStatusRequest)

	return err
}

type NullableUpdateWarehouseStatusRequest struct {
	value *UpdateWarehouseStatusRequest
	isSet bool
}

func (v NullableUpdateWarehouseStatusRequest) Get() *UpdateWarehouseStatusRequest {
	return v.value
}

func (v *NullableUpdateWarehouseStatusRequest) Set(val *UpdateWarehouseStatusRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWarehouseStatusRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWarehouseStatusRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWarehouseStatusRequest(val *UpdateWarehouseStatusRequest) *NullableUpdateWarehouseStatusRequest {
	return &NullableUpdateWarehouseStatusRequest{value: val, isSet: true}
}

func (v NullableUpdateWarehouseStatusRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWarehouseStatusRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
