/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FeedbackReactionStatusType Статус реакции на отзыв:  * `ALL` — все отзывы.  * `NEED_REACTION` — отзывы, на которые нужно ответить. 
type FeedbackReactionStatusType string

// List of FeedbackReactionStatusType
const (
	ALL FeedbackReactionStatusType = "ALL"
	NEED_REACTION FeedbackReactionStatusType = "NEED_REACTION"
)

// All allowed values of FeedbackReactionStatusType enum
var AllowedFeedbackReactionStatusTypeEnumValues = []FeedbackReactionStatusType{
	"ALL",
	"NEED_REACTION",
}

func (v *FeedbackReactionStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeedbackReactionStatusType(value)
	for _, existing := range AllowedFeedbackReactionStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeedbackReactionStatusType", value)
}

// NewFeedbackReactionStatusTypeFromValue returns a pointer to a valid FeedbackReactionStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeedbackReactionStatusTypeFromValue(v string) (*FeedbackReactionStatusType, error) {
	ev := FeedbackReactionStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeedbackReactionStatusType: valid values are %v", v, AllowedFeedbackReactionStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeedbackReactionStatusType) IsValid() bool {
	for _, existing := range AllowedFeedbackReactionStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeedbackReactionStatusType value
func (v FeedbackReactionStatusType) Ptr() *FeedbackReactionStatusType {
	return &v
}

type NullableFeedbackReactionStatusType struct {
	value *FeedbackReactionStatusType
	isSet bool
}

func (v NullableFeedbackReactionStatusType) Get() *FeedbackReactionStatusType {
	return v.value
}

func (v *NullableFeedbackReactionStatusType) Set(val *FeedbackReactionStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackReactionStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackReactionStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackReactionStatusType(val *FeedbackReactionStatusType) *NullableFeedbackReactionStatusType {
	return &NullableFeedbackReactionStatusType{value: val, isSet: true}
}

func (v NullableFeedbackReactionStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackReactionStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

