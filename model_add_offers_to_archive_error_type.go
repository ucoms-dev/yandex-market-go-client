/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddOffersToArchiveErrorType Причина, по которой товар не удалось поместить в архив:  * `OFFER_HAS_STOCKS` — товар хранится на складе Маркета.  * `UNKNOWN` — неизвестная причина ошибки. Скорее всего произошел сбой на стороне Маркета. Если ошибка повторяется долгое время, обратитесь в поддержку. 
type AddOffersToArchiveErrorType string

// List of AddOffersToArchiveErrorType
const (
	OFFER_HAS_STOCKS AddOffersToArchiveErrorType = "OFFER_HAS_STOCKS"
	UNKNOWN AddOffersToArchiveErrorType = "UNKNOWN"
)

// All allowed values of AddOffersToArchiveErrorType enum
var AllowedAddOffersToArchiveErrorTypeEnumValues = []AddOffersToArchiveErrorType{
	"OFFER_HAS_STOCKS",
	"UNKNOWN",
}

func (v *AddOffersToArchiveErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddOffersToArchiveErrorType(value)
	for _, existing := range AllowedAddOffersToArchiveErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddOffersToArchiveErrorType", value)
}

// NewAddOffersToArchiveErrorTypeFromValue returns a pointer to a valid AddOffersToArchiveErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddOffersToArchiveErrorTypeFromValue(v string) (*AddOffersToArchiveErrorType, error) {
	ev := AddOffersToArchiveErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddOffersToArchiveErrorType: valid values are %v", v, AllowedAddOffersToArchiveErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddOffersToArchiveErrorType) IsValid() bool {
	for _, existing := range AllowedAddOffersToArchiveErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddOffersToArchiveErrorType value
func (v AddOffersToArchiveErrorType) Ptr() *AddOffersToArchiveErrorType {
	return &v
}

type NullableAddOffersToArchiveErrorType struct {
	value *AddOffersToArchiveErrorType
	isSet bool
}

func (v NullableAddOffersToArchiveErrorType) Get() *AddOffersToArchiveErrorType {
	return v.value
}

func (v *NullableAddOffersToArchiveErrorType) Set(val *AddOffersToArchiveErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableAddOffersToArchiveErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableAddOffersToArchiveErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddOffersToArchiveErrorType(val *AddOffersToArchiveErrorType) *NullableAddOffersToArchiveErrorType {
	return &NullableAddOffersToArchiveErrorType{value: val, isSet: true}
}

func (v NullableAddOffersToArchiveErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddOffersToArchiveErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

