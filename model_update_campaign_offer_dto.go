/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateCampaignOfferDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCampaignOfferDTO{}

// UpdateCampaignOfferDTO Параметры размещения товара в магазине.
type UpdateCampaignOfferDTO struct {
	// Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
	OfferId string `json:"offerId" validate:"regexp=^(?=.*\\\\S.*)[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`
	Quantum *QuantumDTO `json:"quantum,omitempty"`
	// {% note warning \"Вместо него используйте методы скрытия товаров с витрины\" %}  * [GET campaigns/{campaignId}/hidden-offers](../../reference/assortment/getHiddenOffers.md) — просмотр скрытых товаров; * [POST campaigns/{campaignId}/hidden-offers](../../reference/assortment/addHiddenOffers.md) — скрытие товаров; * [POST campaigns/{campaignId}/hidden-offers/delete](../../reference/assortment/deleteHiddenOffers.md) — возобновление показа.  {% endnote %}  Есть ли товар в продаже. 
	// Deprecated
	Available *bool `json:"available,omitempty"`
	// Идентификатор НДС, применяемый для товара:  * `2` — НДС 10%. Например, используется при реализации отдельных продовольственных и медицинских товаров. * `5` — НДС 0%. Например, используется при продаже товаров, вывезенных в таможенной процедуре экспорта, или при оказании услуг по международной перевозке товаров. * `6` — НДС не облагается, используется только для отдельных видов услуг. * `7` — НДС 20%. Основной НДС с 2019 года. * `10` — НДС 5%. НДС для упрощенной системы налогообложения (УСН). * `11` — НДС 7%. НДС для упрощенной системы налогообложения (УСН).  Если параметр не указан, используется НДС, установленный в кабинете.  **Для продавцов Market Yandex Go** недоступна передача и получение НДС. 
	Vat *int32 `json:"vat,omitempty"`
}

type _UpdateCampaignOfferDTO UpdateCampaignOfferDTO

// NewUpdateCampaignOfferDTO instantiates a new UpdateCampaignOfferDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCampaignOfferDTO(offerId string) *UpdateCampaignOfferDTO {
	this := UpdateCampaignOfferDTO{}
	this.OfferId = offerId
	return &this
}

// NewUpdateCampaignOfferDTOWithDefaults instantiates a new UpdateCampaignOfferDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCampaignOfferDTOWithDefaults() *UpdateCampaignOfferDTO {
	this := UpdateCampaignOfferDTO{}
	return &this
}

// GetOfferId returns the OfferId field value
func (o *UpdateCampaignOfferDTO) GetOfferId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value
// and a boolean to check if the value has been set.
func (o *UpdateCampaignOfferDTO) GetOfferIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfferId, true
}

// SetOfferId sets field value
func (o *UpdateCampaignOfferDTO) SetOfferId(v string) {
	o.OfferId = v
}

// GetQuantum returns the Quantum field value if set, zero value otherwise.
func (o *UpdateCampaignOfferDTO) GetQuantum() QuantumDTO {
	if o == nil || IsNil(o.Quantum) {
		var ret QuantumDTO
		return ret
	}
	return *o.Quantum
}

// GetQuantumOk returns a tuple with the Quantum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCampaignOfferDTO) GetQuantumOk() (*QuantumDTO, bool) {
	if o == nil || IsNil(o.Quantum) {
		return nil, false
	}
	return o.Quantum, true
}

// HasQuantum returns a boolean if a field has been set.
func (o *UpdateCampaignOfferDTO) HasQuantum() bool {
	if o != nil && !IsNil(o.Quantum) {
		return true
	}

	return false
}

// SetQuantum gets a reference to the given QuantumDTO and assigns it to the Quantum field.
func (o *UpdateCampaignOfferDTO) SetQuantum(v QuantumDTO) {
	o.Quantum = &v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
// Deprecated
func (o *UpdateCampaignOfferDTO) GetAvailable() bool {
	if o == nil || IsNil(o.Available) {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateCampaignOfferDTO) GetAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *UpdateCampaignOfferDTO) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
// Deprecated
func (o *UpdateCampaignOfferDTO) SetAvailable(v bool) {
	o.Available = &v
}

// GetVat returns the Vat field value if set, zero value otherwise.
func (o *UpdateCampaignOfferDTO) GetVat() int32 {
	if o == nil || IsNil(o.Vat) {
		var ret int32
		return ret
	}
	return *o.Vat
}

// GetVatOk returns a tuple with the Vat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCampaignOfferDTO) GetVatOk() (*int32, bool) {
	if o == nil || IsNil(o.Vat) {
		return nil, false
	}
	return o.Vat, true
}

// HasVat returns a boolean if a field has been set.
func (o *UpdateCampaignOfferDTO) HasVat() bool {
	if o != nil && !IsNil(o.Vat) {
		return true
	}

	return false
}

// SetVat gets a reference to the given int32 and assigns it to the Vat field.
func (o *UpdateCampaignOfferDTO) SetVat(v int32) {
	o.Vat = &v
}

func (o UpdateCampaignOfferDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCampaignOfferDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["offerId"] = o.OfferId
	if !IsNil(o.Quantum) {
		toSerialize["quantum"] = o.Quantum
	}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.Vat) {
		toSerialize["vat"] = o.Vat
	}
	return toSerialize, nil
}

func (o *UpdateCampaignOfferDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"offerId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateCampaignOfferDTO := _UpdateCampaignOfferDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateCampaignOfferDTO)

	if err != nil {
		return err
	}

	*o = UpdateCampaignOfferDTO(varUpdateCampaignOfferDTO)

	return err
}

type NullableUpdateCampaignOfferDTO struct {
	value *UpdateCampaignOfferDTO
	isSet bool
}

func (v NullableUpdateCampaignOfferDTO) Get() *UpdateCampaignOfferDTO {
	return v.value
}

func (v *NullableUpdateCampaignOfferDTO) Set(val *UpdateCampaignOfferDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCampaignOfferDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCampaignOfferDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCampaignOfferDTO(val *UpdateCampaignOfferDTO) *NullableUpdateCampaignOfferDTO {
	return &NullableUpdateCampaignOfferDTO{value: val, isSet: true}
}

func (v NullableUpdateCampaignOfferDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCampaignOfferDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


