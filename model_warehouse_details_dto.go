/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WarehouseDetailsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WarehouseDetailsDTO{}

// WarehouseDetailsDTO Информация о складе.
type WarehouseDetailsDTO struct {
	// Идентификатор склада.
	Id int64 `json:"id"`
	// Название склада.
	Name string `json:"name"`
	// Идентификатор кампании того магазина, который связан со складом.  Его можно узнать с помощью запроса [GET campaigns](../../reference/campaigns/getCampaigns.md) или найти в кабинете продавца на Маркете — нажмите на название своего бизнеса и перейдите на страницу:    * **Модули и API** → блок **Передача данных Маркету**.   * **Лог запросов** → выпадающий список в блоке **Показывать логи**.  ⚠️ Не передавайте вместо него идентификатор магазина, который указан в кабинете продавца на Маркете рядом с названием магазина и в некоторых отчетах.
	CampaignId int64 `json:"campaignId"`
	// Возможна ли доставка для модели Экспресс.
	Express   bool                   `json:"express"`
	GroupInfo *WarehouseGroupInfoDTO `json:"groupInfo,omitempty"`
	Address   *WarehouseAddressDTO   `json:"address,omitempty"`
	Status    *WarehouseStatusDTO    `json:"status,omitempty"`
}

type _WarehouseDetailsDTO WarehouseDetailsDTO

// NewWarehouseDetailsDTO instantiates a new WarehouseDetailsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWarehouseDetailsDTO(id int64, name string, campaignId int64, express bool) *WarehouseDetailsDTO {
	this := WarehouseDetailsDTO{}
	this.Id = id
	this.Name = name
	this.CampaignId = campaignId
	this.Express = express
	return &this
}

// NewWarehouseDetailsDTOWithDefaults instantiates a new WarehouseDetailsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWarehouseDetailsDTOWithDefaults() *WarehouseDetailsDTO {
	this := WarehouseDetailsDTO{}
	return &this
}

// GetId returns the Id field value
func (o *WarehouseDetailsDTO) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WarehouseDetailsDTO) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WarehouseDetailsDTO) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *WarehouseDetailsDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WarehouseDetailsDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WarehouseDetailsDTO) SetName(v string) {
	o.Name = v
}

// GetCampaignId returns the CampaignId field value
func (o *WarehouseDetailsDTO) GetCampaignId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CampaignId
}

// GetCampaignIdOk returns a tuple with the CampaignId field value
// and a boolean to check if the value has been set.
func (o *WarehouseDetailsDTO) GetCampaignIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CampaignId, true
}

// SetCampaignId sets field value
func (o *WarehouseDetailsDTO) SetCampaignId(v int64) {
	o.CampaignId = v
}

// GetExpress returns the Express field value
func (o *WarehouseDetailsDTO) GetExpress() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Express
}

// GetExpressOk returns a tuple with the Express field value
// and a boolean to check if the value has been set.
func (o *WarehouseDetailsDTO) GetExpressOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Express, true
}

// SetExpress sets field value
func (o *WarehouseDetailsDTO) SetExpress(v bool) {
	o.Express = v
}

// GetGroupInfo returns the GroupInfo field value if set, zero value otherwise.
func (o *WarehouseDetailsDTO) GetGroupInfo() WarehouseGroupInfoDTO {
	if o == nil || IsNil(o.GroupInfo) {
		var ret WarehouseGroupInfoDTO
		return ret
	}
	return *o.GroupInfo
}

// GetGroupInfoOk returns a tuple with the GroupInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseDetailsDTO) GetGroupInfoOk() (*WarehouseGroupInfoDTO, bool) {
	if o == nil || IsNil(o.GroupInfo) {
		return nil, false
	}
	return o.GroupInfo, true
}

// HasGroupInfo returns a boolean if a field has been set.
func (o *WarehouseDetailsDTO) HasGroupInfo() bool {
	if o != nil && !IsNil(o.GroupInfo) {
		return true
	}

	return false
}

// SetGroupInfo gets a reference to the given WarehouseGroupInfoDTO and assigns it to the GroupInfo field.
func (o *WarehouseDetailsDTO) SetGroupInfo(v WarehouseGroupInfoDTO) {
	o.GroupInfo = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *WarehouseDetailsDTO) GetAddress() WarehouseAddressDTO {
	if o == nil || IsNil(o.Address) {
		var ret WarehouseAddressDTO
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseDetailsDTO) GetAddressOk() (*WarehouseAddressDTO, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *WarehouseDetailsDTO) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given WarehouseAddressDTO and assigns it to the Address field.
func (o *WarehouseDetailsDTO) SetAddress(v WarehouseAddressDTO) {
	o.Address = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WarehouseDetailsDTO) GetStatus() WarehouseStatusDTO {
	if o == nil || IsNil(o.Status) {
		var ret WarehouseStatusDTO
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseDetailsDTO) GetStatusOk() (*WarehouseStatusDTO, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WarehouseDetailsDTO) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given WarehouseStatusDTO and assigns it to the Status field.
func (o *WarehouseDetailsDTO) SetStatus(v WarehouseStatusDTO) {
	o.Status = &v
}

func (o WarehouseDetailsDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WarehouseDetailsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["campaignId"] = o.CampaignId
	toSerialize["express"] = o.Express
	if !IsNil(o.GroupInfo) {
		toSerialize["groupInfo"] = o.GroupInfo
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *WarehouseDetailsDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"campaignId",
		"express",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWarehouseDetailsDTO := _WarehouseDetailsDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWarehouseDetailsDTO)

	if err != nil {
		return err
	}

	*o = WarehouseDetailsDTO(varWarehouseDetailsDTO)

	return err
}

type NullableWarehouseDetailsDTO struct {
	value *WarehouseDetailsDTO
	isSet bool
}

func (v NullableWarehouseDetailsDTO) Get() *WarehouseDetailsDTO {
	return v.value
}

func (v *NullableWarehouseDetailsDTO) Set(val *WarehouseDetailsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableWarehouseDetailsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableWarehouseDetailsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarehouseDetailsDTO(val *WarehouseDetailsDTO) *NullableWarehouseDetailsDTO {
	return &NullableWarehouseDetailsDTO{value: val, isSet: true}
}

func (v NullableWarehouseDetailsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarehouseDetailsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
