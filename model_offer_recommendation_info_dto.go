/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OfferRecommendationInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferRecommendationInfoDTO{}

// OfferRecommendationInfoDTO Рекомендации, касающиеся цены на товар.
type OfferRecommendationInfoDTO struct {
	// Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
	OfferId *string `json:"offerId,omitempty" validate:"regexp=^(?=.*\\\\S.*)[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`
	CompetitivenessThresholds *PriceCompetitivenessThresholdsDTO `json:"competitivenessThresholds,omitempty"`
}

// NewOfferRecommendationInfoDTO instantiates a new OfferRecommendationInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferRecommendationInfoDTO() *OfferRecommendationInfoDTO {
	this := OfferRecommendationInfoDTO{}
	return &this
}

// NewOfferRecommendationInfoDTOWithDefaults instantiates a new OfferRecommendationInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferRecommendationInfoDTOWithDefaults() *OfferRecommendationInfoDTO {
	this := OfferRecommendationInfoDTO{}
	return &this
}

// GetOfferId returns the OfferId field value if set, zero value otherwise.
func (o *OfferRecommendationInfoDTO) GetOfferId() string {
	if o == nil || IsNil(o.OfferId) {
		var ret string
		return ret
	}
	return *o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferRecommendationInfoDTO) GetOfferIdOk() (*string, bool) {
	if o == nil || IsNil(o.OfferId) {
		return nil, false
	}
	return o.OfferId, true
}

// HasOfferId returns a boolean if a field has been set.
func (o *OfferRecommendationInfoDTO) HasOfferId() bool {
	if o != nil && !IsNil(o.OfferId) {
		return true
	}

	return false
}

// SetOfferId gets a reference to the given string and assigns it to the OfferId field.
func (o *OfferRecommendationInfoDTO) SetOfferId(v string) {
	o.OfferId = &v
}

// GetCompetitivenessThresholds returns the CompetitivenessThresholds field value if set, zero value otherwise.
func (o *OfferRecommendationInfoDTO) GetCompetitivenessThresholds() PriceCompetitivenessThresholdsDTO {
	if o == nil || IsNil(o.CompetitivenessThresholds) {
		var ret PriceCompetitivenessThresholdsDTO
		return ret
	}
	return *o.CompetitivenessThresholds
}

// GetCompetitivenessThresholdsOk returns a tuple with the CompetitivenessThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferRecommendationInfoDTO) GetCompetitivenessThresholdsOk() (*PriceCompetitivenessThresholdsDTO, bool) {
	if o == nil || IsNil(o.CompetitivenessThresholds) {
		return nil, false
	}
	return o.CompetitivenessThresholds, true
}

// HasCompetitivenessThresholds returns a boolean if a field has been set.
func (o *OfferRecommendationInfoDTO) HasCompetitivenessThresholds() bool {
	if o != nil && !IsNil(o.CompetitivenessThresholds) {
		return true
	}

	return false
}

// SetCompetitivenessThresholds gets a reference to the given PriceCompetitivenessThresholdsDTO and assigns it to the CompetitivenessThresholds field.
func (o *OfferRecommendationInfoDTO) SetCompetitivenessThresholds(v PriceCompetitivenessThresholdsDTO) {
	o.CompetitivenessThresholds = &v
}

func (o OfferRecommendationInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferRecommendationInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OfferId) {
		toSerialize["offerId"] = o.OfferId
	}
	if !IsNil(o.CompetitivenessThresholds) {
		toSerialize["competitivenessThresholds"] = o.CompetitivenessThresholds
	}
	return toSerialize, nil
}

type NullableOfferRecommendationInfoDTO struct {
	value *OfferRecommendationInfoDTO
	isSet bool
}

func (v NullableOfferRecommendationInfoDTO) Get() *OfferRecommendationInfoDTO {
	return v.value
}

func (v *NullableOfferRecommendationInfoDTO) Set(val *OfferRecommendationInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferRecommendationInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferRecommendationInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferRecommendationInfoDTO(val *OfferRecommendationInfoDTO) *NullableOfferRecommendationInfoDTO {
	return &NullableOfferRecommendationInfoDTO{value: val, isSet: true}
}

func (v NullableOfferRecommendationInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferRecommendationInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


