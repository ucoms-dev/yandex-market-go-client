/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderDeliveryType Способ доставки заказа:  * `DELIVERY` — курьерская доставка.  * `PICKUP` — самовывоз.  * `POST` — почта.  * `DIGITAL` — для цифровых товаров.  * `UNKNOWN` — неизвестный тип. 
type OrderDeliveryType string

// List of OrderDeliveryType
const (
	DELIVERY OrderDeliveryType = "DELIVERY"
	PICKUP OrderDeliveryType = "PICKUP"
	POST OrderDeliveryType = "POST"
	DIGITAL OrderDeliveryType = "DIGITAL"
	UNKNOWN OrderDeliveryType = "UNKNOWN"
)

// All allowed values of OrderDeliveryType enum
var AllowedOrderDeliveryTypeEnumValues = []OrderDeliveryType{
	"DELIVERY",
	"PICKUP",
	"POST",
	"DIGITAL",
	"UNKNOWN",
}

func (v *OrderDeliveryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderDeliveryType(value)
	for _, existing := range AllowedOrderDeliveryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderDeliveryType", value)
}

// NewOrderDeliveryTypeFromValue returns a pointer to a valid OrderDeliveryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderDeliveryTypeFromValue(v string) (*OrderDeliveryType, error) {
	ev := OrderDeliveryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderDeliveryType: valid values are %v", v, AllowedOrderDeliveryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderDeliveryType) IsValid() bool {
	for _, existing := range AllowedOrderDeliveryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderDeliveryType value
func (v OrderDeliveryType) Ptr() *OrderDeliveryType {
	return &v
}

type NullableOrderDeliveryType struct {
	value *OrderDeliveryType
	isSet bool
}

func (v NullableOrderDeliveryType) Get() *OrderDeliveryType {
	return v.value
}

func (v *NullableOrderDeliveryType) Set(val *OrderDeliveryType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDeliveryType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDeliveryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDeliveryType(val *OrderDeliveryType) *NullableOrderDeliveryType {
	return &NullableOrderDeliveryType{value: val, isSet: true}
}

func (v NullableOrderDeliveryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDeliveryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

