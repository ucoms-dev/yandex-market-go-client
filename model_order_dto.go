/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OrderDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderDTO{}

// OrderDTO Заказ.
type OrderDTO struct {
	// Идентификатор заказа.
	Id int64 `json:"id"`
	// Дополнительный идентификатор заказа.
	ExternalOrderId *string            `json:"externalOrderId,omitempty"`
	Status          OrderStatusType    `json:"status"`
	Substatus       OrderSubstatusType `json:"substatus"`
	CreationDate    string             `json:"creationDate"`
	UpdatedAt       *string            `json:"updatedAt,omitempty"`
	Currency        CurrencyType       `json:"currency"`
	// Платеж покупателя.
	ItemsTotal float32 `json:"itemsTotal"`
	// Стоимость доставки.
	DeliveryTotal float32 `json:"deliveryTotal"`
	// Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки.
	// Deprecated
	BuyerItemsTotal *float32 `json:"buyerItemsTotal,omitempty"`
	// Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки.
	// Deprecated
	BuyerTotal *float32 `json:"buyerTotal,omitempty"`
	// Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам.
	BuyerItemsTotalBeforeDiscount float32 `json:"buyerItemsTotalBeforeDiscount"`
	// Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки).
	// Deprecated
	BuyerTotalBeforeDiscount *float32               `json:"buyerTotalBeforeDiscount,omitempty"`
	PaymentType              OrderPaymentType       `json:"paymentType"`
	PaymentMethod            OrderPaymentMethodType `json:"paymentMethod"`
	// Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../concepts/sandbox.md) заказ Маркета.
	Fake bool `json:"fake"`
	// Список товаров в заказе.
	Items []OrderItemDTO `json:"items"`
	// Список субсидий по типам.
	Subsidies []OrderSubsidyDTO `json:"subsidies,omitempty"`
	Delivery  OrderDeliveryDTO  `json:"delivery"`
	Buyer     OrderBuyerDTO     `json:"buyer"`
	// Комментарий к заказу.
	Notes     *string            `json:"notes,omitempty"`
	TaxSystem OrderTaxSystemType `json:"taxSystem"`
	// **Только для модели DBS**  Запрошена ли отмена.
	CancelRequested *bool   `json:"cancelRequested,omitempty"`
	ExpiryDate      *string `json:"expiryDate,omitempty"`
}

type _OrderDTO OrderDTO

// NewOrderDTO instantiates a new OrderDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderDTO(id int64, status OrderStatusType, substatus OrderSubstatusType, creationDate string, currency CurrencyType, itemsTotal float32, deliveryTotal float32, buyerItemsTotalBeforeDiscount float32, paymentType OrderPaymentType, paymentMethod OrderPaymentMethodType, fake bool, items []OrderItemDTO, delivery OrderDeliveryDTO, buyer OrderBuyerDTO, taxSystem OrderTaxSystemType) *OrderDTO {
	this := OrderDTO{}
	this.Id = id
	this.Status = status
	this.Substatus = substatus
	this.CreationDate = creationDate
	this.Currency = currency
	this.ItemsTotal = itemsTotal
	this.DeliveryTotal = deliveryTotal
	this.BuyerItemsTotalBeforeDiscount = buyerItemsTotalBeforeDiscount
	this.PaymentType = paymentType
	this.PaymentMethod = paymentMethod
	this.Fake = fake
	this.Items = items
	this.Delivery = delivery
	this.Buyer = buyer
	this.TaxSystem = taxSystem
	return &this
}

// NewOrderDTOWithDefaults instantiates a new OrderDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderDTOWithDefaults() *OrderDTO {
	this := OrderDTO{}
	return &this
}

// GetId returns the Id field value
func (o *OrderDTO) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrderDTO) SetId(v int64) {
	o.Id = v
}

// GetExternalOrderId returns the ExternalOrderId field value if set, zero value otherwise.
func (o *OrderDTO) GetExternalOrderId() string {
	if o == nil || IsNil(o.ExternalOrderId) {
		var ret string
		return ret
	}
	return *o.ExternalOrderId
}

// GetExternalOrderIdOk returns a tuple with the ExternalOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetExternalOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalOrderId) {
		return nil, false
	}
	return o.ExternalOrderId, true
}

// HasExternalOrderId returns a boolean if a field has been set.
func (o *OrderDTO) HasExternalOrderId() bool {
	if o != nil && !IsNil(o.ExternalOrderId) {
		return true
	}

	return false
}

// SetExternalOrderId gets a reference to the given string and assigns it to the ExternalOrderId field.
func (o *OrderDTO) SetExternalOrderId(v string) {
	o.ExternalOrderId = &v
}

// GetStatus returns the Status field value
func (o *OrderDTO) GetStatus() OrderStatusType {
	if o == nil {
		var ret OrderStatusType
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetStatusOk() (*OrderStatusType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *OrderDTO) SetStatus(v OrderStatusType) {
	o.Status = v
}

// GetSubstatus returns the Substatus field value
func (o *OrderDTO) GetSubstatus() OrderSubstatusType {
	if o == nil {
		var ret OrderSubstatusType
		return ret
	}

	return o.Substatus
}

// GetSubstatusOk returns a tuple with the Substatus field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetSubstatusOk() (*OrderSubstatusType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Substatus, true
}

// SetSubstatus sets field value
func (o *OrderDTO) SetSubstatus(v OrderSubstatusType) {
	o.Substatus = v
}

// GetCreationDate returns the CreationDate field value
func (o *OrderDTO) GetCreationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetCreationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationDate, true
}

// SetCreationDate sets field value
func (o *OrderDTO) SetCreationDate(v string) {
	o.CreationDate = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *OrderDTO) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *OrderDTO) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *OrderDTO) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetCurrency returns the Currency field value
func (o *OrderDTO) GetCurrency() CurrencyType {
	if o == nil {
		var ret CurrencyType
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetCurrencyOk() (*CurrencyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *OrderDTO) SetCurrency(v CurrencyType) {
	o.Currency = v
}

// GetItemsTotal returns the ItemsTotal field value
func (o *OrderDTO) GetItemsTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ItemsTotal
}

// GetItemsTotalOk returns a tuple with the ItemsTotal field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetItemsTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemsTotal, true
}

// SetItemsTotal sets field value
func (o *OrderDTO) SetItemsTotal(v float32) {
	o.ItemsTotal = v
}

// GetDeliveryTotal returns the DeliveryTotal field value
func (o *OrderDTO) GetDeliveryTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DeliveryTotal
}

// GetDeliveryTotalOk returns a tuple with the DeliveryTotal field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetDeliveryTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeliveryTotal, true
}

// SetDeliveryTotal sets field value
func (o *OrderDTO) SetDeliveryTotal(v float32) {
	o.DeliveryTotal = v
}

// GetBuyerItemsTotal returns the BuyerItemsTotal field value if set, zero value otherwise.
// Deprecated
func (o *OrderDTO) GetBuyerItemsTotal() float32 {
	if o == nil || IsNil(o.BuyerItemsTotal) {
		var ret float32
		return ret
	}
	return *o.BuyerItemsTotal
}

// GetBuyerItemsTotalOk returns a tuple with the BuyerItemsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *OrderDTO) GetBuyerItemsTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.BuyerItemsTotal) {
		return nil, false
	}
	return o.BuyerItemsTotal, true
}

// HasBuyerItemsTotal returns a boolean if a field has been set.
func (o *OrderDTO) HasBuyerItemsTotal() bool {
	if o != nil && !IsNil(o.BuyerItemsTotal) {
		return true
	}

	return false
}

// SetBuyerItemsTotal gets a reference to the given float32 and assigns it to the BuyerItemsTotal field.
// Deprecated
func (o *OrderDTO) SetBuyerItemsTotal(v float32) {
	o.BuyerItemsTotal = &v
}

// GetBuyerTotal returns the BuyerTotal field value if set, zero value otherwise.
// Deprecated
func (o *OrderDTO) GetBuyerTotal() float32 {
	if o == nil || IsNil(o.BuyerTotal) {
		var ret float32
		return ret
	}
	return *o.BuyerTotal
}

// GetBuyerTotalOk returns a tuple with the BuyerTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *OrderDTO) GetBuyerTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.BuyerTotal) {
		return nil, false
	}
	return o.BuyerTotal, true
}

// HasBuyerTotal returns a boolean if a field has been set.
func (o *OrderDTO) HasBuyerTotal() bool {
	if o != nil && !IsNil(o.BuyerTotal) {
		return true
	}

	return false
}

// SetBuyerTotal gets a reference to the given float32 and assigns it to the BuyerTotal field.
// Deprecated
func (o *OrderDTO) SetBuyerTotal(v float32) {
	o.BuyerTotal = &v
}

// GetBuyerItemsTotalBeforeDiscount returns the BuyerItemsTotalBeforeDiscount field value
func (o *OrderDTO) GetBuyerItemsTotalBeforeDiscount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BuyerItemsTotalBeforeDiscount
}

// GetBuyerItemsTotalBeforeDiscountOk returns a tuple with the BuyerItemsTotalBeforeDiscount field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetBuyerItemsTotalBeforeDiscountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuyerItemsTotalBeforeDiscount, true
}

// SetBuyerItemsTotalBeforeDiscount sets field value
func (o *OrderDTO) SetBuyerItemsTotalBeforeDiscount(v float32) {
	o.BuyerItemsTotalBeforeDiscount = v
}

// GetBuyerTotalBeforeDiscount returns the BuyerTotalBeforeDiscount field value if set, zero value otherwise.
// Deprecated
func (o *OrderDTO) GetBuyerTotalBeforeDiscount() float32 {
	if o == nil || IsNil(o.BuyerTotalBeforeDiscount) {
		var ret float32
		return ret
	}
	return *o.BuyerTotalBeforeDiscount
}

// GetBuyerTotalBeforeDiscountOk returns a tuple with the BuyerTotalBeforeDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *OrderDTO) GetBuyerTotalBeforeDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.BuyerTotalBeforeDiscount) {
		return nil, false
	}
	return o.BuyerTotalBeforeDiscount, true
}

// HasBuyerTotalBeforeDiscount returns a boolean if a field has been set.
func (o *OrderDTO) HasBuyerTotalBeforeDiscount() bool {
	if o != nil && !IsNil(o.BuyerTotalBeforeDiscount) {
		return true
	}

	return false
}

// SetBuyerTotalBeforeDiscount gets a reference to the given float32 and assigns it to the BuyerTotalBeforeDiscount field.
// Deprecated
func (o *OrderDTO) SetBuyerTotalBeforeDiscount(v float32) {
	o.BuyerTotalBeforeDiscount = &v
}

// GetPaymentType returns the PaymentType field value
func (o *OrderDTO) GetPaymentType() OrderPaymentType {
	if o == nil {
		var ret OrderPaymentType
		return ret
	}

	return o.PaymentType
}

// GetPaymentTypeOk returns a tuple with the PaymentType field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetPaymentTypeOk() (*OrderPaymentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentType, true
}

// SetPaymentType sets field value
func (o *OrderDTO) SetPaymentType(v OrderPaymentType) {
	o.PaymentType = v
}

// GetPaymentMethod returns the PaymentMethod field value
func (o *OrderDTO) GetPaymentMethod() OrderPaymentMethodType {
	if o == nil {
		var ret OrderPaymentMethodType
		return ret
	}

	return o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetPaymentMethodOk() (*OrderPaymentMethodType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentMethod, true
}

// SetPaymentMethod sets field value
func (o *OrderDTO) SetPaymentMethod(v OrderPaymentMethodType) {
	o.PaymentMethod = v
}

// GetFake returns the Fake field value
func (o *OrderDTO) GetFake() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Fake
}

// GetFakeOk returns a tuple with the Fake field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetFakeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fake, true
}

// SetFake sets field value
func (o *OrderDTO) SetFake(v bool) {
	o.Fake = v
}

// GetItems returns the Items field value
func (o *OrderDTO) GetItems() []OrderItemDTO {
	if o == nil {
		var ret []OrderItemDTO
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetItemsOk() ([]OrderItemDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *OrderDTO) SetItems(v []OrderItemDTO) {
	o.Items = v
}

// GetSubsidies returns the Subsidies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderDTO) GetSubsidies() []OrderSubsidyDTO {
	if o == nil {
		var ret []OrderSubsidyDTO
		return ret
	}
	return o.Subsidies
}

// GetSubsidiesOk returns a tuple with the Subsidies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderDTO) GetSubsidiesOk() ([]OrderSubsidyDTO, bool) {
	if o == nil || IsNil(o.Subsidies) {
		return nil, false
	}
	return o.Subsidies, true
}

// HasSubsidies returns a boolean if a field has been set.
func (o *OrderDTO) HasSubsidies() bool {
	if o != nil && !IsNil(o.Subsidies) {
		return true
	}

	return false
}

// SetSubsidies gets a reference to the given []OrderSubsidyDTO and assigns it to the Subsidies field.
func (o *OrderDTO) SetSubsidies(v []OrderSubsidyDTO) {
	o.Subsidies = v
}

// GetDelivery returns the Delivery field value
func (o *OrderDTO) GetDelivery() OrderDeliveryDTO {
	if o == nil {
		var ret OrderDeliveryDTO
		return ret
	}

	return o.Delivery
}

// GetDeliveryOk returns a tuple with the Delivery field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetDeliveryOk() (*OrderDeliveryDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delivery, true
}

// SetDelivery sets field value
func (o *OrderDTO) SetDelivery(v OrderDeliveryDTO) {
	o.Delivery = v
}

// GetBuyer returns the Buyer field value
func (o *OrderDTO) GetBuyer() OrderBuyerDTO {
	if o == nil {
		var ret OrderBuyerDTO
		return ret
	}

	return o.Buyer
}

// GetBuyerOk returns a tuple with the Buyer field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetBuyerOk() (*OrderBuyerDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Buyer, true
}

// SetBuyer sets field value
func (o *OrderDTO) SetBuyer(v OrderBuyerDTO) {
	o.Buyer = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *OrderDTO) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *OrderDTO) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *OrderDTO) SetNotes(v string) {
	o.Notes = &v
}

// GetTaxSystem returns the TaxSystem field value
func (o *OrderDTO) GetTaxSystem() OrderTaxSystemType {
	if o == nil {
		var ret OrderTaxSystemType
		return ret
	}

	return o.TaxSystem
}

// GetTaxSystemOk returns a tuple with the TaxSystem field value
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetTaxSystemOk() (*OrderTaxSystemType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxSystem, true
}

// SetTaxSystem sets field value
func (o *OrderDTO) SetTaxSystem(v OrderTaxSystemType) {
	o.TaxSystem = v
}

// GetCancelRequested returns the CancelRequested field value if set, zero value otherwise.
func (o *OrderDTO) GetCancelRequested() bool {
	if o == nil || IsNil(o.CancelRequested) {
		var ret bool
		return ret
	}
	return *o.CancelRequested
}

// GetCancelRequestedOk returns a tuple with the CancelRequested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetCancelRequestedOk() (*bool, bool) {
	if o == nil || IsNil(o.CancelRequested) {
		return nil, false
	}
	return o.CancelRequested, true
}

// HasCancelRequested returns a boolean if a field has been set.
func (o *OrderDTO) HasCancelRequested() bool {
	if o != nil && !IsNil(o.CancelRequested) {
		return true
	}

	return false
}

// SetCancelRequested gets a reference to the given bool and assigns it to the CancelRequested field.
func (o *OrderDTO) SetCancelRequested(v bool) {
	o.CancelRequested = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *OrderDTO) GetExpiryDate() string {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret string
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDTO) GetExpiryDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *OrderDTO) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given string and assigns it to the ExpiryDate field.
func (o *OrderDTO) SetExpiryDate(v string) {
	o.ExpiryDate = &v
}

func (o OrderDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.ExternalOrderId) {
		toSerialize["externalOrderId"] = o.ExternalOrderId
	}
	toSerialize["status"] = o.Status
	toSerialize["substatus"] = o.Substatus
	toSerialize["creationDate"] = o.CreationDate
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	toSerialize["currency"] = o.Currency
	toSerialize["itemsTotal"] = o.ItemsTotal
	toSerialize["deliveryTotal"] = o.DeliveryTotal
	if !IsNil(o.BuyerItemsTotal) {
		toSerialize["buyerItemsTotal"] = o.BuyerItemsTotal
	}
	if !IsNil(o.BuyerTotal) {
		toSerialize["buyerTotal"] = o.BuyerTotal
	}
	toSerialize["buyerItemsTotalBeforeDiscount"] = o.BuyerItemsTotalBeforeDiscount
	if !IsNil(o.BuyerTotalBeforeDiscount) {
		toSerialize["buyerTotalBeforeDiscount"] = o.BuyerTotalBeforeDiscount
	}
	toSerialize["paymentType"] = o.PaymentType
	toSerialize["paymentMethod"] = o.PaymentMethod
	toSerialize["fake"] = o.Fake
	toSerialize["items"] = o.Items
	if o.Subsidies != nil {
		toSerialize["subsidies"] = o.Subsidies
	}
	toSerialize["delivery"] = o.Delivery
	toSerialize["buyer"] = o.Buyer
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	toSerialize["taxSystem"] = o.TaxSystem
	if !IsNil(o.CancelRequested) {
		toSerialize["cancelRequested"] = o.CancelRequested
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	return toSerialize, nil
}

func (o *OrderDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"status",
		"substatus",
		"creationDate",
		"currency",
		"itemsTotal",
		"deliveryTotal",
		"buyerItemsTotalBeforeDiscount",
		"paymentType",
		"paymentMethod",
		"fake",
		"items",
		"delivery",
		"buyer",
		"taxSystem",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderDTO := _OrderDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varOrderDTO)

	if err != nil {
		return err
	}

	*o = OrderDTO(varOrderDTO)

	return err
}

type NullableOrderDTO struct {
	value *OrderDTO
	isSet bool
}

func (v NullableOrderDTO) Get() *OrderDTO {
	return v.value
}

func (v *NullableOrderDTO) Set(val *OrderDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDTO(val *OrderDTO) *NullableOrderDTO {
	return &NullableOrderDTO{value: val, isSet: true}
}

func (v NullableOrderDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
