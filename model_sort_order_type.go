/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SortOrderType Направление сортировки:  - `ASC` — сортировка по возрастанию. - `DESC` — сортировка по убыванию. 
type SortOrderType string

// List of SortOrderType
const (
	ASC SortOrderType = "ASC"
	DESC SortOrderType = "DESC"
)

// All allowed values of SortOrderType enum
var AllowedSortOrderTypeEnumValues = []SortOrderType{
	"ASC",
	"DESC",
}

func (v *SortOrderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SortOrderType(value)
	for _, existing := range AllowedSortOrderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SortOrderType", value)
}

// NewSortOrderTypeFromValue returns a pointer to a valid SortOrderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSortOrderTypeFromValue(v string) (*SortOrderType, error) {
	ev := SortOrderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SortOrderType: valid values are %v", v, AllowedSortOrderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SortOrderType) IsValid() bool {
	for _, existing := range AllowedSortOrderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SortOrderType value
func (v SortOrderType) Ptr() *SortOrderType {
	return &v
}

type NullableSortOrderType struct {
	value *SortOrderType
	isSet bool
}

func (v NullableSortOrderType) Get() *SortOrderType {
	return v.value
}

func (v *NullableSortOrderType) Set(val *SortOrderType) {
	v.value = val
	v.isSet = true
}

func (v NullableSortOrderType) IsSet() bool {
	return v.isSet
}

func (v *NullableSortOrderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortOrderType(val *SortOrderType) *NullableSortOrderType {
	return &NullableSortOrderType{value: val, isSet: true}
}

func (v NullableSortOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortOrderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

