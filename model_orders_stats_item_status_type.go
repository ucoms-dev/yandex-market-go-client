/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrdersStatsItemStatusType Статус товара:  * `REJECTED` — товар был добавлен в созданный заказ, но не был оплачен. * `RETURNED` — товар вернули. 
type OrdersStatsItemStatusType string

// List of OrdersStatsItemStatusType
const (
	REJECTED OrdersStatsItemStatusType = "REJECTED"
	RETURNED OrdersStatsItemStatusType = "RETURNED"
)

// All allowed values of OrdersStatsItemStatusType enum
var AllowedOrdersStatsItemStatusTypeEnumValues = []OrdersStatsItemStatusType{
	"REJECTED",
	"RETURNED",
}

func (v *OrdersStatsItemStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrdersStatsItemStatusType(value)
	for _, existing := range AllowedOrdersStatsItemStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrdersStatsItemStatusType", value)
}

// NewOrdersStatsItemStatusTypeFromValue returns a pointer to a valid OrdersStatsItemStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersStatsItemStatusTypeFromValue(v string) (*OrdersStatsItemStatusType, error) {
	ev := OrdersStatsItemStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrdersStatsItemStatusType: valid values are %v", v, AllowedOrdersStatsItemStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersStatsItemStatusType) IsValid() bool {
	for _, existing := range AllowedOrdersStatsItemStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrdersStatsItemStatusType value
func (v OrdersStatsItemStatusType) Ptr() *OrdersStatsItemStatusType {
	return &v
}

type NullableOrdersStatsItemStatusType struct {
	value *OrdersStatsItemStatusType
	isSet bool
}

func (v NullableOrdersStatsItemStatusType) Get() *OrdersStatsItemStatusType {
	return v.value
}

func (v *NullableOrdersStatsItemStatusType) Set(val *OrdersStatsItemStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersStatsItemStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersStatsItemStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersStatsItemStatusType(val *OrdersStatsItemStatusType) *NullableOrdersStatsItemStatusType {
	return &NullableOrdersStatsItemStatusType{value: val, isSet: true}
}

func (v NullableOrdersStatsItemStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersStatsItemStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

