/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderUpdateStatusType Изменился ли статус заказа:  * `OK` — статус изменен.  * `ERROR` — статус не изменен. В этом случае появится сообщение об ошибке в параметре `errorDetails`. 
type OrderUpdateStatusType string

// List of OrderUpdateStatusType
const (
	OK OrderUpdateStatusType = "OK"
	ERROR OrderUpdateStatusType = "ERROR"
)

// All allowed values of OrderUpdateStatusType enum
var AllowedOrderUpdateStatusTypeEnumValues = []OrderUpdateStatusType{
	"OK",
	"ERROR",
}

func (v *OrderUpdateStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderUpdateStatusType(value)
	for _, existing := range AllowedOrderUpdateStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderUpdateStatusType", value)
}

// NewOrderUpdateStatusTypeFromValue returns a pointer to a valid OrderUpdateStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderUpdateStatusTypeFromValue(v string) (*OrderUpdateStatusType, error) {
	ev := OrderUpdateStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderUpdateStatusType: valid values are %v", v, AllowedOrderUpdateStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderUpdateStatusType) IsValid() bool {
	for _, existing := range AllowedOrderUpdateStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderUpdateStatusType value
func (v OrderUpdateStatusType) Ptr() *OrderUpdateStatusType {
	return &v
}

type NullableOrderUpdateStatusType struct {
	value *OrderUpdateStatusType
	isSet bool
}

func (v NullableOrderUpdateStatusType) Get() *OrderUpdateStatusType {
	return v.value
}

func (v *NullableOrderUpdateStatusType) Set(val *OrderUpdateStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderUpdateStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderUpdateStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderUpdateStatusType(val *OrderUpdateStatusType) *NullableOrderUpdateStatusType {
	return &NullableOrderUpdateStatusType{value: val, isSet: true}
}

func (v NullableOrderUpdateStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderUpdateStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

