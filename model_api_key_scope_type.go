/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ApiKeyScopeType Доступы к методам:  * `ALL_METHODS` — полное управление кабинетом. * `ALL_METHODS_READ_ONLY` — просмотр всей информации в кабинете. * `INVENTORY_AND_ORDER_PROCESSING` — обработка заказов и учет товаров. * `INVENTORY_AND_ORDER_PROCESSING_READ_ONLY` — просмотр информации о заказах. * `PRICING` — управление ценами. * `PRICING_READ_ONLY` — просмотр цен. * `OFFERS_AND_CARDS_MANAGEMENT` — управление товарами и карточками. * `OFFERS_AND_CARDS_MANAGEMENT_READ_ONLY` — просмотр товаров и карточек. * `PROMOTION` — продвижение товаров. * `PROMOTION_READ_ONLY` — просмотр информации о продвижении товаров. * `FINANCE_AND_ACCOUNTING` — просмотр финансовой информации и отчётности. * `COMMUNICATION` — общение с покупателями. * `SETTINGS_MANAGEMENT` — настройка магазинов. * `SUPPLIES_MANAGEMENT_READ_ONLY` — получение информации по FBY-заявкам.
type ApiKeyScopeType string

// List of ApiKeyScopeType
const (
	ALL_METHODS                              ApiKeyScopeType = "ALL_METHODS"
	ALL_METHODS_READ_ONLY                    ApiKeyScopeType = "ALL_METHODS_READ_ONLY"
	INVENTORY_AND_ORDER_PROCESSING           ApiKeyScopeType = "INVENTORY_AND_ORDER_PROCESSING"
	INVENTORY_AND_ORDER_PROCESSING_READ_ONLY ApiKeyScopeType = "INVENTORY_AND_ORDER_PROCESSING_READ_ONLY"
	PRICING                                  ApiKeyScopeType = "PRICING"
	PRICING_READ_ONLY                        ApiKeyScopeType = "PRICING_READ_ONLY"
	OFFERS_AND_CARDS_MANAGEMENT              ApiKeyScopeType = "OFFERS_AND_CARDS_MANAGEMENT"
	OFFERS_AND_CARDS_MANAGEMENT_READ_ONLY    ApiKeyScopeType = "OFFERS_AND_CARDS_MANAGEMENT_READ_ONLY"
	PROMOTION                                ApiKeyScopeType = "PROMOTION"
	PROMOTION_READ_ONLY                      ApiKeyScopeType = "PROMOTION_READ_ONLY"
	FINANCE_AND_ACCOUNTING                   ApiKeyScopeType = "FINANCE_AND_ACCOUNTING"
	COMMUNICATION                            ApiKeyScopeType = "COMMUNICATION"
	SETTINGS_MANAGEMENT                      ApiKeyScopeType = "SETTINGS_MANAGEMENT"
	SUPPLIES_MANAGEMENT_READ_ONLY            ApiKeyScopeType = "SUPPLIES_MANAGEMENT_READ_ONLY"
)

// All allowed values of ApiKeyScopeType enum
var AllowedApiKeyScopeTypeEnumValues = []ApiKeyScopeType{
	"ALL_METHODS",
	"ALL_METHODS_READ_ONLY",
	"INVENTORY_AND_ORDER_PROCESSING",
	"INVENTORY_AND_ORDER_PROCESSING_READ_ONLY",
	"PRICING",
	"PRICING_READ_ONLY",
	"OFFERS_AND_CARDS_MANAGEMENT",
	"OFFERS_AND_CARDS_MANAGEMENT_READ_ONLY",
	"PROMOTION",
	"PROMOTION_READ_ONLY",
	"FINANCE_AND_ACCOUNTING",
	"COMMUNICATION",
	"SETTINGS_MANAGEMENT",
	"SUPPLIES_MANAGEMENT_READ_ONLY",
}

func (v *ApiKeyScopeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiKeyScopeType(value)
	for _, existing := range AllowedApiKeyScopeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiKeyScopeType", value)
}

// NewApiKeyScopeTypeFromValue returns a pointer to a valid ApiKeyScopeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiKeyScopeTypeFromValue(v string) (*ApiKeyScopeType, error) {
	ev := ApiKeyScopeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiKeyScopeType: valid values are %v", v, AllowedApiKeyScopeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiKeyScopeType) IsValid() bool {
	for _, existing := range AllowedApiKeyScopeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiKeyScopeType value
func (v ApiKeyScopeType) Ptr() *ApiKeyScopeType {
	return &v
}

type NullableApiKeyScopeType struct {
	value *ApiKeyScopeType
	isSet bool
}

func (v NullableApiKeyScopeType) Get() *ApiKeyScopeType {
	return v.value
}

func (v *NullableApiKeyScopeType) Set(val *ApiKeyScopeType) {
	v.value = val
	v.isSet = true
}

func (v NullableApiKeyScopeType) IsSet() bool {
	return v.isSet
}

func (v *NullableApiKeyScopeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiKeyScopeType(val *ApiKeyScopeType) *NullableApiKeyScopeType {
	return &NullableApiKeyScopeType{value: val, isSet: true}
}

func (v NullableApiKeyScopeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiKeyScopeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
