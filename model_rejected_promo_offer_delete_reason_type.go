/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RejectedPromoOfferDeleteReasonType Описание ошибки:  * `OFFER_DOES_NOT_EXIST` — в кабинете нет товара с таким SKU. 
type RejectedPromoOfferDeleteReasonType string

// List of RejectedPromoOfferDeleteReasonType
const (
	OFFER_DOES_NOT_EXIST RejectedPromoOfferDeleteReasonType = "OFFER_DOES_NOT_EXIST"
)

// All allowed values of RejectedPromoOfferDeleteReasonType enum
var AllowedRejectedPromoOfferDeleteReasonTypeEnumValues = []RejectedPromoOfferDeleteReasonType{
	"OFFER_DOES_NOT_EXIST",
}

func (v *RejectedPromoOfferDeleteReasonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RejectedPromoOfferDeleteReasonType(value)
	for _, existing := range AllowedRejectedPromoOfferDeleteReasonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RejectedPromoOfferDeleteReasonType", value)
}

// NewRejectedPromoOfferDeleteReasonTypeFromValue returns a pointer to a valid RejectedPromoOfferDeleteReasonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRejectedPromoOfferDeleteReasonTypeFromValue(v string) (*RejectedPromoOfferDeleteReasonType, error) {
	ev := RejectedPromoOfferDeleteReasonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RejectedPromoOfferDeleteReasonType: valid values are %v", v, AllowedRejectedPromoOfferDeleteReasonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RejectedPromoOfferDeleteReasonType) IsValid() bool {
	for _, existing := range AllowedRejectedPromoOfferDeleteReasonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RejectedPromoOfferDeleteReasonType value
func (v RejectedPromoOfferDeleteReasonType) Ptr() *RejectedPromoOfferDeleteReasonType {
	return &v
}

type NullableRejectedPromoOfferDeleteReasonType struct {
	value *RejectedPromoOfferDeleteReasonType
	isSet bool
}

func (v NullableRejectedPromoOfferDeleteReasonType) Get() *RejectedPromoOfferDeleteReasonType {
	return v.value
}

func (v *NullableRejectedPromoOfferDeleteReasonType) Set(val *RejectedPromoOfferDeleteReasonType) {
	v.value = val
	v.isSet = true
}

func (v NullableRejectedPromoOfferDeleteReasonType) IsSet() bool {
	return v.isSet
}

func (v *NullableRejectedPromoOfferDeleteReasonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRejectedPromoOfferDeleteReasonType(val *RejectedPromoOfferDeleteReasonType) *NullableRejectedPromoOfferDeleteReasonType {
	return &NullableRejectedPromoOfferDeleteReasonType{value: val, isSet: true}
}

func (v NullableRejectedPromoOfferDeleteReasonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRejectedPromoOfferDeleteReasonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

