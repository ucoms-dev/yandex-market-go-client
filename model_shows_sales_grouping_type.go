/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ShowsSalesGroupingType Группировка данных отчета. Возможные значения: * `CATEGORIES` — группировка по категориям. * `OFFERS` — группировка по товарам. 
type ShowsSalesGroupingType string

// List of ShowsSalesGroupingType
const (
	CATEGORIES ShowsSalesGroupingType = "CATEGORIES"
	OFFERS ShowsSalesGroupingType = "OFFERS"
)

// All allowed values of ShowsSalesGroupingType enum
var AllowedShowsSalesGroupingTypeEnumValues = []ShowsSalesGroupingType{
	"CATEGORIES",
	"OFFERS",
}

func (v *ShowsSalesGroupingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShowsSalesGroupingType(value)
	for _, existing := range AllowedShowsSalesGroupingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShowsSalesGroupingType", value)
}

// NewShowsSalesGroupingTypeFromValue returns a pointer to a valid ShowsSalesGroupingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShowsSalesGroupingTypeFromValue(v string) (*ShowsSalesGroupingType, error) {
	ev := ShowsSalesGroupingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShowsSalesGroupingType: valid values are %v", v, AllowedShowsSalesGroupingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShowsSalesGroupingType) IsValid() bool {
	for _, existing := range AllowedShowsSalesGroupingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShowsSalesGroupingType value
func (v ShowsSalesGroupingType) Ptr() *ShowsSalesGroupingType {
	return &v
}

type NullableShowsSalesGroupingType struct {
	value *ShowsSalesGroupingType
	isSet bool
}

func (v NullableShowsSalesGroupingType) Get() *ShowsSalesGroupingType {
	return v.value
}

func (v *NullableShowsSalesGroupingType) Set(val *ShowsSalesGroupingType) {
	v.value = val
	v.isSet = true
}

func (v NullableShowsSalesGroupingType) IsSet() bool {
	return v.isSet
}

func (v *NullableShowsSalesGroupingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShowsSalesGroupingType(val *ShowsSalesGroupingType) *NullableShowsSalesGroupingType {
	return &NullableShowsSalesGroupingType{value: val, isSet: true}
}

func (v NullableShowsSalesGroupingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShowsSalesGroupingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

