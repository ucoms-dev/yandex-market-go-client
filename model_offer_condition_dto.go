/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OfferConditionDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferConditionDTO{}

// OfferConditionDTO Состояние уцененного товара. 
type OfferConditionDTO struct {
	Type *OfferConditionType `json:"type,omitempty"`
	Quality *OfferConditionQualityType `json:"quality,omitempty"`
	// Описание товара. Подробно опишите дефекты, насколько они заметны и где их искать. 
	Reason *string `json:"reason,omitempty"`
}

// NewOfferConditionDTO instantiates a new OfferConditionDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferConditionDTO() *OfferConditionDTO {
	this := OfferConditionDTO{}
	return &this
}

// NewOfferConditionDTOWithDefaults instantiates a new OfferConditionDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferConditionDTOWithDefaults() *OfferConditionDTO {
	this := OfferConditionDTO{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OfferConditionDTO) GetType() OfferConditionType {
	if o == nil || IsNil(o.Type) {
		var ret OfferConditionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferConditionDTO) GetTypeOk() (*OfferConditionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OfferConditionDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given OfferConditionType and assigns it to the Type field.
func (o *OfferConditionDTO) SetType(v OfferConditionType) {
	o.Type = &v
}

// GetQuality returns the Quality field value if set, zero value otherwise.
func (o *OfferConditionDTO) GetQuality() OfferConditionQualityType {
	if o == nil || IsNil(o.Quality) {
		var ret OfferConditionQualityType
		return ret
	}
	return *o.Quality
}

// GetQualityOk returns a tuple with the Quality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferConditionDTO) GetQualityOk() (*OfferConditionQualityType, bool) {
	if o == nil || IsNil(o.Quality) {
		return nil, false
	}
	return o.Quality, true
}

// HasQuality returns a boolean if a field has been set.
func (o *OfferConditionDTO) HasQuality() bool {
	if o != nil && !IsNil(o.Quality) {
		return true
	}

	return false
}

// SetQuality gets a reference to the given OfferConditionQualityType and assigns it to the Quality field.
func (o *OfferConditionDTO) SetQuality(v OfferConditionQualityType) {
	o.Quality = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *OfferConditionDTO) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferConditionDTO) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *OfferConditionDTO) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *OfferConditionDTO) SetReason(v string) {
	o.Reason = &v
}

func (o OfferConditionDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferConditionDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Quality) {
		toSerialize["quality"] = o.Quality
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableOfferConditionDTO struct {
	value *OfferConditionDTO
	isSet bool
}

func (v NullableOfferConditionDTO) Get() *OfferConditionDTO {
	return v.value
}

func (v *NullableOfferConditionDTO) Set(val *OfferConditionDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferConditionDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferConditionDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferConditionDTO(val *OfferConditionDTO) *NullableOfferConditionDTO {
	return &NullableOfferConditionDTO{value: val, isSet: true}
}

func (v NullableOfferConditionDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferConditionDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


