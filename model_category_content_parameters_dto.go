/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CategoryContentParametersDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CategoryContentParametersDTO{}

// CategoryContentParametersDTO Информация о параметрах категории.
type CategoryContentParametersDTO struct {
	// Идентификатор категории на Маркете.  При изменении категории убедитесь, что характеристики товара и их значения в параметре `parameterValues` вы передаете для новой категории.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md).
	CategoryId int32 `json:"categoryId"`
	// Список характеристик.
	Parameters []CategoryParameterDTO `json:"parameters,omitempty"`
}

type _CategoryContentParametersDTO CategoryContentParametersDTO

// NewCategoryContentParametersDTO instantiates a new CategoryContentParametersDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryContentParametersDTO(categoryId int32) *CategoryContentParametersDTO {
	this := CategoryContentParametersDTO{}
	this.CategoryId = categoryId
	return &this
}

// NewCategoryContentParametersDTOWithDefaults instantiates a new CategoryContentParametersDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryContentParametersDTOWithDefaults() *CategoryContentParametersDTO {
	this := CategoryContentParametersDTO{}
	return &this
}

// GetCategoryId returns the CategoryId field value
func (o *CategoryContentParametersDTO) GetCategoryId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value
// and a boolean to check if the value has been set.
func (o *CategoryContentParametersDTO) GetCategoryIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryId, true
}

// SetCategoryId sets field value
func (o *CategoryContentParametersDTO) SetCategoryId(v int32) {
	o.CategoryId = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CategoryContentParametersDTO) GetParameters() []CategoryParameterDTO {
	if o == nil {
		var ret []CategoryParameterDTO
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CategoryContentParametersDTO) GetParametersOk() ([]CategoryParameterDTO, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *CategoryContentParametersDTO) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []CategoryParameterDTO and assigns it to the Parameters field.
func (o *CategoryContentParametersDTO) SetParameters(v []CategoryParameterDTO) {
	o.Parameters = v
}

func (o CategoryContentParametersDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CategoryContentParametersDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["categoryId"] = o.CategoryId
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

func (o *CategoryContentParametersDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"categoryId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCategoryContentParametersDTO := _CategoryContentParametersDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCategoryContentParametersDTO)

	if err != nil {
		return err
	}

	*o = CategoryContentParametersDTO(varCategoryContentParametersDTO)

	return err
}

type NullableCategoryContentParametersDTO struct {
	value *CategoryContentParametersDTO
	isSet bool
}

func (v NullableCategoryContentParametersDTO) Get() *CategoryContentParametersDTO {
	return v.value
}

func (v *NullableCategoryContentParametersDTO) Set(val *CategoryContentParametersDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryContentParametersDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryContentParametersDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryContentParametersDTO(val *CategoryContentParametersDTO) *NullableCategoryContentParametersDTO {
	return &NullableCategoryContentParametersDTO{value: val, isSet: true}
}

func (v NullableCategoryContentParametersDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryContentParametersDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
