/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OfferCardDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferCardDTO{}

// OfferCardDTO Информация о состоянии карточки товара.  Если поле `mapping` отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут.
type OfferCardDTO struct {
	// Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
	OfferId string         `json:"offerId" validate:"regexp=^(?=.*\\\\S.*)[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`
	Mapping *GetMappingDTO `json:"mapping,omitempty"`
	// Список характеристик с их значениями.
	ParameterValues []ParameterValueDTO  `json:"parameterValues,omitempty"`
	CardStatus      *OfferCardStatusType `json:"cardStatus,omitempty"`
	// Рейтинг карточки.
	ContentRating *int32 `json:"contentRating,omitempty"`
	// Средний рейтинг карточки у товаров той категории, которая указана в `marketCategoryId`.
	AverageContentRating *int32                      `json:"averageContentRating,omitempty"`
	ContentRatingStatus  *OfferCardContentStatusType `json:"contentRatingStatus,omitempty"`
	// Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку.
	Recommendations []OfferCardRecommendationDTO `json:"recommendations,omitempty"`
	// Ошибки в контенте, препятствующие размещению товара на витрине.
	Errors []OfferErrorDTO `json:"errors,omitempty"`
	// Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.
	Warnings []OfferErrorDTO `json:"warnings,omitempty"`
}

type _OfferCardDTO OfferCardDTO

// NewOfferCardDTO instantiates a new OfferCardDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferCardDTO(offerId string) *OfferCardDTO {
	this := OfferCardDTO{}
	this.OfferId = offerId
	return &this
}

// NewOfferCardDTOWithDefaults instantiates a new OfferCardDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferCardDTOWithDefaults() *OfferCardDTO {
	this := OfferCardDTO{}
	return &this
}

// GetOfferId returns the OfferId field value
func (o *OfferCardDTO) GetOfferId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value
// and a boolean to check if the value has been set.
func (o *OfferCardDTO) GetOfferIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfferId, true
}

// SetOfferId sets field value
func (o *OfferCardDTO) SetOfferId(v string) {
	o.OfferId = v
}

// GetMapping returns the Mapping field value if set, zero value otherwise.
func (o *OfferCardDTO) GetMapping() GetMappingDTO {
	if o == nil || IsNil(o.Mapping) {
		var ret GetMappingDTO
		return ret
	}
	return *o.Mapping
}

// GetMappingOk returns a tuple with the Mapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferCardDTO) GetMappingOk() (*GetMappingDTO, bool) {
	if o == nil || IsNil(o.Mapping) {
		return nil, false
	}
	return o.Mapping, true
}

// HasMapping returns a boolean if a field has been set.
func (o *OfferCardDTO) HasMapping() bool {
	if o != nil && !IsNil(o.Mapping) {
		return true
	}

	return false
}

// SetMapping gets a reference to the given GetMappingDTO and assigns it to the Mapping field.
func (o *OfferCardDTO) SetMapping(v GetMappingDTO) {
	o.Mapping = &v
}

// GetParameterValues returns the ParameterValues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OfferCardDTO) GetParameterValues() []ParameterValueDTO {
	if o == nil {
		var ret []ParameterValueDTO
		return ret
	}
	return o.ParameterValues
}

// GetParameterValuesOk returns a tuple with the ParameterValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OfferCardDTO) GetParameterValuesOk() ([]ParameterValueDTO, bool) {
	if o == nil || IsNil(o.ParameterValues) {
		return nil, false
	}
	return o.ParameterValues, true
}

// HasParameterValues returns a boolean if a field has been set.
func (o *OfferCardDTO) HasParameterValues() bool {
	if o != nil && !IsNil(o.ParameterValues) {
		return true
	}

	return false
}

// SetParameterValues gets a reference to the given []ParameterValueDTO and assigns it to the ParameterValues field.
func (o *OfferCardDTO) SetParameterValues(v []ParameterValueDTO) {
	o.ParameterValues = v
}

// GetCardStatus returns the CardStatus field value if set, zero value otherwise.
func (o *OfferCardDTO) GetCardStatus() OfferCardStatusType {
	if o == nil || IsNil(o.CardStatus) {
		var ret OfferCardStatusType
		return ret
	}
	return *o.CardStatus
}

// GetCardStatusOk returns a tuple with the CardStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferCardDTO) GetCardStatusOk() (*OfferCardStatusType, bool) {
	if o == nil || IsNil(o.CardStatus) {
		return nil, false
	}
	return o.CardStatus, true
}

// HasCardStatus returns a boolean if a field has been set.
func (o *OfferCardDTO) HasCardStatus() bool {
	if o != nil && !IsNil(o.CardStatus) {
		return true
	}

	return false
}

// SetCardStatus gets a reference to the given OfferCardStatusType and assigns it to the CardStatus field.
func (o *OfferCardDTO) SetCardStatus(v OfferCardStatusType) {
	o.CardStatus = &v
}

// GetContentRating returns the ContentRating field value if set, zero value otherwise.
func (o *OfferCardDTO) GetContentRating() int32 {
	if o == nil || IsNil(o.ContentRating) {
		var ret int32
		return ret
	}
	return *o.ContentRating
}

// GetContentRatingOk returns a tuple with the ContentRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferCardDTO) GetContentRatingOk() (*int32, bool) {
	if o == nil || IsNil(o.ContentRating) {
		return nil, false
	}
	return o.ContentRating, true
}

// HasContentRating returns a boolean if a field has been set.
func (o *OfferCardDTO) HasContentRating() bool {
	if o != nil && !IsNil(o.ContentRating) {
		return true
	}

	return false
}

// SetContentRating gets a reference to the given int32 and assigns it to the ContentRating field.
func (o *OfferCardDTO) SetContentRating(v int32) {
	o.ContentRating = &v
}

// GetAverageContentRating returns the AverageContentRating field value if set, zero value otherwise.
func (o *OfferCardDTO) GetAverageContentRating() int32 {
	if o == nil || IsNil(o.AverageContentRating) {
		var ret int32
		return ret
	}
	return *o.AverageContentRating
}

// GetAverageContentRatingOk returns a tuple with the AverageContentRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferCardDTO) GetAverageContentRatingOk() (*int32, bool) {
	if o == nil || IsNil(o.AverageContentRating) {
		return nil, false
	}
	return o.AverageContentRating, true
}

// HasAverageContentRating returns a boolean if a field has been set.
func (o *OfferCardDTO) HasAverageContentRating() bool {
	if o != nil && !IsNil(o.AverageContentRating) {
		return true
	}

	return false
}

// SetAverageContentRating gets a reference to the given int32 and assigns it to the AverageContentRating field.
func (o *OfferCardDTO) SetAverageContentRating(v int32) {
	o.AverageContentRating = &v
}

// GetContentRatingStatus returns the ContentRatingStatus field value if set, zero value otherwise.
func (o *OfferCardDTO) GetContentRatingStatus() OfferCardContentStatusType {
	if o == nil || IsNil(o.ContentRatingStatus) {
		var ret OfferCardContentStatusType
		return ret
	}
	return *o.ContentRatingStatus
}

// GetContentRatingStatusOk returns a tuple with the ContentRatingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferCardDTO) GetContentRatingStatusOk() (*OfferCardContentStatusType, bool) {
	if o == nil || IsNil(o.ContentRatingStatus) {
		return nil, false
	}
	return o.ContentRatingStatus, true
}

// HasContentRatingStatus returns a boolean if a field has been set.
func (o *OfferCardDTO) HasContentRatingStatus() bool {
	if o != nil && !IsNil(o.ContentRatingStatus) {
		return true
	}

	return false
}

// SetContentRatingStatus gets a reference to the given OfferCardContentStatusType and assigns it to the ContentRatingStatus field.
func (o *OfferCardDTO) SetContentRatingStatus(v OfferCardContentStatusType) {
	o.ContentRatingStatus = &v
}

// GetRecommendations returns the Recommendations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OfferCardDTO) GetRecommendations() []OfferCardRecommendationDTO {
	if o == nil {
		var ret []OfferCardRecommendationDTO
		return ret
	}
	return o.Recommendations
}

// GetRecommendationsOk returns a tuple with the Recommendations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OfferCardDTO) GetRecommendationsOk() ([]OfferCardRecommendationDTO, bool) {
	if o == nil || IsNil(o.Recommendations) {
		return nil, false
	}
	return o.Recommendations, true
}

// HasRecommendations returns a boolean if a field has been set.
func (o *OfferCardDTO) HasRecommendations() bool {
	if o != nil && !IsNil(o.Recommendations) {
		return true
	}

	return false
}

// SetRecommendations gets a reference to the given []OfferCardRecommendationDTO and assigns it to the Recommendations field.
func (o *OfferCardDTO) SetRecommendations(v []OfferCardRecommendationDTO) {
	o.Recommendations = v
}

// GetErrors returns the Errors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OfferCardDTO) GetErrors() []OfferErrorDTO {
	if o == nil {
		var ret []OfferErrorDTO
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OfferCardDTO) GetErrorsOk() ([]OfferErrorDTO, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *OfferCardDTO) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []OfferErrorDTO and assigns it to the Errors field.
func (o *OfferCardDTO) SetErrors(v []OfferErrorDTO) {
	o.Errors = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OfferCardDTO) GetWarnings() []OfferErrorDTO {
	if o == nil {
		var ret []OfferErrorDTO
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OfferCardDTO) GetWarningsOk() ([]OfferErrorDTO, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *OfferCardDTO) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []OfferErrorDTO and assigns it to the Warnings field.
func (o *OfferCardDTO) SetWarnings(v []OfferErrorDTO) {
	o.Warnings = v
}

func (o OfferCardDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferCardDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["offerId"] = o.OfferId
	if !IsNil(o.Mapping) {
		toSerialize["mapping"] = o.Mapping
	}
	if o.ParameterValues != nil {
		toSerialize["parameterValues"] = o.ParameterValues
	}
	if !IsNil(o.CardStatus) {
		toSerialize["cardStatus"] = o.CardStatus
	}
	if !IsNil(o.ContentRating) {
		toSerialize["contentRating"] = o.ContentRating
	}
	if !IsNil(o.AverageContentRating) {
		toSerialize["averageContentRating"] = o.AverageContentRating
	}
	if !IsNil(o.ContentRatingStatus) {
		toSerialize["contentRatingStatus"] = o.ContentRatingStatus
	}
	if o.Recommendations != nil {
		toSerialize["recommendations"] = o.Recommendations
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

func (o *OfferCardDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"offerId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOfferCardDTO := _OfferCardDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOfferCardDTO)

	if err != nil {
		return err
	}

	*o = OfferCardDTO(varOfferCardDTO)

	return err
}

type NullableOfferCardDTO struct {
	value *OfferCardDTO
	isSet bool
}

func (v NullableOfferCardDTO) Get() *OfferCardDTO {
	return v.value
}

func (v *NullableOfferCardDTO) Set(val *OfferCardDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferCardDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferCardDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferCardDTO(val *OfferCardDTO) *NullableOfferCardDTO {
	return &NullableOfferCardDTO{value: val, isSet: true}
}

func (v NullableOfferCardDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferCardDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
