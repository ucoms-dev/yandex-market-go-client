/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SupplyRequestReferenceType Тип связи между двумя заявками:  * `VIRTUAL_DISTRIBUTION` — [мультипоставка](*multisupply).  * `WITHDRAW` — вывоз непринятых товаров.      Подтипы заявки: `DEFAULT`, `XDOC`, `VIRTUAL_DISTRIBUTION_CENTER_CHILD` и `ANOMALY_WITHDRAW`.  * `UTILIZATION` — утилизация непринятых товаров.      Подтипы заявки: `DEFAULT`, `XDOC`, `VIRTUAL_DISTRIBUTION_CENTER_CHILD` и `FORCE_PLAN_ANOMALY_PER_SUPPLY`.  * `ADDITIONAL_SUPPLY` — дополнительная поставка.      Подтипы заявки: `DEFAULT`, `XDOC`, `VIRTUAL_DISTRIBUTION_CENTER_CHILD` и `ADDITIONAL_SUPPLY`. 
type SupplyRequestReferenceType string

// List of SupplyRequestReferenceType
const (
	VIRTUAL_DISTRIBUTION SupplyRequestReferenceType = "VIRTUAL_DISTRIBUTION"
	WITHDRAW SupplyRequestReferenceType = "WITHDRAW"
	UTILIZATION SupplyRequestReferenceType = "UTILIZATION"
	ADDITIONAL_SUPPLY SupplyRequestReferenceType = "ADDITIONAL_SUPPLY"
)

// All allowed values of SupplyRequestReferenceType enum
var AllowedSupplyRequestReferenceTypeEnumValues = []SupplyRequestReferenceType{
	"VIRTUAL_DISTRIBUTION",
	"WITHDRAW",
	"UTILIZATION",
	"ADDITIONAL_SUPPLY",
}

func (v *SupplyRequestReferenceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SupplyRequestReferenceType(value)
	for _, existing := range AllowedSupplyRequestReferenceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SupplyRequestReferenceType", value)
}

// NewSupplyRequestReferenceTypeFromValue returns a pointer to a valid SupplyRequestReferenceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSupplyRequestReferenceTypeFromValue(v string) (*SupplyRequestReferenceType, error) {
	ev := SupplyRequestReferenceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SupplyRequestReferenceType: valid values are %v", v, AllowedSupplyRequestReferenceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SupplyRequestReferenceType) IsValid() bool {
	for _, existing := range AllowedSupplyRequestReferenceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SupplyRequestReferenceType value
func (v SupplyRequestReferenceType) Ptr() *SupplyRequestReferenceType {
	return &v
}

type NullableSupplyRequestReferenceType struct {
	value *SupplyRequestReferenceType
	isSet bool
}

func (v NullableSupplyRequestReferenceType) Get() *SupplyRequestReferenceType {
	return v.value
}

func (v *NullableSupplyRequestReferenceType) Set(val *SupplyRequestReferenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyRequestReferenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyRequestReferenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyRequestReferenceType(val *SupplyRequestReferenceType) *NullableSupplyRequestReferenceType {
	return &NullableSupplyRequestReferenceType{value: val, isSet: true}
}

func (v NullableSupplyRequestReferenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyRequestReferenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

