/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetTokenInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetTokenInfoResponse{}

// GetTokenInfoResponse Ответ на запрос получения информации об авторизационном токене.
type GetTokenInfoResponse struct {
	Status *ApiResponseStatusType `json:"status,omitempty"`
	Result TokenDTO `json:"result"`
}

type _GetTokenInfoResponse GetTokenInfoResponse

// NewGetTokenInfoResponse instantiates a new GetTokenInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetTokenInfoResponse(result TokenDTO) *GetTokenInfoResponse {
	this := GetTokenInfoResponse{}
	this.Result = result
	return &this
}

// NewGetTokenInfoResponseWithDefaults instantiates a new GetTokenInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTokenInfoResponseWithDefaults() *GetTokenInfoResponse {
	this := GetTokenInfoResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GetTokenInfoResponse) GetStatus() ApiResponseStatusType {
	if o == nil || IsNil(o.Status) {
		var ret ApiResponseStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTokenInfoResponse) GetStatusOk() (*ApiResponseStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GetTokenInfoResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ApiResponseStatusType and assigns it to the Status field.
func (o *GetTokenInfoResponse) SetStatus(v ApiResponseStatusType) {
	o.Status = &v
}

// GetResult returns the Result field value
func (o *GetTokenInfoResponse) GetResult() TokenDTO {
	if o == nil {
		var ret TokenDTO
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *GetTokenInfoResponse) GetResultOk() (*TokenDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *GetTokenInfoResponse) SetResult(v TokenDTO) {
	o.Result = v
}

func (o GetTokenInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetTokenInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["result"] = o.Result
	return toSerialize, nil
}

func (o *GetTokenInfoResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetTokenInfoResponse := _GetTokenInfoResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetTokenInfoResponse)

	if err != nil {
		return err
	}

	*o = GetTokenInfoResponse(varGetTokenInfoResponse)

	return err
}

type NullableGetTokenInfoResponse struct {
	value *GetTokenInfoResponse
	isSet bool
}

func (v NullableGetTokenInfoResponse) Get() *GetTokenInfoResponse {
	return v.value
}

func (v *NullableGetTokenInfoResponse) Set(val *GetTokenInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTokenInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTokenInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTokenInfoResponse(val *GetTokenInfoResponse) *NullableGetTokenInfoResponse {
	return &NullableGetTokenInfoResponse{value: val, isSet: true}
}

func (v NullableGetTokenInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTokenInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


