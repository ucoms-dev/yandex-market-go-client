/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ChatMessageDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatMessageDTO{}

// ChatMessageDTO Информация о сообщении.
type ChatMessageDTO struct {
	// Идентификатор сообщения.
	MessageId int64 `json:"messageId"`
	// Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC.
	CreatedAt time.Time             `json:"createdAt"`
	Sender    ChatMessageSenderType `json:"sender"`
	// Текст сообщения.  Необязательный параметр, если возвращается параметр `payload`.
	Message *string `json:"message,omitempty"`
	// Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр `message`.
	Payload []ChatMessagePayloadDTO `json:"payload,omitempty"`
}

type _ChatMessageDTO ChatMessageDTO

// NewChatMessageDTO instantiates a new ChatMessageDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatMessageDTO(messageId int64, createdAt time.Time, sender ChatMessageSenderType) *ChatMessageDTO {
	this := ChatMessageDTO{}
	this.MessageId = messageId
	this.CreatedAt = createdAt
	this.Sender = sender
	return &this
}

// NewChatMessageDTOWithDefaults instantiates a new ChatMessageDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatMessageDTOWithDefaults() *ChatMessageDTO {
	this := ChatMessageDTO{}
	return &this
}

// GetMessageId returns the MessageId field value
func (o *ChatMessageDTO) GetMessageId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value
// and a boolean to check if the value has been set.
func (o *ChatMessageDTO) GetMessageIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageId, true
}

// SetMessageId sets field value
func (o *ChatMessageDTO) SetMessageId(v int64) {
	o.MessageId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ChatMessageDTO) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ChatMessageDTO) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ChatMessageDTO) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetSender returns the Sender field value
func (o *ChatMessageDTO) GetSender() ChatMessageSenderType {
	if o == nil {
		var ret ChatMessageSenderType
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *ChatMessageDTO) GetSenderOk() (*ChatMessageSenderType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *ChatMessageDTO) SetSender(v ChatMessageSenderType) {
	o.Sender = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ChatMessageDTO) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessageDTO) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ChatMessageDTO) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ChatMessageDTO) SetMessage(v string) {
	o.Message = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatMessageDTO) GetPayload() []ChatMessagePayloadDTO {
	if o == nil {
		var ret []ChatMessagePayloadDTO
		return ret
	}
	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatMessageDTO) GetPayloadOk() ([]ChatMessagePayloadDTO, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *ChatMessageDTO) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given []ChatMessagePayloadDTO and assigns it to the Payload field.
func (o *ChatMessageDTO) SetPayload(v []ChatMessagePayloadDTO) {
	o.Payload = v
}

func (o ChatMessageDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatMessageDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["messageId"] = o.MessageId
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["sender"] = o.Sender
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}
	return toSerialize, nil
}

func (o *ChatMessageDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"messageId",
		"createdAt",
		"sender",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatMessageDTO := _ChatMessageDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChatMessageDTO)

	if err != nil {
		return err
	}

	*o = ChatMessageDTO(varChatMessageDTO)

	return err
}

type NullableChatMessageDTO struct {
	value *ChatMessageDTO
	isSet bool
}

func (v NullableChatMessageDTO) Get() *ChatMessageDTO {
	return v.value
}

func (v *NullableChatMessageDTO) Set(val *ChatMessageDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableChatMessageDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableChatMessageDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatMessageDTO(val *ChatMessageDTO) *NullableChatMessageDTO {
	return &NullableChatMessageDTO{value: val, isSet: true}
}

func (v NullableChatMessageDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatMessageDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
