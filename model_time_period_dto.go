/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimePeriodDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimePeriodDTO{}

// TimePeriodDTO Временной отрезок с комментарием. Требования к содержанию комментария зависят от контекста использования параметра и указаны в описании поля, которое его содержит.
type TimePeriodDTO struct {
	// Продолжительность в указанных единицах.
	TimePeriod int32 `json:"timePeriod"`
	TimeUnit TimeUnitType `json:"timeUnit"`
	// Комментарий.
	Comment *string `json:"comment,omitempty"`
}

type _TimePeriodDTO TimePeriodDTO

// NewTimePeriodDTO instantiates a new TimePeriodDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimePeriodDTO(timePeriod int32, timeUnit TimeUnitType) *TimePeriodDTO {
	this := TimePeriodDTO{}
	this.TimePeriod = timePeriod
	this.TimeUnit = timeUnit
	return &this
}

// NewTimePeriodDTOWithDefaults instantiates a new TimePeriodDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimePeriodDTOWithDefaults() *TimePeriodDTO {
	this := TimePeriodDTO{}
	return &this
}

// GetTimePeriod returns the TimePeriod field value
func (o *TimePeriodDTO) GetTimePeriod() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimePeriod
}

// GetTimePeriodOk returns a tuple with the TimePeriod field value
// and a boolean to check if the value has been set.
func (o *TimePeriodDTO) GetTimePeriodOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimePeriod, true
}

// SetTimePeriod sets field value
func (o *TimePeriodDTO) SetTimePeriod(v int32) {
	o.TimePeriod = v
}

// GetTimeUnit returns the TimeUnit field value
func (o *TimePeriodDTO) GetTimeUnit() TimeUnitType {
	if o == nil {
		var ret TimeUnitType
		return ret
	}

	return o.TimeUnit
}

// GetTimeUnitOk returns a tuple with the TimeUnit field value
// and a boolean to check if the value has been set.
func (o *TimePeriodDTO) GetTimeUnitOk() (*TimeUnitType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeUnit, true
}

// SetTimeUnit sets field value
func (o *TimePeriodDTO) SetTimeUnit(v TimeUnitType) {
	o.TimeUnit = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *TimePeriodDTO) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimePeriodDTO) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *TimePeriodDTO) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *TimePeriodDTO) SetComment(v string) {
	o.Comment = &v
}

func (o TimePeriodDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimePeriodDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timePeriod"] = o.TimePeriod
	toSerialize["timeUnit"] = o.TimeUnit
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

func (o *TimePeriodDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timePeriod",
		"timeUnit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimePeriodDTO := _TimePeriodDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimePeriodDTO)

	if err != nil {
		return err
	}

	*o = TimePeriodDTO(varTimePeriodDTO)

	return err
}

type NullableTimePeriodDTO struct {
	value *TimePeriodDTO
	isSet bool
}

func (v NullableTimePeriodDTO) Get() *TimePeriodDTO {
	return v.value
}

func (v *NullableTimePeriodDTO) Set(val *TimePeriodDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableTimePeriodDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableTimePeriodDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimePeriodDTO(val *TimePeriodDTO) *NullableTimePeriodDTO {
	return &NullableTimePeriodDTO{value: val, isSet: true}
}

func (v NullableTimePeriodDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimePeriodDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


