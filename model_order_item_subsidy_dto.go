/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OrderItemSubsidyDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderItemSubsidyDTO{}

// OrderItemSubsidyDTO Общее вознаграждение партнеру за все скидки на товар:  * по промокодам, купонам и акциям; * по баллам Плюса.
type OrderItemSubsidyDTO struct {
	Type OrderItemSubsidyType `json:"type"`
	// Сумма субсидии.
	Amount float32 `json:"amount"`
}

type _OrderItemSubsidyDTO OrderItemSubsidyDTO

// NewOrderItemSubsidyDTO instantiates a new OrderItemSubsidyDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderItemSubsidyDTO(type_ OrderItemSubsidyType, amount float32) *OrderItemSubsidyDTO {
	this := OrderItemSubsidyDTO{}
	this.Type = type_
	this.Amount = amount
	return &this
}

// NewOrderItemSubsidyDTOWithDefaults instantiates a new OrderItemSubsidyDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderItemSubsidyDTOWithDefaults() *OrderItemSubsidyDTO {
	this := OrderItemSubsidyDTO{}
	return &this
}

// GetType returns the Type field value
func (o *OrderItemSubsidyDTO) GetType() OrderItemSubsidyType {
	if o == nil {
		var ret OrderItemSubsidyType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OrderItemSubsidyDTO) GetTypeOk() (*OrderItemSubsidyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OrderItemSubsidyDTO) SetType(v OrderItemSubsidyType) {
	o.Type = v
}

// GetAmount returns the Amount field value
func (o *OrderItemSubsidyDTO) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *OrderItemSubsidyDTO) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *OrderItemSubsidyDTO) SetAmount(v float32) {
	o.Amount = v
}

func (o OrderItemSubsidyDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderItemSubsidyDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

func (o *OrderItemSubsidyDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderItemSubsidyDTO := _OrderItemSubsidyDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varOrderItemSubsidyDTO)

	if err != nil {
		return err
	}

	*o = OrderItemSubsidyDTO(varOrderItemSubsidyDTO)

	return err
}

type NullableOrderItemSubsidyDTO struct {
	value *OrderItemSubsidyDTO
	isSet bool
}

func (v NullableOrderItemSubsidyDTO) Get() *OrderItemSubsidyDTO {
	return v.value
}

func (v *NullableOrderItemSubsidyDTO) Set(val *OrderItemSubsidyDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderItemSubsidyDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderItemSubsidyDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderItemSubsidyDTO(val *OrderItemSubsidyDTO) *NullableOrderItemSubsidyDTO {
	return &NullableOrderItemSubsidyDTO{value: val, isSet: true}
}

func (v NullableOrderItemSubsidyDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderItemSubsidyDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
