/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OrderSubsidyDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderSubsidyDTO{}

// OrderSubsidyDTO Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам, купонам и акциям; * по баллам Плюса; * по доставке (DBS).
type OrderSubsidyDTO struct {
	Type OrderSubsidyType `json:"type"`
	// Сумма субсидии.
	Amount float32 `json:"amount"`
}

type _OrderSubsidyDTO OrderSubsidyDTO

// NewOrderSubsidyDTO instantiates a new OrderSubsidyDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderSubsidyDTO(type_ OrderSubsidyType, amount float32) *OrderSubsidyDTO {
	this := OrderSubsidyDTO{}
	this.Type = type_
	this.Amount = amount
	return &this
}

// NewOrderSubsidyDTOWithDefaults instantiates a new OrderSubsidyDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderSubsidyDTOWithDefaults() *OrderSubsidyDTO {
	this := OrderSubsidyDTO{}
	return &this
}

// GetType returns the Type field value
func (o *OrderSubsidyDTO) GetType() OrderSubsidyType {
	if o == nil {
		var ret OrderSubsidyType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OrderSubsidyDTO) GetTypeOk() (*OrderSubsidyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OrderSubsidyDTO) SetType(v OrderSubsidyType) {
	o.Type = v
}

// GetAmount returns the Amount field value
func (o *OrderSubsidyDTO) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *OrderSubsidyDTO) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *OrderSubsidyDTO) SetAmount(v float32) {
	o.Amount = v
}

func (o OrderSubsidyDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderSubsidyDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

func (o *OrderSubsidyDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderSubsidyDTO := _OrderSubsidyDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varOrderSubsidyDTO)

	if err != nil {
		return err
	}

	*o = OrderSubsidyDTO(varOrderSubsidyDTO)

	return err
}

type NullableOrderSubsidyDTO struct {
	value *OrderSubsidyDTO
	isSet bool
}

func (v NullableOrderSubsidyDTO) Get() *OrderSubsidyDTO {
	return v.value
}

func (v *NullableOrderSubsidyDTO) Set(val *OrderSubsidyDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderSubsidyDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderSubsidyDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderSubsidyDTO(val *OrderSubsidyDTO) *NullableOrderSubsidyDTO {
	return &NullableOrderSubsidyDTO{value: val, isSet: true}
}

func (v NullableOrderSubsidyDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderSubsidyDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
