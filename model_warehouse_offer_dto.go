/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the WarehouseOfferDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WarehouseOfferDTO{}

// WarehouseOfferDTO Информация об остатках товара.
type WarehouseOfferDTO struct {
	// Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
	OfferId         string       `json:"offerId" validate:"regexp=^(?=.*\\\\S.*)[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`
	TurnoverSummary *TurnoverDTO `json:"turnoverSummary,omitempty"`
	// Информация об остатках.
	Stocks []WarehouseStockDTO `json:"stocks"`
	// Дата и время последнего обновления информации об остатках.  Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, `2023-11-21T00:42:42+03:00`.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type _WarehouseOfferDTO WarehouseOfferDTO

// NewWarehouseOfferDTO instantiates a new WarehouseOfferDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWarehouseOfferDTO(offerId string, stocks []WarehouseStockDTO) *WarehouseOfferDTO {
	this := WarehouseOfferDTO{}
	this.OfferId = offerId
	this.Stocks = stocks
	return &this
}

// NewWarehouseOfferDTOWithDefaults instantiates a new WarehouseOfferDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWarehouseOfferDTOWithDefaults() *WarehouseOfferDTO {
	this := WarehouseOfferDTO{}
	return &this
}

// GetOfferId returns the OfferId field value
func (o *WarehouseOfferDTO) GetOfferId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value
// and a boolean to check if the value has been set.
func (o *WarehouseOfferDTO) GetOfferIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfferId, true
}

// SetOfferId sets field value
func (o *WarehouseOfferDTO) SetOfferId(v string) {
	o.OfferId = v
}

// GetTurnoverSummary returns the TurnoverSummary field value if set, zero value otherwise.
func (o *WarehouseOfferDTO) GetTurnoverSummary() TurnoverDTO {
	if o == nil || IsNil(o.TurnoverSummary) {
		var ret TurnoverDTO
		return ret
	}
	return *o.TurnoverSummary
}

// GetTurnoverSummaryOk returns a tuple with the TurnoverSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseOfferDTO) GetTurnoverSummaryOk() (*TurnoverDTO, bool) {
	if o == nil || IsNil(o.TurnoverSummary) {
		return nil, false
	}
	return o.TurnoverSummary, true
}

// HasTurnoverSummary returns a boolean if a field has been set.
func (o *WarehouseOfferDTO) HasTurnoverSummary() bool {
	if o != nil && !IsNil(o.TurnoverSummary) {
		return true
	}

	return false
}

// SetTurnoverSummary gets a reference to the given TurnoverDTO and assigns it to the TurnoverSummary field.
func (o *WarehouseOfferDTO) SetTurnoverSummary(v TurnoverDTO) {
	o.TurnoverSummary = &v
}

// GetStocks returns the Stocks field value
func (o *WarehouseOfferDTO) GetStocks() []WarehouseStockDTO {
	if o == nil {
		var ret []WarehouseStockDTO
		return ret
	}

	return o.Stocks
}

// GetStocksOk returns a tuple with the Stocks field value
// and a boolean to check if the value has been set.
func (o *WarehouseOfferDTO) GetStocksOk() ([]WarehouseStockDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stocks, true
}

// SetStocks sets field value
func (o *WarehouseOfferDTO) SetStocks(v []WarehouseStockDTO) {
	o.Stocks = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *WarehouseOfferDTO) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseOfferDTO) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *WarehouseOfferDTO) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *WarehouseOfferDTO) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o WarehouseOfferDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WarehouseOfferDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["offerId"] = o.OfferId
	if !IsNil(o.TurnoverSummary) {
		toSerialize["turnoverSummary"] = o.TurnoverSummary
	}
	toSerialize["stocks"] = o.Stocks
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *WarehouseOfferDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"offerId",
		"stocks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWarehouseOfferDTO := _WarehouseOfferDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varWarehouseOfferDTO)

	if err != nil {
		return err
	}

	*o = WarehouseOfferDTO(varWarehouseOfferDTO)

	return err
}

type NullableWarehouseOfferDTO struct {
	value *WarehouseOfferDTO
	isSet bool
}

func (v NullableWarehouseOfferDTO) Get() *WarehouseOfferDTO {
	return v.value
}

func (v *NullableWarehouseOfferDTO) Set(val *WarehouseOfferDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableWarehouseOfferDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableWarehouseOfferDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarehouseOfferDTO(val *WarehouseOfferDTO) *NullableWarehouseOfferDTO {
	return &NullableWarehouseOfferDTO{value: val, isSet: true}
}

func (v NullableWarehouseOfferDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarehouseOfferDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
