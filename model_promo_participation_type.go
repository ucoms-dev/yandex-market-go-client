/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PromoParticipationType Какие акции вернутся:  * `PARTICIPATING_NOW` — текущие и будущие акции продавца.  * `PARTICIPATED` — завершенные акции продавца за последний год. Если за год их было меньше 15, в ответе придут 15 последних акций за все время. 
type PromoParticipationType string

// List of PromoParticipationType
const (
	PARTICIPATING_NOW PromoParticipationType = "PARTICIPATING_NOW"
	PARTICIPATED PromoParticipationType = "PARTICIPATED"
)

// All allowed values of PromoParticipationType enum
var AllowedPromoParticipationTypeEnumValues = []PromoParticipationType{
	"PARTICIPATING_NOW",
	"PARTICIPATED",
}

func (v *PromoParticipationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PromoParticipationType(value)
	for _, existing := range AllowedPromoParticipationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PromoParticipationType", value)
}

// NewPromoParticipationTypeFromValue returns a pointer to a valid PromoParticipationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPromoParticipationTypeFromValue(v string) (*PromoParticipationType, error) {
	ev := PromoParticipationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PromoParticipationType: valid values are %v", v, AllowedPromoParticipationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PromoParticipationType) IsValid() bool {
	for _, existing := range AllowedPromoParticipationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PromoParticipationType value
func (v PromoParticipationType) Ptr() *PromoParticipationType {
	return &v
}

type NullablePromoParticipationType struct {
	value *PromoParticipationType
	isSet bool
}

func (v NullablePromoParticipationType) Get() *PromoParticipationType {
	return v.value
}

func (v *NullablePromoParticipationType) Set(val *PromoParticipationType) {
	v.value = val
	v.isSet = true
}

func (v NullablePromoParticipationType) IsSet() bool {
	return v.isSet
}

func (v *NullablePromoParticipationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromoParticipationType(val *PromoParticipationType) *NullablePromoParticipationType {
	return &NullablePromoParticipationType{value: val, isSet: true}
}

func (v NullablePromoParticipationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromoParticipationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

