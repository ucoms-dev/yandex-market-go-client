/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CurrencyType Коды валют:  * `RUR` — российский рубль. * `UAH` — украинская гривна. * `BYR` — белорусский рубль. * `KZT` — казахстанский тенге. * `UZS` — узбекский сум.
type CurrencyType string

// List of CurrencyType
const (
	CurrencyType_RUR CurrencyType = "RUR"
	CurrencyType_USD CurrencyType = "USD"
	CurrencyType_EUR CurrencyType = "EUR"
	CurrencyType_UAH CurrencyType = "UAH"
	CurrencyType_AUD CurrencyType = "AUD"
	CurrencyType_GBP CurrencyType = "GBP"
	CurrencyType_BYR CurrencyType = "BYR"
	CurrencyType_BYN CurrencyType = "BYN"
	CurrencyType_DKK CurrencyType = "DKK"
	CurrencyType_ISK CurrencyType = "ISK"
	CurrencyType_KZT CurrencyType = "KZT"
	CurrencyType_CAD CurrencyType = "CAD"
	CurrencyType_CNY CurrencyType = "CNY"
	CurrencyType_NOK CurrencyType = "NOK"
	CurrencyType_XDR CurrencyType = "XDR"
	CurrencyType_SGD CurrencyType = "SGD"
	CurrencyType_TRY CurrencyType = "TRY"
	CurrencyType_SEK CurrencyType = "SEK"
	CurrencyType_CHF CurrencyType = "CHF"
	CurrencyType_JPY CurrencyType = "JPY"
	CurrencyType_AZN CurrencyType = "AZN"
	CurrencyType_ALL CurrencyType = "ALL"
	CurrencyType_DZD CurrencyType = "DZD"
	CurrencyType_AOA CurrencyType = "AOA"
	CurrencyType_ARS CurrencyType = "ARS"
	CurrencyType_AMD CurrencyType = "AMD"
	CurrencyType_AFN CurrencyType = "AFN"
	CurrencyType_BHD CurrencyType = "BHD"
	CurrencyType_BGN CurrencyType = "BGN"
	CurrencyType_BOB CurrencyType = "BOB"
	CurrencyType_BWP CurrencyType = "BWP"
	CurrencyType_BND CurrencyType = "BND"
	CurrencyType_BRL CurrencyType = "BRL"
	CurrencyType_BIF CurrencyType = "BIF"
	CurrencyType_HUF CurrencyType = "HUF"
	CurrencyType_VEF CurrencyType = "VEF"
	CurrencyType_KPW CurrencyType = "KPW"
	CurrencyType_VND CurrencyType = "VND"
	CurrencyType_GMD CurrencyType = "GMD"
	CurrencyType_GHS CurrencyType = "GHS"
	CurrencyType_GNF CurrencyType = "GNF"
	CurrencyType_HKD CurrencyType = "HKD"
	CurrencyType_GEL CurrencyType = "GEL"
	CurrencyType_AED CurrencyType = "AED"
	CurrencyType_EGP CurrencyType = "EGP"
	CurrencyType_ZMK CurrencyType = "ZMK"
	CurrencyType_ILS CurrencyType = "ILS"
	CurrencyType_INR CurrencyType = "INR"
	CurrencyType_IDR CurrencyType = "IDR"
	CurrencyType_JOD CurrencyType = "JOD"
	CurrencyType_IQD CurrencyType = "IQD"
	CurrencyType_IRR CurrencyType = "IRR"
	CurrencyType_YER CurrencyType = "YER"
	CurrencyType_QAR CurrencyType = "QAR"
	CurrencyType_KES CurrencyType = "KES"
	CurrencyType_KGS CurrencyType = "KGS"
	CurrencyType_COP CurrencyType = "COP"
	CurrencyType_CDF CurrencyType = "CDF"
	CurrencyType_CRC CurrencyType = "CRC"
	CurrencyType_KWD CurrencyType = "KWD"
	CurrencyType_CUP CurrencyType = "CUP"
	CurrencyType_LAK CurrencyType = "LAK"
	CurrencyType_LVL CurrencyType = "LVL"
	CurrencyType_SLL CurrencyType = "SLL"
	CurrencyType_LBP CurrencyType = "LBP"
	CurrencyType_LYD CurrencyType = "LYD"
	CurrencyType_SZL CurrencyType = "SZL"
	CurrencyType_LTL CurrencyType = "LTL"
	CurrencyType_MUR CurrencyType = "MUR"
	CurrencyType_MRO CurrencyType = "MRO"
	CurrencyType_MKD CurrencyType = "MKD"
	CurrencyType_MWK CurrencyType = "MWK"
	CurrencyType_MGA CurrencyType = "MGA"
	CurrencyType_MYR CurrencyType = "MYR"
	CurrencyType_MAD CurrencyType = "MAD"
	CurrencyType_MXN CurrencyType = "MXN"
	CurrencyType_MZN CurrencyType = "MZN"
	CurrencyType_MDL CurrencyType = "MDL"
	CurrencyType_MNT CurrencyType = "MNT"
	CurrencyType_NPR CurrencyType = "NPR"
	CurrencyType_NGN CurrencyType = "NGN"
	CurrencyType_NIO CurrencyType = "NIO"
	CurrencyType_NZD CurrencyType = "NZD"
	CurrencyType_OMR CurrencyType = "OMR"
	CurrencyType_PKR CurrencyType = "PKR"
	CurrencyType_PYG CurrencyType = "PYG"
	CurrencyType_PEN CurrencyType = "PEN"
	CurrencyType_PLN CurrencyType = "PLN"
	CurrencyType_KHR CurrencyType = "KHR"
	CurrencyType_SAR CurrencyType = "SAR"
	CurrencyType_RON CurrencyType = "RON"
	CurrencyType_SCR CurrencyType = "SCR"
	CurrencyType_SYP CurrencyType = "SYP"
	CurrencyType_SKK CurrencyType = "SKK"
	CurrencyType_SOS CurrencyType = "SOS"
	CurrencyType_SDG CurrencyType = "SDG"
	CurrencyType_SRD CurrencyType = "SRD"
	CurrencyType_TJS CurrencyType = "TJS"
	CurrencyType_THB CurrencyType = "THB"
	CurrencyType_TWD CurrencyType = "TWD"
	CurrencyType_BDT CurrencyType = "BDT"
	CurrencyType_TZS CurrencyType = "TZS"
	CurrencyType_TND CurrencyType = "TND"
	CurrencyType_TMM CurrencyType = "TMM"
	CurrencyType_UGX CurrencyType = "UGX"
	CurrencyType_UZS CurrencyType = "UZS"
	CurrencyType_UYU CurrencyType = "UYU"
	CurrencyType_PHP CurrencyType = "PHP"
	CurrencyType_DJF CurrencyType = "DJF"
	CurrencyType_XAF CurrencyType = "XAF"
	CurrencyType_XOF CurrencyType = "XOF"
	CurrencyType_HRK CurrencyType = "HRK"
	CurrencyType_CZK CurrencyType = "CZK"
	CurrencyType_CLP CurrencyType = "CLP"
	CurrencyType_LKR CurrencyType = "LKR"
	CurrencyType_EEK CurrencyType = "EEK"
	CurrencyType_ETB CurrencyType = "ETB"
	CurrencyType_RSD CurrencyType = "RSD"
	CurrencyType_ZAR CurrencyType = "ZAR"
	CurrencyType_KRW CurrencyType = "KRW"
	CurrencyType_NAD CurrencyType = "NAD"
	CurrencyType_TL  CurrencyType = "TL"
	CurrencyType_UE  CurrencyType = "UE"
)

// All allowed values of CurrencyType enum
var AllowedCurrencyTypeEnumValues = []CurrencyType{
	"RUR",
	"USD",
	"EUR",
	"UAH",
	"AUD",
	"GBP",
	"BYR",
	"BYN",
	"DKK",
	"ISK",
	"KZT",
	"CAD",
	"CNY",
	"NOK",
	"XDR",
	"SGD",
	"TRY",
	"SEK",
	"CHF",
	"JPY",
	"AZN",
	"ALL",
	"DZD",
	"AOA",
	"ARS",
	"AMD",
	"AFN",
	"BHD",
	"BGN",
	"BOB",
	"BWP",
	"BND",
	"BRL",
	"BIF",
	"HUF",
	"VEF",
	"KPW",
	"VND",
	"GMD",
	"GHS",
	"GNF",
	"HKD",
	"GEL",
	"AED",
	"EGP",
	"ZMK",
	"ILS",
	"INR",
	"IDR",
	"JOD",
	"IQD",
	"IRR",
	"YER",
	"QAR",
	"KES",
	"KGS",
	"COP",
	"CDF",
	"CRC",
	"KWD",
	"CUP",
	"LAK",
	"LVL",
	"SLL",
	"LBP",
	"LYD",
	"SZL",
	"LTL",
	"MUR",
	"MRO",
	"MKD",
	"MWK",
	"MGA",
	"MYR",
	"MAD",
	"MXN",
	"MZN",
	"MDL",
	"MNT",
	"NPR",
	"NGN",
	"NIO",
	"NZD",
	"OMR",
	"PKR",
	"PYG",
	"PEN",
	"PLN",
	"KHR",
	"SAR",
	"RON",
	"SCR",
	"SYP",
	"SKK",
	"SOS",
	"SDG",
	"SRD",
	"TJS",
	"THB",
	"TWD",
	"BDT",
	"TZS",
	"TND",
	"TMM",
	"UGX",
	"UZS",
	"UYU",
	"PHP",
	"DJF",
	"XAF",
	"XOF",
	"HRK",
	"CZK",
	"CLP",
	"LKR",
	"EEK",
	"ETB",
	"RSD",
	"ZAR",
	"KRW",
	"NAD",
	"TL",
	"UE",
}

func (v *CurrencyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CurrencyType(value)
	for _, existing := range AllowedCurrencyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CurrencyType", value)
}

// NewCurrencyTypeFromValue returns a pointer to a valid CurrencyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCurrencyTypeFromValue(v string) (*CurrencyType, error) {
	ev := CurrencyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CurrencyType: valid values are %v", v, AllowedCurrencyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CurrencyType) IsValid() bool {
	for _, existing := range AllowedCurrencyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CurrencyType value
func (v CurrencyType) Ptr() *CurrencyType {
	return &v
}

type NullableCurrencyType struct {
	value *CurrencyType
	isSet bool
}

func (v NullableCurrencyType) Get() *CurrencyType {
	return v.value
}

func (v *NullableCurrencyType) Set(val *CurrencyType) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyType) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyType(val *CurrencyType) *NullableCurrencyType {
	return &NullableCurrencyType{value: val, isSet: true}
}

func (v NullableCurrencyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
