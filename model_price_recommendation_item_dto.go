/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PriceRecommendationItemDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceRecommendationItemDTO{}

// PriceRecommendationItemDTO Рекомендованная цена.
type PriceRecommendationItemDTO struct {
	// Идентификатор кампании.  Его можно узнать с помощью запроса [GET campaigns](../../reference/campaigns/getCampaigns.md) или найти в кабинете продавца на Маркете — нажмите на название своего бизнеса и перейдите на страницу:    * **Модули и API** → блок **Передача данных Маркету**.   * **Лог запросов** → выпадающий список в блоке **Показывать логи**.  ⚠️ Не передавайте вместо него идентификатор магазина, который указан в кабинете продавца на Маркете рядом с названием магазина и в некоторых отчетах.
	CampaignId int64 `json:"campaignId"`
	// Рекомендованная цена на товар. Чтобы продвижение хорошо работало, цена на товар должна быть не выше этого значения. [Подробно о рекомендованных ценах](https://yandex.ru/support/marketplace/marketing/campaigns.html#prices)
	Price float32 `json:"price"`
}

type _PriceRecommendationItemDTO PriceRecommendationItemDTO

// NewPriceRecommendationItemDTO instantiates a new PriceRecommendationItemDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceRecommendationItemDTO(campaignId int64, price float32) *PriceRecommendationItemDTO {
	this := PriceRecommendationItemDTO{}
	this.CampaignId = campaignId
	this.Price = price
	return &this
}

// NewPriceRecommendationItemDTOWithDefaults instantiates a new PriceRecommendationItemDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceRecommendationItemDTOWithDefaults() *PriceRecommendationItemDTO {
	this := PriceRecommendationItemDTO{}
	return &this
}

// GetCampaignId returns the CampaignId field value
func (o *PriceRecommendationItemDTO) GetCampaignId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CampaignId
}

// GetCampaignIdOk returns a tuple with the CampaignId field value
// and a boolean to check if the value has been set.
func (o *PriceRecommendationItemDTO) GetCampaignIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CampaignId, true
}

// SetCampaignId sets field value
func (o *PriceRecommendationItemDTO) SetCampaignId(v int64) {
	o.CampaignId = v
}

// GetPrice returns the Price field value
func (o *PriceRecommendationItemDTO) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *PriceRecommendationItemDTO) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *PriceRecommendationItemDTO) SetPrice(v float32) {
	o.Price = v
}

func (o PriceRecommendationItemDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceRecommendationItemDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["campaignId"] = o.CampaignId
	toSerialize["price"] = o.Price
	return toSerialize, nil
}

func (o *PriceRecommendationItemDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"campaignId",
		"price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPriceRecommendationItemDTO := _PriceRecommendationItemDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varPriceRecommendationItemDTO)

	if err != nil {
		return err
	}

	*o = PriceRecommendationItemDTO(varPriceRecommendationItemDTO)

	return err
}

type NullablePriceRecommendationItemDTO struct {
	value *PriceRecommendationItemDTO
	isSet bool
}

func (v NullablePriceRecommendationItemDTO) Get() *PriceRecommendationItemDTO {
	return v.value
}

func (v *NullablePriceRecommendationItemDTO) Set(val *PriceRecommendationItemDTO) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceRecommendationItemDTO) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceRecommendationItemDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceRecommendationItemDTO(val *PriceRecommendationItemDTO) *NullablePriceRecommendationItemDTO {
	return &NullablePriceRecommendationItemDTO{value: val, isSet: true}
}

func (v NullablePriceRecommendationItemDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceRecommendationItemDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
