/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OfferContentDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferContentDTO{}

// OfferContentDTO Товар с указанными характеристиками.
type OfferContentDTO struct {
	// Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
	OfferId string `json:"offerId" validate:"regexp=^(?=.*\\\\S.*)[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`
	// Идентификатор категории на Маркете.  При изменении категории убедитесь, что характеристики товара и их значения в параметре `parameterValues` вы передаете для новой категории.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md).
	CategoryId int32 `json:"categoryId"`
	// Список характеристик с их значениями.  С `parameterValues` обязательно передавайте `categoryId` — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить. Если в `categoryId` вы меняете категорию, значения общих характеристик для старой и новой категории сохранятся, передавать их не нужно.  Чтобы **удалить** значение заданной характеристики, передайте ее `parameterId` с пустым `value`.
	ParameterValues []ParameterValueDTO `json:"parameterValues"`
}

type _OfferContentDTO OfferContentDTO

// NewOfferContentDTO instantiates a new OfferContentDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferContentDTO(offerId string, categoryId int32, parameterValues []ParameterValueDTO) *OfferContentDTO {
	this := OfferContentDTO{}
	this.OfferId = offerId
	this.CategoryId = categoryId
	this.ParameterValues = parameterValues
	return &this
}

// NewOfferContentDTOWithDefaults instantiates a new OfferContentDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferContentDTOWithDefaults() *OfferContentDTO {
	this := OfferContentDTO{}
	return &this
}

// GetOfferId returns the OfferId field value
func (o *OfferContentDTO) GetOfferId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value
// and a boolean to check if the value has been set.
func (o *OfferContentDTO) GetOfferIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfferId, true
}

// SetOfferId sets field value
func (o *OfferContentDTO) SetOfferId(v string) {
	o.OfferId = v
}

// GetCategoryId returns the CategoryId field value
func (o *OfferContentDTO) GetCategoryId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value
// and a boolean to check if the value has been set.
func (o *OfferContentDTO) GetCategoryIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryId, true
}

// SetCategoryId sets field value
func (o *OfferContentDTO) SetCategoryId(v int32) {
	o.CategoryId = v
}

// GetParameterValues returns the ParameterValues field value
func (o *OfferContentDTO) GetParameterValues() []ParameterValueDTO {
	if o == nil {
		var ret []ParameterValueDTO
		return ret
	}

	return o.ParameterValues
}

// GetParameterValuesOk returns a tuple with the ParameterValues field value
// and a boolean to check if the value has been set.
func (o *OfferContentDTO) GetParameterValuesOk() ([]ParameterValueDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParameterValues, true
}

// SetParameterValues sets field value
func (o *OfferContentDTO) SetParameterValues(v []ParameterValueDTO) {
	o.ParameterValues = v
}

func (o OfferContentDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferContentDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["offerId"] = o.OfferId
	toSerialize["categoryId"] = o.CategoryId
	toSerialize["parameterValues"] = o.ParameterValues
	return toSerialize, nil
}

func (o *OfferContentDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"offerId",
		"categoryId",
		"parameterValues",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOfferContentDTO := _OfferContentDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOfferContentDTO)

	if err != nil {
		return err
	}

	*o = OfferContentDTO(varOfferContentDTO)

	return err
}

type NullableOfferContentDTO struct {
	value *OfferContentDTO
	isSet bool
}

func (v NullableOfferContentDTO) Get() *OfferContentDTO {
	return v.value
}

func (v *NullableOfferContentDTO) Set(val *OfferContentDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferContentDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferContentDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferContentDTO(val *OfferContentDTO) *NullableOfferContentDTO {
	return &NullableOfferContentDTO{value: val, isSet: true}
}

func (v NullableOfferContentDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferContentDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
