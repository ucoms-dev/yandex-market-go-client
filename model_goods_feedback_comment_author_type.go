/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GoodsFeedbackCommentAuthorType Тип автора:  * `USER` — пользователь. * `BUSINESS` — кабинет. 
type GoodsFeedbackCommentAuthorType string

// List of GoodsFeedbackCommentAuthorType
const (
	USER GoodsFeedbackCommentAuthorType = "USER"
	BUSINESS GoodsFeedbackCommentAuthorType = "BUSINESS"
)

// All allowed values of GoodsFeedbackCommentAuthorType enum
var AllowedGoodsFeedbackCommentAuthorTypeEnumValues = []GoodsFeedbackCommentAuthorType{
	"USER",
	"BUSINESS",
}

func (v *GoodsFeedbackCommentAuthorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GoodsFeedbackCommentAuthorType(value)
	for _, existing := range AllowedGoodsFeedbackCommentAuthorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GoodsFeedbackCommentAuthorType", value)
}

// NewGoodsFeedbackCommentAuthorTypeFromValue returns a pointer to a valid GoodsFeedbackCommentAuthorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGoodsFeedbackCommentAuthorTypeFromValue(v string) (*GoodsFeedbackCommentAuthorType, error) {
	ev := GoodsFeedbackCommentAuthorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GoodsFeedbackCommentAuthorType: valid values are %v", v, AllowedGoodsFeedbackCommentAuthorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GoodsFeedbackCommentAuthorType) IsValid() bool {
	for _, existing := range AllowedGoodsFeedbackCommentAuthorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GoodsFeedbackCommentAuthorType value
func (v GoodsFeedbackCommentAuthorType) Ptr() *GoodsFeedbackCommentAuthorType {
	return &v
}

type NullableGoodsFeedbackCommentAuthorType struct {
	value *GoodsFeedbackCommentAuthorType
	isSet bool
}

func (v NullableGoodsFeedbackCommentAuthorType) Get() *GoodsFeedbackCommentAuthorType {
	return v.value
}

func (v *NullableGoodsFeedbackCommentAuthorType) Set(val *GoodsFeedbackCommentAuthorType) {
	v.value = val
	v.isSet = true
}

func (v NullableGoodsFeedbackCommentAuthorType) IsSet() bool {
	return v.isSet
}

func (v *NullableGoodsFeedbackCommentAuthorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoodsFeedbackCommentAuthorType(val *GoodsFeedbackCommentAuthorType) *NullableGoodsFeedbackCommentAuthorType {
	return &NullableGoodsFeedbackCommentAuthorType{value: val, isSet: true}
}

func (v NullableGoodsFeedbackCommentAuthorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoodsFeedbackCommentAuthorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

