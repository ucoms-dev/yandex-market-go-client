/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OfferContentErrorType Типы ошибок и предупреждений:  * `OFFER_NOT_FOUND` — такого товара нет в каталоге. * `UNKNOWN_CATEGORY` — указана неизвестная категория. * `INVALID_CATEGORY` — указана нелистовая категория. Укажите ту, которая не имеет дочерних категорий. * `UNKNOWN_PARAMETER` — передана характеристика, которой нет среди характеристик категории. * `UNEXPECTED_BOOLEAN_VALUE` — вместо boolean-значения передано что-то другое. * `NUMBER_FORMAT` — передана строка, не обозначающая число, вместо числа. * `INVALID_UNIT_ID` — передана единица измерения, недопустимая для характеристики. * `INVALID_GROUP_ID_LENGTH` — в названии превышено допустимое значение символов — 255. * `INVALID_GROUP_ID_CHARACTERS` — переданы [недопустимые символы](*ascii-code).  Проверить, какие категорийные характеристики доступны для заданной категории, и получить их настройки можно с помощью запроса [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters). 
type OfferContentErrorType string

// List of OfferContentErrorType
const (
	OFFER_NOT_FOUND OfferContentErrorType = "OFFER_NOT_FOUND"
	UNKNOWN_CATEGORY OfferContentErrorType = "UNKNOWN_CATEGORY"
	INVALID_CATEGORY OfferContentErrorType = "INVALID_CATEGORY"
	UNKNOWN_PARAMETER OfferContentErrorType = "UNKNOWN_PARAMETER"
	UNEXPECTED_BOOLEAN_VALUE OfferContentErrorType = "UNEXPECTED_BOOLEAN_VALUE"
	NUMBER_FORMAT OfferContentErrorType = "NUMBER_FORMAT"
	INVALID_UNIT_ID OfferContentErrorType = "INVALID_UNIT_ID"
	INVALID_GROUP_ID_LENGTH OfferContentErrorType = "INVALID_GROUP_ID_LENGTH"
	INVALID_GROUP_ID_CHARACTERS OfferContentErrorType = "INVALID_GROUP_ID_CHARACTERS"
)

// All allowed values of OfferContentErrorType enum
var AllowedOfferContentErrorTypeEnumValues = []OfferContentErrorType{
	"OFFER_NOT_FOUND",
	"UNKNOWN_CATEGORY",
	"INVALID_CATEGORY",
	"UNKNOWN_PARAMETER",
	"UNEXPECTED_BOOLEAN_VALUE",
	"NUMBER_FORMAT",
	"INVALID_UNIT_ID",
	"INVALID_GROUP_ID_LENGTH",
	"INVALID_GROUP_ID_CHARACTERS",
}

func (v *OfferContentErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OfferContentErrorType(value)
	for _, existing := range AllowedOfferContentErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OfferContentErrorType", value)
}

// NewOfferContentErrorTypeFromValue returns a pointer to a valid OfferContentErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOfferContentErrorTypeFromValue(v string) (*OfferContentErrorType, error) {
	ev := OfferContentErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OfferContentErrorType: valid values are %v", v, AllowedOfferContentErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OfferContentErrorType) IsValid() bool {
	for _, existing := range AllowedOfferContentErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OfferContentErrorType value
func (v OfferContentErrorType) Ptr() *OfferContentErrorType {
	return &v
}

type NullableOfferContentErrorType struct {
	value *OfferContentErrorType
	isSet bool
}

func (v NullableOfferContentErrorType) Get() *OfferContentErrorType {
	return v.value
}

func (v *NullableOfferContentErrorType) Set(val *OfferContentErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferContentErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferContentErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferContentErrorType(val *OfferContentErrorType) *NullableOfferContentErrorType {
	return &NullableOfferContentErrorType{value: val, isSet: true}
}

func (v NullableOfferContentErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferContentErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

