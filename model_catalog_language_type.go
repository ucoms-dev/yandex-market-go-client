/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CatalogLanguageType Язык:  * `RU` — русский. * `UZ` — узбекский. 
type CatalogLanguageType string

// List of CatalogLanguageType
const (
	RU CatalogLanguageType = "RU"
	UZ CatalogLanguageType = "UZ"
)

// All allowed values of CatalogLanguageType enum
var AllowedCatalogLanguageTypeEnumValues = []CatalogLanguageType{
	"RU",
	"UZ",
}

func (v *CatalogLanguageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CatalogLanguageType(value)
	for _, existing := range AllowedCatalogLanguageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CatalogLanguageType", value)
}

// NewCatalogLanguageTypeFromValue returns a pointer to a valid CatalogLanguageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogLanguageTypeFromValue(v string) (*CatalogLanguageType, error) {
	ev := CatalogLanguageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogLanguageType: valid values are %v", v, AllowedCatalogLanguageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogLanguageType) IsValid() bool {
	for _, existing := range AllowedCatalogLanguageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogLanguageType value
func (v CatalogLanguageType) Ptr() *CatalogLanguageType {
	return &v
}

type NullableCatalogLanguageType struct {
	value *CatalogLanguageType
	isSet bool
}

func (v NullableCatalogLanguageType) Get() *CatalogLanguageType {
	return v.value
}

func (v *NullableCatalogLanguageType) Set(val *CatalogLanguageType) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogLanguageType) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogLanguageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogLanguageType(val *CatalogLanguageType) *NullableCatalogLanguageType {
	return &NullableCatalogLanguageType{value: val, isSet: true}
}

func (v NullableCatalogLanguageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogLanguageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

