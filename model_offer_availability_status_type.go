/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OfferAvailabilityStatusType Планы по поставкам:  * `ACTIVE` — поставки будут. * `INACTIVE` — поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. Через 60 дней после того, как товар закончится на складе, этот статус изменится на `DELISTED`. * `DELISTED` — архив: товар закончился на складе, и его поставок больше не будет. Если товар вернется на склад (например, покупатель вернет заказ), этот статус изменится на `INACTIVE`. 
type OfferAvailabilityStatusType string

// List of OfferAvailabilityStatusType
const (
	ACTIVE OfferAvailabilityStatusType = "ACTIVE"
	INACTIVE OfferAvailabilityStatusType = "INACTIVE"
	DELISTED OfferAvailabilityStatusType = "DELISTED"
)

// All allowed values of OfferAvailabilityStatusType enum
var AllowedOfferAvailabilityStatusTypeEnumValues = []OfferAvailabilityStatusType{
	"ACTIVE",
	"INACTIVE",
	"DELISTED",
}

func (v *OfferAvailabilityStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OfferAvailabilityStatusType(value)
	for _, existing := range AllowedOfferAvailabilityStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OfferAvailabilityStatusType", value)
}

// NewOfferAvailabilityStatusTypeFromValue returns a pointer to a valid OfferAvailabilityStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOfferAvailabilityStatusTypeFromValue(v string) (*OfferAvailabilityStatusType, error) {
	ev := OfferAvailabilityStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OfferAvailabilityStatusType: valid values are %v", v, AllowedOfferAvailabilityStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OfferAvailabilityStatusType) IsValid() bool {
	for _, existing := range AllowedOfferAvailabilityStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OfferAvailabilityStatusType value
func (v OfferAvailabilityStatusType) Ptr() *OfferAvailabilityStatusType {
	return &v
}

type NullableOfferAvailabilityStatusType struct {
	value *OfferAvailabilityStatusType
	isSet bool
}

func (v NullableOfferAvailabilityStatusType) Get() *OfferAvailabilityStatusType {
	return v.value
}

func (v *NullableOfferAvailabilityStatusType) Set(val *OfferAvailabilityStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferAvailabilityStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferAvailabilityStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferAvailabilityStatusType(val *OfferAvailabilityStatusType) *NullableOfferAvailabilityStatusType {
	return &NullableOfferAvailabilityStatusType{value: val, isSet: true}
}

func (v NullableOfferAvailabilityStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferAvailabilityStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

