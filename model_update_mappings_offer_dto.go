/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateMappingsOfferDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMappingsOfferDTO{}

// UpdateMappingsOfferDTO Информация о товарах в каталоге.
type UpdateMappingsOfferDTO struct {
	// Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)
	Name *string `json:"name,omitempty"`
	// Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
	ShopSku *string `json:"shopSku,omitempty" validate:"regexp=^(?=.*\\\\S.*)[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`
	// {% note warning \"Вместо него используйте `marketCategoryId`.\" %}     {% endnote %}  Категория товара в вашем магазине.
	// Deprecated
	Category *string `json:"category,omitempty"`
	// Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
	Vendor *string `json:"vendor,omitempty"`
	// Артикул товара от производителя.
	VendorCode *string `json:"vendorCode,omitempty"`
	// Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)
	Description *string `json:"description,omitempty"`
	// Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
	Id *string `json:"id,omitempty" validate:"regexp=^(?=.*\\\\S.*)[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`
	// Идентификатор фида.
	FeedId *int64 `json:"feedId,omitempty"`
	// Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)
	Barcodes []string `json:"barcodes,omitempty"`
	// URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url.
	Urls []string `json:"urls,omitempty"`
	// Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Должен содержать хотя бы один вложенный параметр `picture`.
	Pictures []string `json:"pictures,omitempty"`
	// Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр.
	Manufacturer *string `json:"manufacturer,omitempty"`
	// Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран.
	ManufacturerCountries []string `json:"manufacturerCountries,omitempty"`
	// Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60.
	MinShipment *int32 `json:"minShipment,omitempty"`
	// Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6.
	TransportUnitSize *int32 `json:"transportUnitSize,omitempty"`
	// Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12.
	QuantumOfSupply *int32 `json:"quantumOfSupply,omitempty"`
	// Срок, за который продавец поставляет товары на склад, в днях.
	DeliveryDurationDays *int32 `json:"deliveryDurationDays,omitempty"`
	// Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр.
	BoxCount *int32 `json:"boxCount,omitempty"`
	// Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД.
	CustomsCommodityCodes []string                  `json:"customsCommodityCodes,omitempty"`
	WeightDimensions      *OfferWeightDimensionsDTO `json:"weightDimensions,omitempty"`
	// Дни недели, в которые продавец поставляет товары на склад.
	SupplyScheduleDays []DayOfWeekType `json:"supplyScheduleDays,omitempty"`
	// {% note warning \"Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.\" %}     {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования.
	// Deprecated
	ShelfLifeDays *int32 `json:"shelfLifeDays,omitempty"`
	// {% note warning \"Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.\" %}     {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки.
	// Deprecated
	LifeTimeDays *int32 `json:"lifeTimeDays,omitempty"`
	// Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара.
	GuaranteePeriodDays *int32                       `json:"guaranteePeriodDays,omitempty"`
	ProcessingState     *OfferProcessingStateDTO     `json:"processingState,omitempty"`
	Availability        *OfferAvailabilityStatusType `json:"availability,omitempty"`
	ShelfLife           *TimePeriodDTO               `json:"shelfLife,omitempty"`
	LifeTime            *TimePeriodDTO               `json:"lifeTime,omitempty"`
	GuaranteePeriod     *TimePeriodDTO               `json:"guaranteePeriod,omitempty"`
	// Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html)
	Certificate *string `json:"certificate,omitempty"`
}

// NewUpdateMappingsOfferDTO instantiates a new UpdateMappingsOfferDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMappingsOfferDTO() *UpdateMappingsOfferDTO {
	this := UpdateMappingsOfferDTO{}
	return &this
}

// NewUpdateMappingsOfferDTOWithDefaults instantiates a new UpdateMappingsOfferDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMappingsOfferDTOWithDefaults() *UpdateMappingsOfferDTO {
	this := UpdateMappingsOfferDTO{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateMappingsOfferDTO) SetName(v string) {
	o.Name = &v
}

// GetShopSku returns the ShopSku field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetShopSku() string {
	if o == nil || IsNil(o.ShopSku) {
		var ret string
		return ret
	}
	return *o.ShopSku
}

// GetShopSkuOk returns a tuple with the ShopSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetShopSkuOk() (*string, bool) {
	if o == nil || IsNil(o.ShopSku) {
		return nil, false
	}
	return o.ShopSku, true
}

// HasShopSku returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasShopSku() bool {
	if o != nil && !IsNil(o.ShopSku) {
		return true
	}

	return false
}

// SetShopSku gets a reference to the given string and assigns it to the ShopSku field.
func (o *UpdateMappingsOfferDTO) SetShopSku(v string) {
	o.ShopSku = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
// Deprecated
func (o *UpdateMappingsOfferDTO) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateMappingsOfferDTO) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
// Deprecated
func (o *UpdateMappingsOfferDTO) SetCategory(v string) {
	o.Category = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *UpdateMappingsOfferDTO) SetVendor(v string) {
	o.Vendor = &v
}

// GetVendorCode returns the VendorCode field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetVendorCode() string {
	if o == nil || IsNil(o.VendorCode) {
		var ret string
		return ret
	}
	return *o.VendorCode
}

// GetVendorCodeOk returns a tuple with the VendorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetVendorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.VendorCode) {
		return nil, false
	}
	return o.VendorCode, true
}

// HasVendorCode returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasVendorCode() bool {
	if o != nil && !IsNil(o.VendorCode) {
		return true
	}

	return false
}

// SetVendorCode gets a reference to the given string and assigns it to the VendorCode field.
func (o *UpdateMappingsOfferDTO) SetVendorCode(v string) {
	o.VendorCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateMappingsOfferDTO) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdateMappingsOfferDTO) SetId(v string) {
	o.Id = &v
}

// GetFeedId returns the FeedId field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetFeedId() int64 {
	if o == nil || IsNil(o.FeedId) {
		var ret int64
		return ret
	}
	return *o.FeedId
}

// GetFeedIdOk returns a tuple with the FeedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetFeedIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FeedId) {
		return nil, false
	}
	return o.FeedId, true
}

// HasFeedId returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasFeedId() bool {
	if o != nil && !IsNil(o.FeedId) {
		return true
	}

	return false
}

// SetFeedId gets a reference to the given int64 and assigns it to the FeedId field.
func (o *UpdateMappingsOfferDTO) SetFeedId(v int64) {
	o.FeedId = &v
}

// GetBarcodes returns the Barcodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateMappingsOfferDTO) GetBarcodes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Barcodes
}

// GetBarcodesOk returns a tuple with the Barcodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateMappingsOfferDTO) GetBarcodesOk() ([]string, bool) {
	if o == nil || IsNil(o.Barcodes) {
		return nil, false
	}
	return o.Barcodes, true
}

// HasBarcodes returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasBarcodes() bool {
	if o != nil && !IsNil(o.Barcodes) {
		return true
	}

	return false
}

// SetBarcodes gets a reference to the given []string and assigns it to the Barcodes field.
func (o *UpdateMappingsOfferDTO) SetBarcodes(v []string) {
	o.Barcodes = v
}

// GetUrls returns the Urls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateMappingsOfferDTO) GetUrls() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateMappingsOfferDTO) GetUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.Urls) {
		return nil, false
	}
	return o.Urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasUrls() bool {
	if o != nil && !IsNil(o.Urls) {
		return true
	}

	return false
}

// SetUrls gets a reference to the given []string and assigns it to the Urls field.
func (o *UpdateMappingsOfferDTO) SetUrls(v []string) {
	o.Urls = v
}

// GetPictures returns the Pictures field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateMappingsOfferDTO) GetPictures() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Pictures
}

// GetPicturesOk returns a tuple with the Pictures field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateMappingsOfferDTO) GetPicturesOk() ([]string, bool) {
	if o == nil || IsNil(o.Pictures) {
		return nil, false
	}
	return o.Pictures, true
}

// HasPictures returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasPictures() bool {
	if o != nil && !IsNil(o.Pictures) {
		return true
	}

	return false
}

// SetPictures gets a reference to the given []string and assigns it to the Pictures field.
func (o *UpdateMappingsOfferDTO) SetPictures(v []string) {
	o.Pictures = v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetManufacturer() string {
	if o == nil || IsNil(o.Manufacturer) {
		var ret string
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetManufacturerOk() (*string, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given string and assigns it to the Manufacturer field.
func (o *UpdateMappingsOfferDTO) SetManufacturer(v string) {
	o.Manufacturer = &v
}

// GetManufacturerCountries returns the ManufacturerCountries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateMappingsOfferDTO) GetManufacturerCountries() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ManufacturerCountries
}

// GetManufacturerCountriesOk returns a tuple with the ManufacturerCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateMappingsOfferDTO) GetManufacturerCountriesOk() ([]string, bool) {
	if o == nil || IsNil(o.ManufacturerCountries) {
		return nil, false
	}
	return o.ManufacturerCountries, true
}

// HasManufacturerCountries returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasManufacturerCountries() bool {
	if o != nil && !IsNil(o.ManufacturerCountries) {
		return true
	}

	return false
}

// SetManufacturerCountries gets a reference to the given []string and assigns it to the ManufacturerCountries field.
func (o *UpdateMappingsOfferDTO) SetManufacturerCountries(v []string) {
	o.ManufacturerCountries = v
}

// GetMinShipment returns the MinShipment field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetMinShipment() int32 {
	if o == nil || IsNil(o.MinShipment) {
		var ret int32
		return ret
	}
	return *o.MinShipment
}

// GetMinShipmentOk returns a tuple with the MinShipment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetMinShipmentOk() (*int32, bool) {
	if o == nil || IsNil(o.MinShipment) {
		return nil, false
	}
	return o.MinShipment, true
}

// HasMinShipment returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasMinShipment() bool {
	if o != nil && !IsNil(o.MinShipment) {
		return true
	}

	return false
}

// SetMinShipment gets a reference to the given int32 and assigns it to the MinShipment field.
func (o *UpdateMappingsOfferDTO) SetMinShipment(v int32) {
	o.MinShipment = &v
}

// GetTransportUnitSize returns the TransportUnitSize field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetTransportUnitSize() int32 {
	if o == nil || IsNil(o.TransportUnitSize) {
		var ret int32
		return ret
	}
	return *o.TransportUnitSize
}

// GetTransportUnitSizeOk returns a tuple with the TransportUnitSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetTransportUnitSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.TransportUnitSize) {
		return nil, false
	}
	return o.TransportUnitSize, true
}

// HasTransportUnitSize returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasTransportUnitSize() bool {
	if o != nil && !IsNil(o.TransportUnitSize) {
		return true
	}

	return false
}

// SetTransportUnitSize gets a reference to the given int32 and assigns it to the TransportUnitSize field.
func (o *UpdateMappingsOfferDTO) SetTransportUnitSize(v int32) {
	o.TransportUnitSize = &v
}

// GetQuantumOfSupply returns the QuantumOfSupply field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetQuantumOfSupply() int32 {
	if o == nil || IsNil(o.QuantumOfSupply) {
		var ret int32
		return ret
	}
	return *o.QuantumOfSupply
}

// GetQuantumOfSupplyOk returns a tuple with the QuantumOfSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetQuantumOfSupplyOk() (*int32, bool) {
	if o == nil || IsNil(o.QuantumOfSupply) {
		return nil, false
	}
	return o.QuantumOfSupply, true
}

// HasQuantumOfSupply returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasQuantumOfSupply() bool {
	if o != nil && !IsNil(o.QuantumOfSupply) {
		return true
	}

	return false
}

// SetQuantumOfSupply gets a reference to the given int32 and assigns it to the QuantumOfSupply field.
func (o *UpdateMappingsOfferDTO) SetQuantumOfSupply(v int32) {
	o.QuantumOfSupply = &v
}

// GetDeliveryDurationDays returns the DeliveryDurationDays field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetDeliveryDurationDays() int32 {
	if o == nil || IsNil(o.DeliveryDurationDays) {
		var ret int32
		return ret
	}
	return *o.DeliveryDurationDays
}

// GetDeliveryDurationDaysOk returns a tuple with the DeliveryDurationDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetDeliveryDurationDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.DeliveryDurationDays) {
		return nil, false
	}
	return o.DeliveryDurationDays, true
}

// HasDeliveryDurationDays returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasDeliveryDurationDays() bool {
	if o != nil && !IsNil(o.DeliveryDurationDays) {
		return true
	}

	return false
}

// SetDeliveryDurationDays gets a reference to the given int32 and assigns it to the DeliveryDurationDays field.
func (o *UpdateMappingsOfferDTO) SetDeliveryDurationDays(v int32) {
	o.DeliveryDurationDays = &v
}

// GetBoxCount returns the BoxCount field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetBoxCount() int32 {
	if o == nil || IsNil(o.BoxCount) {
		var ret int32
		return ret
	}
	return *o.BoxCount
}

// GetBoxCountOk returns a tuple with the BoxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetBoxCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BoxCount) {
		return nil, false
	}
	return o.BoxCount, true
}

// HasBoxCount returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasBoxCount() bool {
	if o != nil && !IsNil(o.BoxCount) {
		return true
	}

	return false
}

// SetBoxCount gets a reference to the given int32 and assigns it to the BoxCount field.
func (o *UpdateMappingsOfferDTO) SetBoxCount(v int32) {
	o.BoxCount = &v
}

// GetCustomsCommodityCodes returns the CustomsCommodityCodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateMappingsOfferDTO) GetCustomsCommodityCodes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CustomsCommodityCodes
}

// GetCustomsCommodityCodesOk returns a tuple with the CustomsCommodityCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateMappingsOfferDTO) GetCustomsCommodityCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomsCommodityCodes) {
		return nil, false
	}
	return o.CustomsCommodityCodes, true
}

// HasCustomsCommodityCodes returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasCustomsCommodityCodes() bool {
	if o != nil && !IsNil(o.CustomsCommodityCodes) {
		return true
	}

	return false
}

// SetCustomsCommodityCodes gets a reference to the given []string and assigns it to the CustomsCommodityCodes field.
func (o *UpdateMappingsOfferDTO) SetCustomsCommodityCodes(v []string) {
	o.CustomsCommodityCodes = v
}

// GetWeightDimensions returns the WeightDimensions field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetWeightDimensions() OfferWeightDimensionsDTO {
	if o == nil || IsNil(o.WeightDimensions) {
		var ret OfferWeightDimensionsDTO
		return ret
	}
	return *o.WeightDimensions
}

// GetWeightDimensionsOk returns a tuple with the WeightDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetWeightDimensionsOk() (*OfferWeightDimensionsDTO, bool) {
	if o == nil || IsNil(o.WeightDimensions) {
		return nil, false
	}
	return o.WeightDimensions, true
}

// HasWeightDimensions returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasWeightDimensions() bool {
	if o != nil && !IsNil(o.WeightDimensions) {
		return true
	}

	return false
}

// SetWeightDimensions gets a reference to the given OfferWeightDimensionsDTO and assigns it to the WeightDimensions field.
func (o *UpdateMappingsOfferDTO) SetWeightDimensions(v OfferWeightDimensionsDTO) {
	o.WeightDimensions = &v
}

// GetSupplyScheduleDays returns the SupplyScheduleDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateMappingsOfferDTO) GetSupplyScheduleDays() []DayOfWeekType {
	if o == nil {
		var ret []DayOfWeekType
		return ret
	}
	return o.SupplyScheduleDays
}

// GetSupplyScheduleDaysOk returns a tuple with the SupplyScheduleDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateMappingsOfferDTO) GetSupplyScheduleDaysOk() ([]DayOfWeekType, bool) {
	if o == nil || IsNil(o.SupplyScheduleDays) {
		return nil, false
	}
	return o.SupplyScheduleDays, true
}

// HasSupplyScheduleDays returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasSupplyScheduleDays() bool {
	if o != nil && !IsNil(o.SupplyScheduleDays) {
		return true
	}

	return false
}

// SetSupplyScheduleDays gets a reference to the given []DayOfWeekType and assigns it to the SupplyScheduleDays field.
func (o *UpdateMappingsOfferDTO) SetSupplyScheduleDays(v []DayOfWeekType) {
	o.SupplyScheduleDays = v
}

// GetShelfLifeDays returns the ShelfLifeDays field value if set, zero value otherwise.
// Deprecated
func (o *UpdateMappingsOfferDTO) GetShelfLifeDays() int32 {
	if o == nil || IsNil(o.ShelfLifeDays) {
		var ret int32
		return ret
	}
	return *o.ShelfLifeDays
}

// GetShelfLifeDaysOk returns a tuple with the ShelfLifeDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateMappingsOfferDTO) GetShelfLifeDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.ShelfLifeDays) {
		return nil, false
	}
	return o.ShelfLifeDays, true
}

// HasShelfLifeDays returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasShelfLifeDays() bool {
	if o != nil && !IsNil(o.ShelfLifeDays) {
		return true
	}

	return false
}

// SetShelfLifeDays gets a reference to the given int32 and assigns it to the ShelfLifeDays field.
// Deprecated
func (o *UpdateMappingsOfferDTO) SetShelfLifeDays(v int32) {
	o.ShelfLifeDays = &v
}

// GetLifeTimeDays returns the LifeTimeDays field value if set, zero value otherwise.
// Deprecated
func (o *UpdateMappingsOfferDTO) GetLifeTimeDays() int32 {
	if o == nil || IsNil(o.LifeTimeDays) {
		var ret int32
		return ret
	}
	return *o.LifeTimeDays
}

// GetLifeTimeDaysOk returns a tuple with the LifeTimeDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateMappingsOfferDTO) GetLifeTimeDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.LifeTimeDays) {
		return nil, false
	}
	return o.LifeTimeDays, true
}

// HasLifeTimeDays returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasLifeTimeDays() bool {
	if o != nil && !IsNil(o.LifeTimeDays) {
		return true
	}

	return false
}

// SetLifeTimeDays gets a reference to the given int32 and assigns it to the LifeTimeDays field.
// Deprecated
func (o *UpdateMappingsOfferDTO) SetLifeTimeDays(v int32) {
	o.LifeTimeDays = &v
}

// GetGuaranteePeriodDays returns the GuaranteePeriodDays field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetGuaranteePeriodDays() int32 {
	if o == nil || IsNil(o.GuaranteePeriodDays) {
		var ret int32
		return ret
	}
	return *o.GuaranteePeriodDays
}

// GetGuaranteePeriodDaysOk returns a tuple with the GuaranteePeriodDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetGuaranteePeriodDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.GuaranteePeriodDays) {
		return nil, false
	}
	return o.GuaranteePeriodDays, true
}

// HasGuaranteePeriodDays returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasGuaranteePeriodDays() bool {
	if o != nil && !IsNil(o.GuaranteePeriodDays) {
		return true
	}

	return false
}

// SetGuaranteePeriodDays gets a reference to the given int32 and assigns it to the GuaranteePeriodDays field.
func (o *UpdateMappingsOfferDTO) SetGuaranteePeriodDays(v int32) {
	o.GuaranteePeriodDays = &v
}

// GetProcessingState returns the ProcessingState field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetProcessingState() OfferProcessingStateDTO {
	if o == nil || IsNil(o.ProcessingState) {
		var ret OfferProcessingStateDTO
		return ret
	}
	return *o.ProcessingState
}

// GetProcessingStateOk returns a tuple with the ProcessingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetProcessingStateOk() (*OfferProcessingStateDTO, bool) {
	if o == nil || IsNil(o.ProcessingState) {
		return nil, false
	}
	return o.ProcessingState, true
}

// HasProcessingState returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasProcessingState() bool {
	if o != nil && !IsNil(o.ProcessingState) {
		return true
	}

	return false
}

// SetProcessingState gets a reference to the given OfferProcessingStateDTO and assigns it to the ProcessingState field.
func (o *UpdateMappingsOfferDTO) SetProcessingState(v OfferProcessingStateDTO) {
	o.ProcessingState = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetAvailability() OfferAvailabilityStatusType {
	if o == nil || IsNil(o.Availability) {
		var ret OfferAvailabilityStatusType
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetAvailabilityOk() (*OfferAvailabilityStatusType, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given OfferAvailabilityStatusType and assigns it to the Availability field.
func (o *UpdateMappingsOfferDTO) SetAvailability(v OfferAvailabilityStatusType) {
	o.Availability = &v
}

// GetShelfLife returns the ShelfLife field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetShelfLife() TimePeriodDTO {
	if o == nil || IsNil(o.ShelfLife) {
		var ret TimePeriodDTO
		return ret
	}
	return *o.ShelfLife
}

// GetShelfLifeOk returns a tuple with the ShelfLife field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetShelfLifeOk() (*TimePeriodDTO, bool) {
	if o == nil || IsNil(o.ShelfLife) {
		return nil, false
	}
	return o.ShelfLife, true
}

// HasShelfLife returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasShelfLife() bool {
	if o != nil && !IsNil(o.ShelfLife) {
		return true
	}

	return false
}

// SetShelfLife gets a reference to the given TimePeriodDTO and assigns it to the ShelfLife field.
func (o *UpdateMappingsOfferDTO) SetShelfLife(v TimePeriodDTO) {
	o.ShelfLife = &v
}

// GetLifeTime returns the LifeTime field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetLifeTime() TimePeriodDTO {
	if o == nil || IsNil(o.LifeTime) {
		var ret TimePeriodDTO
		return ret
	}
	return *o.LifeTime
}

// GetLifeTimeOk returns a tuple with the LifeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetLifeTimeOk() (*TimePeriodDTO, bool) {
	if o == nil || IsNil(o.LifeTime) {
		return nil, false
	}
	return o.LifeTime, true
}

// HasLifeTime returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasLifeTime() bool {
	if o != nil && !IsNil(o.LifeTime) {
		return true
	}

	return false
}

// SetLifeTime gets a reference to the given TimePeriodDTO and assigns it to the LifeTime field.
func (o *UpdateMappingsOfferDTO) SetLifeTime(v TimePeriodDTO) {
	o.LifeTime = &v
}

// GetGuaranteePeriod returns the GuaranteePeriod field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetGuaranteePeriod() TimePeriodDTO {
	if o == nil || IsNil(o.GuaranteePeriod) {
		var ret TimePeriodDTO
		return ret
	}
	return *o.GuaranteePeriod
}

// GetGuaranteePeriodOk returns a tuple with the GuaranteePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetGuaranteePeriodOk() (*TimePeriodDTO, bool) {
	if o == nil || IsNil(o.GuaranteePeriod) {
		return nil, false
	}
	return o.GuaranteePeriod, true
}

// HasGuaranteePeriod returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasGuaranteePeriod() bool {
	if o != nil && !IsNil(o.GuaranteePeriod) {
		return true
	}

	return false
}

// SetGuaranteePeriod gets a reference to the given TimePeriodDTO and assigns it to the GuaranteePeriod field.
func (o *UpdateMappingsOfferDTO) SetGuaranteePeriod(v TimePeriodDTO) {
	o.GuaranteePeriod = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *UpdateMappingsOfferDTO) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMappingsOfferDTO) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *UpdateMappingsOfferDTO) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *UpdateMappingsOfferDTO) SetCertificate(v string) {
	o.Certificate = &v
}

func (o UpdateMappingsOfferDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMappingsOfferDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ShopSku) {
		toSerialize["shopSku"] = o.ShopSku
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.VendorCode) {
		toSerialize["vendorCode"] = o.VendorCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FeedId) {
		toSerialize["feedId"] = o.FeedId
	}
	if o.Barcodes != nil {
		toSerialize["barcodes"] = o.Barcodes
	}
	if o.Urls != nil {
		toSerialize["urls"] = o.Urls
	}
	if o.Pictures != nil {
		toSerialize["pictures"] = o.Pictures
	}
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if o.ManufacturerCountries != nil {
		toSerialize["manufacturerCountries"] = o.ManufacturerCountries
	}
	if !IsNil(o.MinShipment) {
		toSerialize["minShipment"] = o.MinShipment
	}
	if !IsNil(o.TransportUnitSize) {
		toSerialize["transportUnitSize"] = o.TransportUnitSize
	}
	if !IsNil(o.QuantumOfSupply) {
		toSerialize["quantumOfSupply"] = o.QuantumOfSupply
	}
	if !IsNil(o.DeliveryDurationDays) {
		toSerialize["deliveryDurationDays"] = o.DeliveryDurationDays
	}
	if !IsNil(o.BoxCount) {
		toSerialize["boxCount"] = o.BoxCount
	}
	if o.CustomsCommodityCodes != nil {
		toSerialize["customsCommodityCodes"] = o.CustomsCommodityCodes
	}
	if !IsNil(o.WeightDimensions) {
		toSerialize["weightDimensions"] = o.WeightDimensions
	}
	if o.SupplyScheduleDays != nil {
		toSerialize["supplyScheduleDays"] = o.SupplyScheduleDays
	}
	if !IsNil(o.ShelfLifeDays) {
		toSerialize["shelfLifeDays"] = o.ShelfLifeDays
	}
	if !IsNil(o.LifeTimeDays) {
		toSerialize["lifeTimeDays"] = o.LifeTimeDays
	}
	if !IsNil(o.GuaranteePeriodDays) {
		toSerialize["guaranteePeriodDays"] = o.GuaranteePeriodDays
	}
	if !IsNil(o.ProcessingState) {
		toSerialize["processingState"] = o.ProcessingState
	}
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	if !IsNil(o.ShelfLife) {
		toSerialize["shelfLife"] = o.ShelfLife
	}
	if !IsNil(o.LifeTime) {
		toSerialize["lifeTime"] = o.LifeTime
	}
	if !IsNil(o.GuaranteePeriod) {
		toSerialize["guaranteePeriod"] = o.GuaranteePeriod
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	return toSerialize, nil
}

type NullableUpdateMappingsOfferDTO struct {
	value *UpdateMappingsOfferDTO
	isSet bool
}

func (v NullableUpdateMappingsOfferDTO) Get() *UpdateMappingsOfferDTO {
	return v.value
}

func (v *NullableUpdateMappingsOfferDTO) Set(val *UpdateMappingsOfferDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMappingsOfferDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMappingsOfferDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMappingsOfferDTO(val *UpdateMappingsOfferDTO) *NullableUpdateMappingsOfferDTO {
	return &NullableUpdateMappingsOfferDTO{value: val, isSet: true}
}

func (v NullableUpdateMappingsOfferDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMappingsOfferDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
