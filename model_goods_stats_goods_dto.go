/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GoodsStatsGoodsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoodsStatsGoodsDTO{}

// GoodsStatsGoodsDTO Информация о товаре.
type GoodsStatsGoodsDTO struct {
	// Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
	ShopSku *string `json:"shopSku,omitempty" validate:"regexp=^(?=.*\\\\S.*)[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`
	// SKU на Маркете.
	MarketSku *int64 `json:"marketSku,omitempty"`
	// Название товара.
	Name *string `json:"name,omitempty"`
	// Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).
	Price *float32 `json:"price,omitempty"`
	// Идентификатор категории товара на Маркете.
	CategoryId *int64 `json:"categoryId,omitempty"`
	// Название категории товара на Маркете.
	CategoryName     *string                        `json:"categoryName,omitempty"`
	WeightDimensions *GoodsStatsWeightDimensionsDTO `json:"weightDimensions,omitempty"`
	// Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе.
	Warehouses []GoodsStatsWarehouseDTO `json:"warehouses,omitempty"`
	// Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/).
	Tariffs []TariffDTO `json:"tariffs,omitempty"`
	// Ссылки (URL) изображений товара в хорошем качестве.
	Pictures []string `json:"pictures,omitempty"`
}

// NewGoodsStatsGoodsDTO instantiates a new GoodsStatsGoodsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoodsStatsGoodsDTO() *GoodsStatsGoodsDTO {
	this := GoodsStatsGoodsDTO{}
	return &this
}

// NewGoodsStatsGoodsDTOWithDefaults instantiates a new GoodsStatsGoodsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoodsStatsGoodsDTOWithDefaults() *GoodsStatsGoodsDTO {
	this := GoodsStatsGoodsDTO{}
	return &this
}

// GetShopSku returns the ShopSku field value if set, zero value otherwise.
func (o *GoodsStatsGoodsDTO) GetShopSku() string {
	if o == nil || IsNil(o.ShopSku) {
		var ret string
		return ret
	}
	return *o.ShopSku
}

// GetShopSkuOk returns a tuple with the ShopSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsStatsGoodsDTO) GetShopSkuOk() (*string, bool) {
	if o == nil || IsNil(o.ShopSku) {
		return nil, false
	}
	return o.ShopSku, true
}

// HasShopSku returns a boolean if a field has been set.
func (o *GoodsStatsGoodsDTO) HasShopSku() bool {
	if o != nil && !IsNil(o.ShopSku) {
		return true
	}

	return false
}

// SetShopSku gets a reference to the given string and assigns it to the ShopSku field.
func (o *GoodsStatsGoodsDTO) SetShopSku(v string) {
	o.ShopSku = &v
}

// GetMarketSku returns the MarketSku field value if set, zero value otherwise.
func (o *GoodsStatsGoodsDTO) GetMarketSku() int64 {
	if o == nil || IsNil(o.MarketSku) {
		var ret int64
		return ret
	}
	return *o.MarketSku
}

// GetMarketSkuOk returns a tuple with the MarketSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsStatsGoodsDTO) GetMarketSkuOk() (*int64, bool) {
	if o == nil || IsNil(o.MarketSku) {
		return nil, false
	}
	return o.MarketSku, true
}

// HasMarketSku returns a boolean if a field has been set.
func (o *GoodsStatsGoodsDTO) HasMarketSku() bool {
	if o != nil && !IsNil(o.MarketSku) {
		return true
	}

	return false
}

// SetMarketSku gets a reference to the given int64 and assigns it to the MarketSku field.
func (o *GoodsStatsGoodsDTO) SetMarketSku(v int64) {
	o.MarketSku = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GoodsStatsGoodsDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsStatsGoodsDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GoodsStatsGoodsDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GoodsStatsGoodsDTO) SetName(v string) {
	o.Name = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *GoodsStatsGoodsDTO) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsStatsGoodsDTO) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *GoodsStatsGoodsDTO) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *GoodsStatsGoodsDTO) SetPrice(v float32) {
	o.Price = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *GoodsStatsGoodsDTO) GetCategoryId() int64 {
	if o == nil || IsNil(o.CategoryId) {
		var ret int64
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsStatsGoodsDTO) GetCategoryIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *GoodsStatsGoodsDTO) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given int64 and assigns it to the CategoryId field.
func (o *GoodsStatsGoodsDTO) SetCategoryId(v int64) {
	o.CategoryId = &v
}

// GetCategoryName returns the CategoryName field value if set, zero value otherwise.
func (o *GoodsStatsGoodsDTO) GetCategoryName() string {
	if o == nil || IsNil(o.CategoryName) {
		var ret string
		return ret
	}
	return *o.CategoryName
}

// GetCategoryNameOk returns a tuple with the CategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsStatsGoodsDTO) GetCategoryNameOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryName) {
		return nil, false
	}
	return o.CategoryName, true
}

// HasCategoryName returns a boolean if a field has been set.
func (o *GoodsStatsGoodsDTO) HasCategoryName() bool {
	if o != nil && !IsNil(o.CategoryName) {
		return true
	}

	return false
}

// SetCategoryName gets a reference to the given string and assigns it to the CategoryName field.
func (o *GoodsStatsGoodsDTO) SetCategoryName(v string) {
	o.CategoryName = &v
}

// GetWeightDimensions returns the WeightDimensions field value if set, zero value otherwise.
func (o *GoodsStatsGoodsDTO) GetWeightDimensions() GoodsStatsWeightDimensionsDTO {
	if o == nil || IsNil(o.WeightDimensions) {
		var ret GoodsStatsWeightDimensionsDTO
		return ret
	}
	return *o.WeightDimensions
}

// GetWeightDimensionsOk returns a tuple with the WeightDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsStatsGoodsDTO) GetWeightDimensionsOk() (*GoodsStatsWeightDimensionsDTO, bool) {
	if o == nil || IsNil(o.WeightDimensions) {
		return nil, false
	}
	return o.WeightDimensions, true
}

// HasWeightDimensions returns a boolean if a field has been set.
func (o *GoodsStatsGoodsDTO) HasWeightDimensions() bool {
	if o != nil && !IsNil(o.WeightDimensions) {
		return true
	}

	return false
}

// SetWeightDimensions gets a reference to the given GoodsStatsWeightDimensionsDTO and assigns it to the WeightDimensions field.
func (o *GoodsStatsGoodsDTO) SetWeightDimensions(v GoodsStatsWeightDimensionsDTO) {
	o.WeightDimensions = &v
}

// GetWarehouses returns the Warehouses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GoodsStatsGoodsDTO) GetWarehouses() []GoodsStatsWarehouseDTO {
	if o == nil {
		var ret []GoodsStatsWarehouseDTO
		return ret
	}
	return o.Warehouses
}

// GetWarehousesOk returns a tuple with the Warehouses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoodsStatsGoodsDTO) GetWarehousesOk() ([]GoodsStatsWarehouseDTO, bool) {
	if o == nil || IsNil(o.Warehouses) {
		return nil, false
	}
	return o.Warehouses, true
}

// HasWarehouses returns a boolean if a field has been set.
func (o *GoodsStatsGoodsDTO) HasWarehouses() bool {
	if o != nil && !IsNil(o.Warehouses) {
		return true
	}

	return false
}

// SetWarehouses gets a reference to the given []GoodsStatsWarehouseDTO and assigns it to the Warehouses field.
func (o *GoodsStatsGoodsDTO) SetWarehouses(v []GoodsStatsWarehouseDTO) {
	o.Warehouses = v
}

// GetTariffs returns the Tariffs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GoodsStatsGoodsDTO) GetTariffs() []TariffDTO {
	if o == nil {
		var ret []TariffDTO
		return ret
	}
	return o.Tariffs
}

// GetTariffsOk returns a tuple with the Tariffs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoodsStatsGoodsDTO) GetTariffsOk() ([]TariffDTO, bool) {
	if o == nil || IsNil(o.Tariffs) {
		return nil, false
	}
	return o.Tariffs, true
}

// HasTariffs returns a boolean if a field has been set.
func (o *GoodsStatsGoodsDTO) HasTariffs() bool {
	if o != nil && !IsNil(o.Tariffs) {
		return true
	}

	return false
}

// SetTariffs gets a reference to the given []TariffDTO and assigns it to the Tariffs field.
func (o *GoodsStatsGoodsDTO) SetTariffs(v []TariffDTO) {
	o.Tariffs = v
}

// GetPictures returns the Pictures field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GoodsStatsGoodsDTO) GetPictures() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Pictures
}

// GetPicturesOk returns a tuple with the Pictures field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoodsStatsGoodsDTO) GetPicturesOk() ([]string, bool) {
	if o == nil || IsNil(o.Pictures) {
		return nil, false
	}
	return o.Pictures, true
}

// HasPictures returns a boolean if a field has been set.
func (o *GoodsStatsGoodsDTO) HasPictures() bool {
	if o != nil && !IsNil(o.Pictures) {
		return true
	}

	return false
}

// SetPictures gets a reference to the given []string and assigns it to the Pictures field.
func (o *GoodsStatsGoodsDTO) SetPictures(v []string) {
	o.Pictures = v
}

func (o GoodsStatsGoodsDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoodsStatsGoodsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShopSku) {
		toSerialize["shopSku"] = o.ShopSku
	}
	if !IsNil(o.MarketSku) {
		toSerialize["marketSku"] = o.MarketSku
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.CategoryId) {
		toSerialize["categoryId"] = o.CategoryId
	}
	if !IsNil(o.CategoryName) {
		toSerialize["categoryName"] = o.CategoryName
	}
	if !IsNil(o.WeightDimensions) {
		toSerialize["weightDimensions"] = o.WeightDimensions
	}
	if o.Warehouses != nil {
		toSerialize["warehouses"] = o.Warehouses
	}
	if o.Tariffs != nil {
		toSerialize["tariffs"] = o.Tariffs
	}
	if o.Pictures != nil {
		toSerialize["pictures"] = o.Pictures
	}
	return toSerialize, nil
}

type NullableGoodsStatsGoodsDTO struct {
	value *GoodsStatsGoodsDTO
	isSet bool
}

func (v NullableGoodsStatsGoodsDTO) Get() *GoodsStatsGoodsDTO {
	return v.value
}

func (v *NullableGoodsStatsGoodsDTO) Set(val *GoodsStatsGoodsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableGoodsStatsGoodsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableGoodsStatsGoodsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoodsStatsGoodsDTO(val *GoodsStatsGoodsDTO) *NullableGoodsStatsGoodsDTO {
	return &NullableGoodsStatsGoodsDTO{value: val, isSet: true}
}

func (v NullableGoodsStatsGoodsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoodsStatsGoodsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
