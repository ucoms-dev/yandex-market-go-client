/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BriefOrderItemDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BriefOrderItemDTO{}

// BriefOrderItemDTO Информация о маркированном товаре.
type BriefOrderItemDTO struct {
	// Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
	Id *int64 `json:"id,omitempty"`
	Vat *OrderVatType `json:"vat,omitempty"`
	// Количество единиц товара.
	Count *int32 `json:"count,omitempty"`
	// Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка. 
	Price *float32 `json:"price,omitempty"`
	// Название товара.
	OfferName *string `json:"offerName,omitempty"`
	// Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
	OfferId *string `json:"offerId,omitempty" validate:"regexp=^(?=.*\\\\S.*)[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`
	// Переданные вами коды маркировки.
	Instances []OrderItemInstanceDTO `json:"instances,omitempty"`
}

// NewBriefOrderItemDTO instantiates a new BriefOrderItemDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBriefOrderItemDTO() *BriefOrderItemDTO {
	this := BriefOrderItemDTO{}
	return &this
}

// NewBriefOrderItemDTOWithDefaults instantiates a new BriefOrderItemDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBriefOrderItemDTOWithDefaults() *BriefOrderItemDTO {
	this := BriefOrderItemDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BriefOrderItemDTO) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BriefOrderItemDTO) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BriefOrderItemDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *BriefOrderItemDTO) SetId(v int64) {
	o.Id = &v
}

// GetVat returns the Vat field value if set, zero value otherwise.
func (o *BriefOrderItemDTO) GetVat() OrderVatType {
	if o == nil || IsNil(o.Vat) {
		var ret OrderVatType
		return ret
	}
	return *o.Vat
}

// GetVatOk returns a tuple with the Vat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BriefOrderItemDTO) GetVatOk() (*OrderVatType, bool) {
	if o == nil || IsNil(o.Vat) {
		return nil, false
	}
	return o.Vat, true
}

// HasVat returns a boolean if a field has been set.
func (o *BriefOrderItemDTO) HasVat() bool {
	if o != nil && !IsNil(o.Vat) {
		return true
	}

	return false
}

// SetVat gets a reference to the given OrderVatType and assigns it to the Vat field.
func (o *BriefOrderItemDTO) SetVat(v OrderVatType) {
	o.Vat = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *BriefOrderItemDTO) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BriefOrderItemDTO) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *BriefOrderItemDTO) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *BriefOrderItemDTO) SetCount(v int32) {
	o.Count = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *BriefOrderItemDTO) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BriefOrderItemDTO) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *BriefOrderItemDTO) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *BriefOrderItemDTO) SetPrice(v float32) {
	o.Price = &v
}

// GetOfferName returns the OfferName field value if set, zero value otherwise.
func (o *BriefOrderItemDTO) GetOfferName() string {
	if o == nil || IsNil(o.OfferName) {
		var ret string
		return ret
	}
	return *o.OfferName
}

// GetOfferNameOk returns a tuple with the OfferName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BriefOrderItemDTO) GetOfferNameOk() (*string, bool) {
	if o == nil || IsNil(o.OfferName) {
		return nil, false
	}
	return o.OfferName, true
}

// HasOfferName returns a boolean if a field has been set.
func (o *BriefOrderItemDTO) HasOfferName() bool {
	if o != nil && !IsNil(o.OfferName) {
		return true
	}

	return false
}

// SetOfferName gets a reference to the given string and assigns it to the OfferName field.
func (o *BriefOrderItemDTO) SetOfferName(v string) {
	o.OfferName = &v
}

// GetOfferId returns the OfferId field value if set, zero value otherwise.
func (o *BriefOrderItemDTO) GetOfferId() string {
	if o == nil || IsNil(o.OfferId) {
		var ret string
		return ret
	}
	return *o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BriefOrderItemDTO) GetOfferIdOk() (*string, bool) {
	if o == nil || IsNil(o.OfferId) {
		return nil, false
	}
	return o.OfferId, true
}

// HasOfferId returns a boolean if a field has been set.
func (o *BriefOrderItemDTO) HasOfferId() bool {
	if o != nil && !IsNil(o.OfferId) {
		return true
	}

	return false
}

// SetOfferId gets a reference to the given string and assigns it to the OfferId field.
func (o *BriefOrderItemDTO) SetOfferId(v string) {
	o.OfferId = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BriefOrderItemDTO) GetInstances() []OrderItemInstanceDTO {
	if o == nil {
		var ret []OrderItemInstanceDTO
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BriefOrderItemDTO) GetInstancesOk() ([]OrderItemInstanceDTO, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *BriefOrderItemDTO) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []OrderItemInstanceDTO and assigns it to the Instances field.
func (o *BriefOrderItemDTO) SetInstances(v []OrderItemInstanceDTO) {
	o.Instances = v
}

func (o BriefOrderItemDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BriefOrderItemDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Vat) {
		toSerialize["vat"] = o.Vat
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.OfferName) {
		toSerialize["offerName"] = o.OfferName
	}
	if !IsNil(o.OfferId) {
		toSerialize["offerId"] = o.OfferId
	}
	if o.Instances != nil {
		toSerialize["instances"] = o.Instances
	}
	return toSerialize, nil
}

type NullableBriefOrderItemDTO struct {
	value *BriefOrderItemDTO
	isSet bool
}

func (v NullableBriefOrderItemDTO) Get() *BriefOrderItemDTO {
	return v.value
}

func (v *NullableBriefOrderItemDTO) Set(val *BriefOrderItemDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableBriefOrderItemDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableBriefOrderItemDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBriefOrderItemDTO(val *BriefOrderItemDTO) *NullableBriefOrderItemDTO {
	return &NullableBriefOrderItemDTO{value: val, isSet: true}
}

func (v NullableBriefOrderItemDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBriefOrderItemDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


