/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RegionType Тип региона.  Возможные значения:  * `CITY_DISTRICT` — район города.  * `CITY` — крупный город.  * `CONTINENT` — континент.  * `COUNTRY_DISTRICT` — область.  * `COUNTRY` — страна.  * `REGION` — регион.  * `REPUBLIC_AREA` — район субъекта федерации.  * `REPUBLIC` — субъект федерации.  * `SUBWAY_STATION` — станция метро.  * `VILLAGE` — город.  * `OTHER` — неизвестный регион. 
type RegionType string

// List of RegionType
const (
	OTHER RegionType = "OTHER"
	CONTINENT RegionType = "CONTINENT"
	REGION RegionType = "REGION"
	COUNTRY RegionType = "COUNTRY"
	COUNTRY_DISTRICT RegionType = "COUNTRY_DISTRICT"
	REPUBLIC RegionType = "REPUBLIC"
	CITY RegionType = "CITY"
	VILLAGE RegionType = "VILLAGE"
	CITY_DISTRICT RegionType = "CITY_DISTRICT"
	SUBWAY_STATION RegionType = "SUBWAY_STATION"
	REPUBLIC_AREA RegionType = "REPUBLIC_AREA"
)

// All allowed values of RegionType enum
var AllowedRegionTypeEnumValues = []RegionType{
	"OTHER",
	"CONTINENT",
	"REGION",
	"COUNTRY",
	"COUNTRY_DISTRICT",
	"REPUBLIC",
	"CITY",
	"VILLAGE",
	"CITY_DISTRICT",
	"SUBWAY_STATION",
	"REPUBLIC_AREA",
}

func (v *RegionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegionType(value)
	for _, existing := range AllowedRegionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegionType", value)
}

// NewRegionTypeFromValue returns a pointer to a valid RegionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegionTypeFromValue(v string) (*RegionType, error) {
	ev := RegionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegionType: valid values are %v", v, AllowedRegionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegionType) IsValid() bool {
	for _, existing := range AllowedRegionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RegionType value
func (v RegionType) Ptr() *RegionType {
	return &v
}

type NullableRegionType struct {
	value *RegionType
	isSet bool
}

func (v NullableRegionType) Get() *RegionType {
	return v.value
}

func (v *NullableRegionType) Set(val *RegionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionType(val *RegionType) *NullableRegionType {
	return &NullableRegionType{value: val, isSet: true}
}

func (v NullableRegionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

