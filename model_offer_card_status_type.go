/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OfferCardStatusType Статус карточки товара:  * `HAS_CARD_CAN_NOT_UPDATE` — Карточка Маркета. * `HAS_CARD_CAN_UPDATE` — Можно дополнить. * `HAS_CARD_CAN_UPDATE_ERRORS` — Изменения не приняты. * `HAS_CARD_CAN_UPDATE_PROCESSING` — Изменения на проверке. * `NO_CARD_NEED_CONTENT` — Создайте карточку. * `NO_CARD_MARKET_WILL_CREATE` — Создаст Маркет. * `NO_CARD_ERRORS` — Не создана из-за ошибки. * `NO_CARD_PROCESSING` — Проверяем данные. * `NO_CARD_ADD_TO_CAMPAIGN` — Разместите товар в магазине.  [Что обозначает каждый из статусов](https://yandex.ru/support/marketplace/assortment/content/statuses.html) 
type OfferCardStatusType string

// List of OfferCardStatusType
const (
	HAS_CARD_CAN_NOT_UPDATE OfferCardStatusType = "HAS_CARD_CAN_NOT_UPDATE"
	HAS_CARD_CAN_UPDATE OfferCardStatusType = "HAS_CARD_CAN_UPDATE"
	HAS_CARD_CAN_UPDATE_ERRORS OfferCardStatusType = "HAS_CARD_CAN_UPDATE_ERRORS"
	HAS_CARD_CAN_UPDATE_PROCESSING OfferCardStatusType = "HAS_CARD_CAN_UPDATE_PROCESSING"
	NO_CARD_NEED_CONTENT OfferCardStatusType = "NO_CARD_NEED_CONTENT"
	NO_CARD_MARKET_WILL_CREATE OfferCardStatusType = "NO_CARD_MARKET_WILL_CREATE"
	NO_CARD_ERRORS OfferCardStatusType = "NO_CARD_ERRORS"
	NO_CARD_PROCESSING OfferCardStatusType = "NO_CARD_PROCESSING"
	NO_CARD_ADD_TO_CAMPAIGN OfferCardStatusType = "NO_CARD_ADD_TO_CAMPAIGN"
)

// All allowed values of OfferCardStatusType enum
var AllowedOfferCardStatusTypeEnumValues = []OfferCardStatusType{
	"HAS_CARD_CAN_NOT_UPDATE",
	"HAS_CARD_CAN_UPDATE",
	"HAS_CARD_CAN_UPDATE_ERRORS",
	"HAS_CARD_CAN_UPDATE_PROCESSING",
	"NO_CARD_NEED_CONTENT",
	"NO_CARD_MARKET_WILL_CREATE",
	"NO_CARD_ERRORS",
	"NO_CARD_PROCESSING",
	"NO_CARD_ADD_TO_CAMPAIGN",
}

func (v *OfferCardStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OfferCardStatusType(value)
	for _, existing := range AllowedOfferCardStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OfferCardStatusType", value)
}

// NewOfferCardStatusTypeFromValue returns a pointer to a valid OfferCardStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOfferCardStatusTypeFromValue(v string) (*OfferCardStatusType, error) {
	ev := OfferCardStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OfferCardStatusType: valid values are %v", v, AllowedOfferCardStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OfferCardStatusType) IsValid() bool {
	for _, existing := range AllowedOfferCardStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OfferCardStatusType value
func (v OfferCardStatusType) Ptr() *OfferCardStatusType {
	return &v
}

type NullableOfferCardStatusType struct {
	value *OfferCardStatusType
	isSet bool
}

func (v NullableOfferCardStatusType) Get() *OfferCardStatusType {
	return v.value
}

func (v *NullableOfferCardStatusType) Set(val *OfferCardStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferCardStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferCardStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferCardStatusType(val *OfferCardStatusType) *NullableOfferCardStatusType {
	return &NullableOfferCardStatusType{value: val, isSet: true}
}

func (v NullableOfferCardStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferCardStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

