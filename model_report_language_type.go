/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReportLanguageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportLanguageType{}

// ReportLanguageType Язык отчета:  * `RU` — русский язык. * `EN` — английский язык.
type ReportLanguageType struct {
}

// NewReportLanguageType instantiates a new ReportLanguageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportLanguageType() *ReportLanguageType {
	this := ReportLanguageType{}
	return &this
}

// NewReportLanguageTypeWithDefaults instantiates a new ReportLanguageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportLanguageTypeWithDefaults() *ReportLanguageType {
	this := ReportLanguageType{}
	return &this
}

func (o ReportLanguageType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportLanguageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

type NullableReportLanguageType struct {
	value ReportLanguageType
	isSet bool
}

func (v NullableReportLanguageType) Get() ReportLanguageType {
	return v.value
}

func (v *NullableReportLanguageType) Set(val ReportLanguageType) {
	v.value = val
	v.isSet = true
}

func (v NullableReportLanguageType) IsSet() bool {
	return v.isSet
}

func (v *NullableReportLanguageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportLanguageType(val ReportLanguageType) *NullableReportLanguageType {
	return &NullableReportLanguageType{value: val, isSet: true}
}

func (v NullableReportLanguageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportLanguageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
