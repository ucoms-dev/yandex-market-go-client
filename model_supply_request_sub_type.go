/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SupplyRequestSubType Подтип заявки:  * `DEFAULT` — поставка товаров на склад хранения или вывоз с него. * `XDOC` — поставка товаров через транзитный склад или вывоз с него. * `INVENTORYING_SUPPLY` — инвентаризация на складе по запросу магазина. * `INVENTORYING_SUPPLY_WAREHOUSE_BASED_PER_SUPPLIER` — инвентаризация на складе по запросу склада. * `MOVEMENT_SUPPLY` — входящее перемещение между складами.      При перемещении между складами создаются 2 заявки — `MOVEMENT_SUPPLY` и `MOVEMENT_WITHDRAW`. * `ADDITIONAL_SUPPLY` — дополнительная поставка непринятых товаров. * `VIRTUAL_DISTRIBUTION_CENTER` — родительская заявка при [мультипоставке](*multisupply). * `VIRTUAL_DISTRIBUTION_CENTER_CHILD` — дочерняя заявка при [мультипоставке](*multisupply). * `FORCE_PLAN` — автоматическая утилизация по запросу склада. * `FORCE_PLAN_ANOMALY_PER_SUPPLY` — утилизация непринятых товаров. * `PLAN_BY_SUPPLIER` — утилизация по запросу магазина. * `ANOMALY_WITHDRAW` — вывоз непринятых товаров. * `FIX_LOST_INVENTORYING` — товары, которые не нашли после второй инвентаризации. * `OPER_LOST_INVENTORYING` — товары, которые не нашли после первой инвентаризации. * `MOVEMENT_WITHDRAW` — исходящее перемещение между складами.      При перемещении между складами создаются 2 заявки — `MOVEMENT_SUPPLY` и `MOVEMENT_WITHDRAW`. * `MISGRADING_SUPPLY` — пересортица в большую сторону. * `MISGRADING_WITHDRAW` — пересортица в меньшую сторону. * `MAN_UTIL` — ручная утилизация по запросу склада.
type SupplyRequestSubType string

// List of SupplyRequestSubType
const (
	SupplyRequestSubType_DEFAULT                                          SupplyRequestSubType = "DEFAULT"
	SupplyRequestSubType_XDOC                                             SupplyRequestSubType = "XDOC"
	SupplyRequestSubType_INVENTORYING_SUPPLY                              SupplyRequestSubType = "INVENTORYING_SUPPLY"
	SupplyRequestSubType_INVENTORYING_SUPPLY_WAREHOUSE_BASED_PER_SUPPLIER SupplyRequestSubType = "INVENTORYING_SUPPLY_WAREHOUSE_BASED_PER_SUPPLIER"
	SupplyRequestSubType_MOVEMENT_SUPPLY                                  SupplyRequestSubType = "MOVEMENT_SUPPLY"
	SupplyRequestSubType_ADDITIONAL_SUPPLY                                SupplyRequestSubType = "ADDITIONAL_SUPPLY"
	SupplyRequestSubType_VIRTUAL_DISTRIBUTION_CENTER                      SupplyRequestSubType = "VIRTUAL_DISTRIBUTION_CENTER"
	SupplyRequestSubType_VIRTUAL_DISTRIBUTION_CENTER_CHILD                SupplyRequestSubType = "VIRTUAL_DISTRIBUTION_CENTER_CHILD"
	SupplyRequestSubType_FORCE_PLAN                                       SupplyRequestSubType = "FORCE_PLAN"
	SupplyRequestSubType_FORCE_PLAN_ANOMALY_PER_SUPPLY                    SupplyRequestSubType = "FORCE_PLAN_ANOMALY_PER_SUPPLY"
	SupplyRequestSubType_PLAN_BY_SUPPLIER                                 SupplyRequestSubType = "PLAN_BY_SUPPLIER"
	SupplyRequestSubType_ANOMALY_WITHDRAW                                 SupplyRequestSubType = "ANOMALY_WITHDRAW"
	SupplyRequestSubType_FIX_LOST_INVENTORYING                            SupplyRequestSubType = "FIX_LOST_INVENTORYING"
	SupplyRequestSubType_OPER_LOST_INVENTORYING                           SupplyRequestSubType = "OPER_LOST_INVENTORYING"
	SupplyRequestSubType_MOVEMENT_WITHDRAW                                SupplyRequestSubType = "MOVEMENT_WITHDRAW"
	SupplyRequestSubType_MISGRADING_SUPPLY                                SupplyRequestSubType = "MISGRADING_SUPPLY"
	SupplyRequestSubType_MISGRADING_WITHDRAW                              SupplyRequestSubType = "MISGRADING_WITHDRAW"
	SupplyRequestSubType_MAN_UTIL                                         SupplyRequestSubType = "MAN_UTIL"
)

// All allowed values of SupplyRequestSubType enum
var AllowedSupplyRequestSubTypeEnumValues = []SupplyRequestSubType{
	"DEFAULT",
	"XDOC",
	"INVENTORYING_SUPPLY",
	"INVENTORYING_SUPPLY_WAREHOUSE_BASED_PER_SUPPLIER",
	"MOVEMENT_SUPPLY",
	"ADDITIONAL_SUPPLY",
	"VIRTUAL_DISTRIBUTION_CENTER",
	"VIRTUAL_DISTRIBUTION_CENTER_CHILD",
	"FORCE_PLAN",
	"FORCE_PLAN_ANOMALY_PER_SUPPLY",
	"PLAN_BY_SUPPLIER",
	"ANOMALY_WITHDRAW",
	"FIX_LOST_INVENTORYING",
	"OPER_LOST_INVENTORYING",
	"MOVEMENT_WITHDRAW",
	"MISGRADING_SUPPLY",
	"MISGRADING_WITHDRAW",
	"MAN_UTIL",
}

func (v *SupplyRequestSubType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SupplyRequestSubType(value)
	for _, existing := range AllowedSupplyRequestSubTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SupplyRequestSubType", value)
}

// NewSupplyRequestSubTypeFromValue returns a pointer to a valid SupplyRequestSubType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSupplyRequestSubTypeFromValue(v string) (*SupplyRequestSubType, error) {
	ev := SupplyRequestSubType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SupplyRequestSubType: valid values are %v", v, AllowedSupplyRequestSubTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SupplyRequestSubType) IsValid() bool {
	for _, existing := range AllowedSupplyRequestSubTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SupplyRequestSubType value
func (v SupplyRequestSubType) Ptr() *SupplyRequestSubType {
	return &v
}

type NullableSupplyRequestSubType struct {
	value *SupplyRequestSubType
	isSet bool
}

func (v NullableSupplyRequestSubType) Get() *SupplyRequestSubType {
	return v.value
}

func (v *NullableSupplyRequestSubType) Set(val *SupplyRequestSubType) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyRequestSubType) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyRequestSubType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyRequestSubType(val *SupplyRequestSubType) *NullableSupplyRequestSubType {
	return &NullableSupplyRequestSubType{value: val, isSet: true}
}

func (v NullableSupplyRequestSubType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyRequestSubType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
