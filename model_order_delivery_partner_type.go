/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderDeliveryPartnerType Тип сотрудничества со службой доставки в рамках конкретного заказа:  * `SHOP` — магазин работает со службой доставки напрямую или доставляет заказы самостоятельно.  * `YANDEX_MARKET` — магазин работает со службой доставки через Маркет.  * `UNKNOWN` — неизвестный тип. 
type OrderDeliveryPartnerType string

// List of OrderDeliveryPartnerType
const (
	SHOP OrderDeliveryPartnerType = "SHOP"
	YANDEX_MARKET OrderDeliveryPartnerType = "YANDEX_MARKET"
	UNKNOWN OrderDeliveryPartnerType = "UNKNOWN"
)

// All allowed values of OrderDeliveryPartnerType enum
var AllowedOrderDeliveryPartnerTypeEnumValues = []OrderDeliveryPartnerType{
	"SHOP",
	"YANDEX_MARKET",
	"UNKNOWN",
}

func (v *OrderDeliveryPartnerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderDeliveryPartnerType(value)
	for _, existing := range AllowedOrderDeliveryPartnerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderDeliveryPartnerType", value)
}

// NewOrderDeliveryPartnerTypeFromValue returns a pointer to a valid OrderDeliveryPartnerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderDeliveryPartnerTypeFromValue(v string) (*OrderDeliveryPartnerType, error) {
	ev := OrderDeliveryPartnerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderDeliveryPartnerType: valid values are %v", v, AllowedOrderDeliveryPartnerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderDeliveryPartnerType) IsValid() bool {
	for _, existing := range AllowedOrderDeliveryPartnerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderDeliveryPartnerType value
func (v OrderDeliveryPartnerType) Ptr() *OrderDeliveryPartnerType {
	return &v
}

type NullableOrderDeliveryPartnerType struct {
	value *OrderDeliveryPartnerType
	isSet bool
}

func (v NullableOrderDeliveryPartnerType) Get() *OrderDeliveryPartnerType {
	return v.value
}

func (v *NullableOrderDeliveryPartnerType) Set(val *OrderDeliveryPartnerType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDeliveryPartnerType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDeliveryPartnerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDeliveryPartnerType(val *OrderDeliveryPartnerType) *NullableOrderDeliveryPartnerType {
	return &NullableOrderDeliveryPartnerType{value: val, isSet: true}
}

func (v NullableOrderDeliveryPartnerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDeliveryPartnerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

