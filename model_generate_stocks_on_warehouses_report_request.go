/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GenerateStocksOnWarehousesReportRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenerateStocksOnWarehousesReportRequest{}

// GenerateStocksOnWarehousesReportRequest Данные, необходимые для генерации отчета.
type GenerateStocksOnWarehousesReportRequest struct {
	// Идентификатор кампании.  Его можно узнать с помощью запроса [GET campaigns](../../reference/campaigns/getCampaigns.md) или найти в кабинете продавца на Маркете — нажмите на название своего бизнеса и перейдите на страницу:    * **Модули и API** → блок **Передача данных Маркету**.   * **Лог запросов** → выпадающий список в блоке **Показывать логи**.  ⚠️ Не передавайте вместо него идентификатор магазина, который указан в кабинете продавца на Маркете рядом с названием магазина и в некоторых отчетах.
	CampaignId int64 `json:"campaignId"`
	// Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
	WarehouseIds []int64 `json:"warehouseIds,omitempty"`
	// Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
	ReportDate *string `json:"reportDate,omitempty"`
	// Фильтр по категориям на Маркете (кроме модели FBY).
	CategoryIds []int64 `json:"categoryIds,omitempty"`
	// Фильтр по наличию остатков (кроме модели FBY).
	HasStocks *bool `json:"hasStocks,omitempty"`
}

type _GenerateStocksOnWarehousesReportRequest GenerateStocksOnWarehousesReportRequest

// NewGenerateStocksOnWarehousesReportRequest instantiates a new GenerateStocksOnWarehousesReportRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateStocksOnWarehousesReportRequest(campaignId int64) *GenerateStocksOnWarehousesReportRequest {
	this := GenerateStocksOnWarehousesReportRequest{}
	this.CampaignId = campaignId
	return &this
}

// NewGenerateStocksOnWarehousesReportRequestWithDefaults instantiates a new GenerateStocksOnWarehousesReportRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateStocksOnWarehousesReportRequestWithDefaults() *GenerateStocksOnWarehousesReportRequest {
	this := GenerateStocksOnWarehousesReportRequest{}
	return &this
}

// GetCampaignId returns the CampaignId field value
func (o *GenerateStocksOnWarehousesReportRequest) GetCampaignId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CampaignId
}

// GetCampaignIdOk returns a tuple with the CampaignId field value
// and a boolean to check if the value has been set.
func (o *GenerateStocksOnWarehousesReportRequest) GetCampaignIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CampaignId, true
}

// SetCampaignId sets field value
func (o *GenerateStocksOnWarehousesReportRequest) SetCampaignId(v int64) {
	o.CampaignId = v
}

// GetWarehouseIds returns the WarehouseIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GenerateStocksOnWarehousesReportRequest) GetWarehouseIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.WarehouseIds
}

// GetWarehouseIdsOk returns a tuple with the WarehouseIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateStocksOnWarehousesReportRequest) GetWarehouseIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.WarehouseIds) {
		return nil, false
	}
	return o.WarehouseIds, true
}

// HasWarehouseIds returns a boolean if a field has been set.
func (o *GenerateStocksOnWarehousesReportRequest) HasWarehouseIds() bool {
	if o != nil && !IsNil(o.WarehouseIds) {
		return true
	}

	return false
}

// SetWarehouseIds gets a reference to the given []int64 and assigns it to the WarehouseIds field.
func (o *GenerateStocksOnWarehousesReportRequest) SetWarehouseIds(v []int64) {
	o.WarehouseIds = v
}

// GetReportDate returns the ReportDate field value if set, zero value otherwise.
func (o *GenerateStocksOnWarehousesReportRequest) GetReportDate() string {
	if o == nil || IsNil(o.ReportDate) {
		var ret string
		return ret
	}
	return *o.ReportDate
}

// GetReportDateOk returns a tuple with the ReportDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateStocksOnWarehousesReportRequest) GetReportDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReportDate) {
		return nil, false
	}
	return o.ReportDate, true
}

// HasReportDate returns a boolean if a field has been set.
func (o *GenerateStocksOnWarehousesReportRequest) HasReportDate() bool {
	if o != nil && !IsNil(o.ReportDate) {
		return true
	}

	return false
}

// SetReportDate gets a reference to the given string and assigns it to the ReportDate field.
func (o *GenerateStocksOnWarehousesReportRequest) SetReportDate(v string) {
	o.ReportDate = &v
}

// GetCategoryIds returns the CategoryIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GenerateStocksOnWarehousesReportRequest) GetCategoryIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.CategoryIds
}

// GetCategoryIdsOk returns a tuple with the CategoryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateStocksOnWarehousesReportRequest) GetCategoryIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.CategoryIds) {
		return nil, false
	}
	return o.CategoryIds, true
}

// HasCategoryIds returns a boolean if a field has been set.
func (o *GenerateStocksOnWarehousesReportRequest) HasCategoryIds() bool {
	if o != nil && !IsNil(o.CategoryIds) {
		return true
	}

	return false
}

// SetCategoryIds gets a reference to the given []int64 and assigns it to the CategoryIds field.
func (o *GenerateStocksOnWarehousesReportRequest) SetCategoryIds(v []int64) {
	o.CategoryIds = v
}

// GetHasStocks returns the HasStocks field value if set, zero value otherwise.
func (o *GenerateStocksOnWarehousesReportRequest) GetHasStocks() bool {
	if o == nil || IsNil(o.HasStocks) {
		var ret bool
		return ret
	}
	return *o.HasStocks
}

// GetHasStocksOk returns a tuple with the HasStocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateStocksOnWarehousesReportRequest) GetHasStocksOk() (*bool, bool) {
	if o == nil || IsNil(o.HasStocks) {
		return nil, false
	}
	return o.HasStocks, true
}

// HasHasStocks returns a boolean if a field has been set.
func (o *GenerateStocksOnWarehousesReportRequest) HasHasStocks() bool {
	if o != nil && !IsNil(o.HasStocks) {
		return true
	}

	return false
}

// SetHasStocks gets a reference to the given bool and assigns it to the HasStocks field.
func (o *GenerateStocksOnWarehousesReportRequest) SetHasStocks(v bool) {
	o.HasStocks = &v
}

func (o GenerateStocksOnWarehousesReportRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateStocksOnWarehousesReportRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["campaignId"] = o.CampaignId
	if o.WarehouseIds != nil {
		toSerialize["warehouseIds"] = o.WarehouseIds
	}
	if !IsNil(o.ReportDate) {
		toSerialize["reportDate"] = o.ReportDate
	}
	if o.CategoryIds != nil {
		toSerialize["categoryIds"] = o.CategoryIds
	}
	if !IsNil(o.HasStocks) {
		toSerialize["hasStocks"] = o.HasStocks
	}
	return toSerialize, nil
}

func (o *GenerateStocksOnWarehousesReportRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"campaignId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenerateStocksOnWarehousesReportRequest := _GenerateStocksOnWarehousesReportRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGenerateStocksOnWarehousesReportRequest)

	if err != nil {
		return err
	}

	*o = GenerateStocksOnWarehousesReportRequest(varGenerateStocksOnWarehousesReportRequest)

	return err
}

type NullableGenerateStocksOnWarehousesReportRequest struct {
	value *GenerateStocksOnWarehousesReportRequest
	isSet bool
}

func (v NullableGenerateStocksOnWarehousesReportRequest) Get() *GenerateStocksOnWarehousesReportRequest {
	return v.value
}

func (v *NullableGenerateStocksOnWarehousesReportRequest) Set(val *GenerateStocksOnWarehousesReportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateStocksOnWarehousesReportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateStocksOnWarehousesReportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateStocksOnWarehousesReportRequest(val *GenerateStocksOnWarehousesReportRequest) *NullableGenerateStocksOnWarehousesReportRequest {
	return &NullableGenerateStocksOnWarehousesReportRequest{value: val, isSet: true}
}

func (v NullableGenerateStocksOnWarehousesReportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateStocksOnWarehousesReportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
