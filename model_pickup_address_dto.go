/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PickupAddressDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PickupAddressDTO{}

// PickupAddressDTO Адрес доставки.
type PickupAddressDTO struct {
	// Страна.
	Country *string `json:"country,omitempty"`
	// Город.
	City *string `json:"city,omitempty"`
	// Улица.
	Street *string `json:"street,omitempty"`
	// Номер дома.
	House *string `json:"house,omitempty"`
	// Почтовый индекс.
	Postcode *string `json:"postcode,omitempty"`
}

// NewPickupAddressDTO instantiates a new PickupAddressDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPickupAddressDTO() *PickupAddressDTO {
	this := PickupAddressDTO{}
	return &this
}

// NewPickupAddressDTOWithDefaults instantiates a new PickupAddressDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPickupAddressDTOWithDefaults() *PickupAddressDTO {
	this := PickupAddressDTO{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PickupAddressDTO) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PickupAddressDTO) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PickupAddressDTO) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *PickupAddressDTO) SetCountry(v string) {
	o.Country = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *PickupAddressDTO) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PickupAddressDTO) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *PickupAddressDTO) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *PickupAddressDTO) SetCity(v string) {
	o.City = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *PickupAddressDTO) GetStreet() string {
	if o == nil || IsNil(o.Street) {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PickupAddressDTO) GetStreetOk() (*string, bool) {
	if o == nil || IsNil(o.Street) {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *PickupAddressDTO) HasStreet() bool {
	if o != nil && !IsNil(o.Street) {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *PickupAddressDTO) SetStreet(v string) {
	o.Street = &v
}

// GetHouse returns the House field value if set, zero value otherwise.
func (o *PickupAddressDTO) GetHouse() string {
	if o == nil || IsNil(o.House) {
		var ret string
		return ret
	}
	return *o.House
}

// GetHouseOk returns a tuple with the House field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PickupAddressDTO) GetHouseOk() (*string, bool) {
	if o == nil || IsNil(o.House) {
		return nil, false
	}
	return o.House, true
}

// HasHouse returns a boolean if a field has been set.
func (o *PickupAddressDTO) HasHouse() bool {
	if o != nil && !IsNil(o.House) {
		return true
	}

	return false
}

// SetHouse gets a reference to the given string and assigns it to the House field.
func (o *PickupAddressDTO) SetHouse(v string) {
	o.House = &v
}

// GetPostcode returns the Postcode field value if set, zero value otherwise.
func (o *PickupAddressDTO) GetPostcode() string {
	if o == nil || IsNil(o.Postcode) {
		var ret string
		return ret
	}
	return *o.Postcode
}

// GetPostcodeOk returns a tuple with the Postcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PickupAddressDTO) GetPostcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Postcode) {
		return nil, false
	}
	return o.Postcode, true
}

// HasPostcode returns a boolean if a field has been set.
func (o *PickupAddressDTO) HasPostcode() bool {
	if o != nil && !IsNil(o.Postcode) {
		return true
	}

	return false
}

// SetPostcode gets a reference to the given string and assigns it to the Postcode field.
func (o *PickupAddressDTO) SetPostcode(v string) {
	o.Postcode = &v
}

func (o PickupAddressDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PickupAddressDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Street) {
		toSerialize["street"] = o.Street
	}
	if !IsNil(o.House) {
		toSerialize["house"] = o.House
	}
	if !IsNil(o.Postcode) {
		toSerialize["postcode"] = o.Postcode
	}
	return toSerialize, nil
}

type NullablePickupAddressDTO struct {
	value *PickupAddressDTO
	isSet bool
}

func (v NullablePickupAddressDTO) Get() *PickupAddressDTO {
	return v.value
}

func (v *NullablePickupAddressDTO) Set(val *PickupAddressDTO) {
	v.value = val
	v.isSet = true
}

func (v NullablePickupAddressDTO) IsSet() bool {
	return v.isSet
}

func (v *NullablePickupAddressDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePickupAddressDTO(val *PickupAddressDTO) *NullablePickupAddressDTO {
	return &NullablePickupAddressDTO{value: val, isSet: true}
}

func (v NullablePickupAddressDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePickupAddressDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


