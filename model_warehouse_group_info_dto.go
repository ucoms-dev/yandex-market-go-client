/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WarehouseGroupInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WarehouseGroupInfoDTO{}

// WarehouseGroupInfoDTO Информация о группе, к которой принадлежит склад.  Возвращается только для складов в группах.  [Что такое группы складов и зачем они нужны](https://yandex.ru/support/marketplace/assortment/operations/stocks.html#unified-stocks)
type WarehouseGroupInfoDTO struct {
	// Название группы, к которой принадлежит склад.
	Name string `json:"name"`
	// Идентификатор группы складов.
	Id int64 `json:"id"`
}

type _WarehouseGroupInfoDTO WarehouseGroupInfoDTO

// NewWarehouseGroupInfoDTO instantiates a new WarehouseGroupInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWarehouseGroupInfoDTO(name string, id int64) *WarehouseGroupInfoDTO {
	this := WarehouseGroupInfoDTO{}
	this.Name = name
	this.Id = id
	return &this
}

// NewWarehouseGroupInfoDTOWithDefaults instantiates a new WarehouseGroupInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWarehouseGroupInfoDTOWithDefaults() *WarehouseGroupInfoDTO {
	this := WarehouseGroupInfoDTO{}
	return &this
}

// GetName returns the Name field value
func (o *WarehouseGroupInfoDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WarehouseGroupInfoDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WarehouseGroupInfoDTO) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *WarehouseGroupInfoDTO) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WarehouseGroupInfoDTO) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WarehouseGroupInfoDTO) SetId(v int64) {
	o.Id = v
}

func (o WarehouseGroupInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WarehouseGroupInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *WarehouseGroupInfoDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWarehouseGroupInfoDTO := _WarehouseGroupInfoDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWarehouseGroupInfoDTO)

	if err != nil {
		return err
	}

	*o = WarehouseGroupInfoDTO(varWarehouseGroupInfoDTO)

	return err
}

type NullableWarehouseGroupInfoDTO struct {
	value *WarehouseGroupInfoDTO
	isSet bool
}

func (v NullableWarehouseGroupInfoDTO) Get() *WarehouseGroupInfoDTO {
	return v.value
}

func (v *NullableWarehouseGroupInfoDTO) Set(val *WarehouseGroupInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableWarehouseGroupInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableWarehouseGroupInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarehouseGroupInfoDTO(val *WarehouseGroupInfoDTO) *NullableWarehouseGroupInfoDTO {
	return &NullableWarehouseGroupInfoDTO{value: val, isSet: true}
}

func (v NullableWarehouseGroupInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarehouseGroupInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
