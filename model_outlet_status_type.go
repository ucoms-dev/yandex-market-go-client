/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OutletStatusType Статус точки продаж.  Возможные значения:  * `AT_MODERATION` — проверяется. * `FAILED` — не прошла проверку и отклонена модератором. * `MODERATED` — проверена и одобрена. * `NONMODERATED` — новая точка, нуждается в проверке. * `UNKNOWN` — статус не указан. При определении статуса произошла ошибка.
type OutletStatusType string

// List of OutletStatusType
const (
	OutletStatusType_AT_MODERATION OutletStatusType = "AT_MODERATION"
	OutletStatusType_FAILED        OutletStatusType = "FAILED"
	OutletStatusType_MODERATED     OutletStatusType = "MODERATED"
	OutletStatusType_NONMODERATED  OutletStatusType = "NONMODERATED"
	OutletStatusType_UNKNOWN       OutletStatusType = "UNKNOWN"
)

// All allowed values of OutletStatusType enum
var AllowedOutletStatusTypeEnumValues = []OutletStatusType{
	"AT_MODERATION",
	"FAILED",
	"MODERATED",
	"NONMODERATED",
	"UNKNOWN",
}

func (v *OutletStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OutletStatusType(value)
	for _, existing := range AllowedOutletStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OutletStatusType", value)
}

// NewOutletStatusTypeFromValue returns a pointer to a valid OutletStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOutletStatusTypeFromValue(v string) (*OutletStatusType, error) {
	ev := OutletStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OutletStatusType: valid values are %v", v, AllowedOutletStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OutletStatusType) IsValid() bool {
	for _, existing := range AllowedOutletStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OutletStatusType value
func (v OutletStatusType) Ptr() *OutletStatusType {
	return &v
}

type NullableOutletStatusType struct {
	value *OutletStatusType
	isSet bool
}

func (v NullableOutletStatusType) Get() *OutletStatusType {
	return v.value
}

func (v *NullableOutletStatusType) Set(val *OutletStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableOutletStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableOutletStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutletStatusType(val *OutletStatusType) *NullableOutletStatusType {
	return &NullableOutletStatusType{value: val, isSet: true}
}

func (v NullableOutletStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutletStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
