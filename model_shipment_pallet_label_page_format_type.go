/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ShipmentPalletLabelPageFormatType Формат страницы: * `A4` — формат страницы A4. * `A8` — формат страницы A8. 
type ShipmentPalletLabelPageFormatType string

// List of ShipmentPalletLabelPageFormatType
const (
	A4 ShipmentPalletLabelPageFormatType = "A4"
	A8 ShipmentPalletLabelPageFormatType = "A8"
)

// All allowed values of ShipmentPalletLabelPageFormatType enum
var AllowedShipmentPalletLabelPageFormatTypeEnumValues = []ShipmentPalletLabelPageFormatType{
	"A4",
	"A8",
}

func (v *ShipmentPalletLabelPageFormatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShipmentPalletLabelPageFormatType(value)
	for _, existing := range AllowedShipmentPalletLabelPageFormatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShipmentPalletLabelPageFormatType", value)
}

// NewShipmentPalletLabelPageFormatTypeFromValue returns a pointer to a valid ShipmentPalletLabelPageFormatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShipmentPalletLabelPageFormatTypeFromValue(v string) (*ShipmentPalletLabelPageFormatType, error) {
	ev := ShipmentPalletLabelPageFormatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShipmentPalletLabelPageFormatType: valid values are %v", v, AllowedShipmentPalletLabelPageFormatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShipmentPalletLabelPageFormatType) IsValid() bool {
	for _, existing := range AllowedShipmentPalletLabelPageFormatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShipmentPalletLabelPageFormatType value
func (v ShipmentPalletLabelPageFormatType) Ptr() *ShipmentPalletLabelPageFormatType {
	return &v
}

type NullableShipmentPalletLabelPageFormatType struct {
	value *ShipmentPalletLabelPageFormatType
	isSet bool
}

func (v NullableShipmentPalletLabelPageFormatType) Get() *ShipmentPalletLabelPageFormatType {
	return v.value
}

func (v *NullableShipmentPalletLabelPageFormatType) Set(val *ShipmentPalletLabelPageFormatType) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentPalletLabelPageFormatType) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentPalletLabelPageFormatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentPalletLabelPageFormatType(val *ShipmentPalletLabelPageFormatType) *NullableShipmentPalletLabelPageFormatType {
	return &NullableShipmentPalletLabelPageFormatType{value: val, isSet: true}
}

func (v NullableShipmentPalletLabelPageFormatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentPalletLabelPageFormatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

