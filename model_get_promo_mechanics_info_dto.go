/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetPromoMechanicsInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetPromoMechanicsInfoDTO{}

// GetPromoMechanicsInfoDTO Информация о типе акции.
type GetPromoMechanicsInfoDTO struct {
	Type MechanicsType `json:"type"`
	PromocodeInfo *GetPromoPromocodeInfoDTO `json:"promocodeInfo,omitempty"`
}

type _GetPromoMechanicsInfoDTO GetPromoMechanicsInfoDTO

// NewGetPromoMechanicsInfoDTO instantiates a new GetPromoMechanicsInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetPromoMechanicsInfoDTO(type_ MechanicsType) *GetPromoMechanicsInfoDTO {
	this := GetPromoMechanicsInfoDTO{}
	this.Type = type_
	return &this
}

// NewGetPromoMechanicsInfoDTOWithDefaults instantiates a new GetPromoMechanicsInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetPromoMechanicsInfoDTOWithDefaults() *GetPromoMechanicsInfoDTO {
	this := GetPromoMechanicsInfoDTO{}
	return &this
}

// GetType returns the Type field value
func (o *GetPromoMechanicsInfoDTO) GetType() MechanicsType {
	if o == nil {
		var ret MechanicsType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GetPromoMechanicsInfoDTO) GetTypeOk() (*MechanicsType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GetPromoMechanicsInfoDTO) SetType(v MechanicsType) {
	o.Type = v
}

// GetPromocodeInfo returns the PromocodeInfo field value if set, zero value otherwise.
func (o *GetPromoMechanicsInfoDTO) GetPromocodeInfo() GetPromoPromocodeInfoDTO {
	if o == nil || IsNil(o.PromocodeInfo) {
		var ret GetPromoPromocodeInfoDTO
		return ret
	}
	return *o.PromocodeInfo
}

// GetPromocodeInfoOk returns a tuple with the PromocodeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPromoMechanicsInfoDTO) GetPromocodeInfoOk() (*GetPromoPromocodeInfoDTO, bool) {
	if o == nil || IsNil(o.PromocodeInfo) {
		return nil, false
	}
	return o.PromocodeInfo, true
}

// HasPromocodeInfo returns a boolean if a field has been set.
func (o *GetPromoMechanicsInfoDTO) HasPromocodeInfo() bool {
	if o != nil && !IsNil(o.PromocodeInfo) {
		return true
	}

	return false
}

// SetPromocodeInfo gets a reference to the given GetPromoPromocodeInfoDTO and assigns it to the PromocodeInfo field.
func (o *GetPromoMechanicsInfoDTO) SetPromocodeInfo(v GetPromoPromocodeInfoDTO) {
	o.PromocodeInfo = &v
}

func (o GetPromoMechanicsInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetPromoMechanicsInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.PromocodeInfo) {
		toSerialize["promocodeInfo"] = o.PromocodeInfo
	}
	return toSerialize, nil
}

func (o *GetPromoMechanicsInfoDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetPromoMechanicsInfoDTO := _GetPromoMechanicsInfoDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetPromoMechanicsInfoDTO)

	if err != nil {
		return err
	}

	*o = GetPromoMechanicsInfoDTO(varGetPromoMechanicsInfoDTO)

	return err
}

type NullableGetPromoMechanicsInfoDTO struct {
	value *GetPromoMechanicsInfoDTO
	isSet bool
}

func (v NullableGetPromoMechanicsInfoDTO) Get() *GetPromoMechanicsInfoDTO {
	return v.value
}

func (v *NullableGetPromoMechanicsInfoDTO) Set(val *GetPromoMechanicsInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPromoMechanicsInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPromoMechanicsInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPromoMechanicsInfoDTO(val *GetPromoMechanicsInfoDTO) *NullableGetPromoMechanicsInfoDTO {
	return &NullableGetPromoMechanicsInfoDTO{value: val, isSet: true}
}

func (v NullableGetPromoMechanicsInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPromoMechanicsInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


