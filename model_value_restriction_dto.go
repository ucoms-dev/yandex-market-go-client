/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ValueRestrictionDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueRestrictionDTO{}

// ValueRestrictionDTO Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: `S`, `M`, `L`, `44`, `46`, `48`, `42/164`, `46/176`, `44S`.  Если ограничивающая характеристика **размерная сетка** принимает значение `RU`, список возможных значений размера сокращается до `44`, `46`, `48`. 
type ValueRestrictionDTO struct {
	// Идентификатор ограничивающей характеристики.
	LimitingParameterId int64 `json:"limitingParameterId"`
	// Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.
	LimitedValues []OptionValuesLimitedDTO `json:"limitedValues"`
}

type _ValueRestrictionDTO ValueRestrictionDTO

// NewValueRestrictionDTO instantiates a new ValueRestrictionDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueRestrictionDTO(limitingParameterId int64, limitedValues []OptionValuesLimitedDTO) *ValueRestrictionDTO {
	this := ValueRestrictionDTO{}
	this.LimitingParameterId = limitingParameterId
	this.LimitedValues = limitedValues
	return &this
}

// NewValueRestrictionDTOWithDefaults instantiates a new ValueRestrictionDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueRestrictionDTOWithDefaults() *ValueRestrictionDTO {
	this := ValueRestrictionDTO{}
	return &this
}

// GetLimitingParameterId returns the LimitingParameterId field value
func (o *ValueRestrictionDTO) GetLimitingParameterId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LimitingParameterId
}

// GetLimitingParameterIdOk returns a tuple with the LimitingParameterId field value
// and a boolean to check if the value has been set.
func (o *ValueRestrictionDTO) GetLimitingParameterIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LimitingParameterId, true
}

// SetLimitingParameterId sets field value
func (o *ValueRestrictionDTO) SetLimitingParameterId(v int64) {
	o.LimitingParameterId = v
}

// GetLimitedValues returns the LimitedValues field value
func (o *ValueRestrictionDTO) GetLimitedValues() []OptionValuesLimitedDTO {
	if o == nil {
		var ret []OptionValuesLimitedDTO
		return ret
	}

	return o.LimitedValues
}

// GetLimitedValuesOk returns a tuple with the LimitedValues field value
// and a boolean to check if the value has been set.
func (o *ValueRestrictionDTO) GetLimitedValuesOk() ([]OptionValuesLimitedDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.LimitedValues, true
}

// SetLimitedValues sets field value
func (o *ValueRestrictionDTO) SetLimitedValues(v []OptionValuesLimitedDTO) {
	o.LimitedValues = v
}

func (o ValueRestrictionDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueRestrictionDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limitingParameterId"] = o.LimitingParameterId
	toSerialize["limitedValues"] = o.LimitedValues
	return toSerialize, nil
}

func (o *ValueRestrictionDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"limitingParameterId",
		"limitedValues",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValueRestrictionDTO := _ValueRestrictionDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValueRestrictionDTO)

	if err != nil {
		return err
	}

	*o = ValueRestrictionDTO(varValueRestrictionDTO)

	return err
}

type NullableValueRestrictionDTO struct {
	value *ValueRestrictionDTO
	isSet bool
}

func (v NullableValueRestrictionDTO) Get() *ValueRestrictionDTO {
	return v.value
}

func (v *NullableValueRestrictionDTO) Set(val *ValueRestrictionDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableValueRestrictionDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableValueRestrictionDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueRestrictionDTO(val *ValueRestrictionDTO) *NullableValueRestrictionDTO {
	return &NullableValueRestrictionDTO{value: val, isSet: true}
}

func (v NullableValueRestrictionDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueRestrictionDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


