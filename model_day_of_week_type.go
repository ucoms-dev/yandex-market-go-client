/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DayOfWeekType День недели:  * `MONDAY` — понедельник. * `TUESDAY` — вторник. * `WEDNESDAY` — среда. * `THURSDAY` — четверг. * `FRIDAY` — пятница. * `SATURDAY` — суббота. * `SUNDAY` — воскресенье. 
type DayOfWeekType string

// List of DayOfWeekType
const (
	MONDAY DayOfWeekType = "MONDAY"
	TUESDAY DayOfWeekType = "TUESDAY"
	WEDNESDAY DayOfWeekType = "WEDNESDAY"
	THURSDAY DayOfWeekType = "THURSDAY"
	FRIDAY DayOfWeekType = "FRIDAY"
	SATURDAY DayOfWeekType = "SATURDAY"
	SUNDAY DayOfWeekType = "SUNDAY"
)

// All allowed values of DayOfWeekType enum
var AllowedDayOfWeekTypeEnumValues = []DayOfWeekType{
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY",
}

func (v *DayOfWeekType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DayOfWeekType(value)
	for _, existing := range AllowedDayOfWeekTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DayOfWeekType", value)
}

// NewDayOfWeekTypeFromValue returns a pointer to a valid DayOfWeekType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDayOfWeekTypeFromValue(v string) (*DayOfWeekType, error) {
	ev := DayOfWeekType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DayOfWeekType: valid values are %v", v, AllowedDayOfWeekTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DayOfWeekType) IsValid() bool {
	for _, existing := range AllowedDayOfWeekTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DayOfWeekType value
func (v DayOfWeekType) Ptr() *DayOfWeekType {
	return &v
}

type NullableDayOfWeekType struct {
	value *DayOfWeekType
	isSet bool
}

func (v NullableDayOfWeekType) Get() *DayOfWeekType {
	return v.value
}

func (v *NullableDayOfWeekType) Set(val *DayOfWeekType) {
	v.value = val
	v.isSet = true
}

func (v NullableDayOfWeekType) IsSet() bool {
	return v.isSet
}

func (v *NullableDayOfWeekType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDayOfWeekType(val *DayOfWeekType) *NullableDayOfWeekType {
	return &NullableDayOfWeekType{value: val, isSet: true}
}

func (v NullableDayOfWeekType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDayOfWeekType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

