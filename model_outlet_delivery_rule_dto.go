/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OutletDeliveryRuleDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutletDeliveryRuleDTO{}

// OutletDeliveryRuleDTO Информация об условиях доставки для данной точки продаж.
type OutletDeliveryRuleDTO struct {
	// Минимальный срок доставки товаров в точку продаж. Указан в рабочих днях.  Минимальное значение: `0` — доставка в день заказа.  Максимальное значение: `60`.  Допустимые сроки доставки (разница между `minDeliveryDays` и `maxDeliveryDays`) зависят от региона.  Для доставки по своему региону разница не должна превышать двух дней. Например, если `minDeliveryDays` равно 1, то для `maxDeliveryDays` допускаются значения от 1 до 3.  Для доставки в другие регионы:  * Если `minDeliveryDays` до 18 дней, разница не должна превышать четырех дней. Например, если `minDeliveryDays` равно 10, то для `maxDeliveryDays` допускаются значения от 10 до 14. * Если `minDeliveryDays` больше 18 дней, разница должна быть не больше чем в два раза. Например, если `minDeliveryDays` равно 21, то для `maxDeliveryDays` допускаются значения от 21 до 42.  Обязательный параметр, если `type=\"DEPOT\"` или `type=\"MIXED\"`.  Взаимоисключающий с параметром `unspecifiedDeliveryInterval`. 
	MinDeliveryDays *int32 `json:"minDeliveryDays,omitempty"`
	// Максимальный срок доставки товаров в точку продаж. Указан в рабочих днях.  Минимальное значение: `0` — доставка в день заказа.  Максимальное значение: `60`.  Допустимые сроки доставки (разница между `minDeliveryDays` и `maxDeliveryDays`) зависят от региона.  Для доставки по своему региону разница не должна превышать двух дней. Например, если `minDeliveryDays` равно 1, то для `maxDeliveryDays` допускаются значения от 1 до 3.  Для доставки в другие регионы:  * Если `minDeliveryDays` до 18 дней, разница не должна превышать четырех дней. Например, если `minDeliveryDays` равно 10, то для `maxDeliveryDays` допускаются значения от 10 до 14. * Если `minDeliveryDays` больше 18 дней, разница должна быть не больше чем в два раза. Например, если `minDeliveryDays` равно 21, то для `maxDeliveryDays` допускаются значения от 21 до 42.  Обязательный параметр, если `type=\"DEPOT\"` или `type=\"MIXED\"`.  Взаимоисключающий с параметром `unspecifiedDeliveryInterval`. 
	MaxDeliveryDays *int32 `json:"maxDeliveryDays,omitempty"`
	// Идентификатор службы доставки товаров в точку продаж.  Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md). 
	DeliveryServiceId *int64 `json:"deliveryServiceId,omitempty"`
	// Час, до которого покупателю нужно сделать заказ, чтобы он был доставлен в точку продаж в сроки от `minDeliveryDays` до `maxDeliveryDays`.  Если покупатель оформит заказ после указанного часа, он будет доставлен в сроки от `minDeliveryDays` + 1 рабочий день до `maxDeliveryDays` + 1 рабочий день.  Значение по умолчанию: `24`. 
	OrderBefore *int32 `json:"orderBefore,omitempty"`
	// Цена на товар, начиная с которой действует бесплатный самовывоз товара из точки продаж.
	PriceFreePickup *float32 `json:"priceFreePickup,omitempty"`
	// Признак доставки товаров в точку продаж на заказ.  Признак выставлен, если:  * точный срок доставки в точку продаж заранее неизвестен (например, если магазин собирает несколько заказов для отправки в точку или населенный пункт); * все товары изготавливаются или поставляются на заказ.  Возможные значения: * `true` — товары доставляются в точку продаж на заказ.  Параметр указывается только со значением `true`.  Взаимоисключающий с параметрами `minDeliveryDays` и `maxDeliveryDays`. 
	UnspecifiedDeliveryInterval *bool `json:"unspecifiedDeliveryInterval,omitempty"`
}

// NewOutletDeliveryRuleDTO instantiates a new OutletDeliveryRuleDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutletDeliveryRuleDTO() *OutletDeliveryRuleDTO {
	this := OutletDeliveryRuleDTO{}
	return &this
}

// NewOutletDeliveryRuleDTOWithDefaults instantiates a new OutletDeliveryRuleDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutletDeliveryRuleDTOWithDefaults() *OutletDeliveryRuleDTO {
	this := OutletDeliveryRuleDTO{}
	return &this
}

// GetMinDeliveryDays returns the MinDeliveryDays field value if set, zero value otherwise.
func (o *OutletDeliveryRuleDTO) GetMinDeliveryDays() int32 {
	if o == nil || IsNil(o.MinDeliveryDays) {
		var ret int32
		return ret
	}
	return *o.MinDeliveryDays
}

// GetMinDeliveryDaysOk returns a tuple with the MinDeliveryDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutletDeliveryRuleDTO) GetMinDeliveryDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.MinDeliveryDays) {
		return nil, false
	}
	return o.MinDeliveryDays, true
}

// HasMinDeliveryDays returns a boolean if a field has been set.
func (o *OutletDeliveryRuleDTO) HasMinDeliveryDays() bool {
	if o != nil && !IsNil(o.MinDeliveryDays) {
		return true
	}

	return false
}

// SetMinDeliveryDays gets a reference to the given int32 and assigns it to the MinDeliveryDays field.
func (o *OutletDeliveryRuleDTO) SetMinDeliveryDays(v int32) {
	o.MinDeliveryDays = &v
}

// GetMaxDeliveryDays returns the MaxDeliveryDays field value if set, zero value otherwise.
func (o *OutletDeliveryRuleDTO) GetMaxDeliveryDays() int32 {
	if o == nil || IsNil(o.MaxDeliveryDays) {
		var ret int32
		return ret
	}
	return *o.MaxDeliveryDays
}

// GetMaxDeliveryDaysOk returns a tuple with the MaxDeliveryDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutletDeliveryRuleDTO) GetMaxDeliveryDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDeliveryDays) {
		return nil, false
	}
	return o.MaxDeliveryDays, true
}

// HasMaxDeliveryDays returns a boolean if a field has been set.
func (o *OutletDeliveryRuleDTO) HasMaxDeliveryDays() bool {
	if o != nil && !IsNil(o.MaxDeliveryDays) {
		return true
	}

	return false
}

// SetMaxDeliveryDays gets a reference to the given int32 and assigns it to the MaxDeliveryDays field.
func (o *OutletDeliveryRuleDTO) SetMaxDeliveryDays(v int32) {
	o.MaxDeliveryDays = &v
}

// GetDeliveryServiceId returns the DeliveryServiceId field value if set, zero value otherwise.
func (o *OutletDeliveryRuleDTO) GetDeliveryServiceId() int64 {
	if o == nil || IsNil(o.DeliveryServiceId) {
		var ret int64
		return ret
	}
	return *o.DeliveryServiceId
}

// GetDeliveryServiceIdOk returns a tuple with the DeliveryServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutletDeliveryRuleDTO) GetDeliveryServiceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DeliveryServiceId) {
		return nil, false
	}
	return o.DeliveryServiceId, true
}

// HasDeliveryServiceId returns a boolean if a field has been set.
func (o *OutletDeliveryRuleDTO) HasDeliveryServiceId() bool {
	if o != nil && !IsNil(o.DeliveryServiceId) {
		return true
	}

	return false
}

// SetDeliveryServiceId gets a reference to the given int64 and assigns it to the DeliveryServiceId field.
func (o *OutletDeliveryRuleDTO) SetDeliveryServiceId(v int64) {
	o.DeliveryServiceId = &v
}

// GetOrderBefore returns the OrderBefore field value if set, zero value otherwise.
func (o *OutletDeliveryRuleDTO) GetOrderBefore() int32 {
	if o == nil || IsNil(o.OrderBefore) {
		var ret int32
		return ret
	}
	return *o.OrderBefore
}

// GetOrderBeforeOk returns a tuple with the OrderBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutletDeliveryRuleDTO) GetOrderBeforeOk() (*int32, bool) {
	if o == nil || IsNil(o.OrderBefore) {
		return nil, false
	}
	return o.OrderBefore, true
}

// HasOrderBefore returns a boolean if a field has been set.
func (o *OutletDeliveryRuleDTO) HasOrderBefore() bool {
	if o != nil && !IsNil(o.OrderBefore) {
		return true
	}

	return false
}

// SetOrderBefore gets a reference to the given int32 and assigns it to the OrderBefore field.
func (o *OutletDeliveryRuleDTO) SetOrderBefore(v int32) {
	o.OrderBefore = &v
}

// GetPriceFreePickup returns the PriceFreePickup field value if set, zero value otherwise.
func (o *OutletDeliveryRuleDTO) GetPriceFreePickup() float32 {
	if o == nil || IsNil(o.PriceFreePickup) {
		var ret float32
		return ret
	}
	return *o.PriceFreePickup
}

// GetPriceFreePickupOk returns a tuple with the PriceFreePickup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutletDeliveryRuleDTO) GetPriceFreePickupOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceFreePickup) {
		return nil, false
	}
	return o.PriceFreePickup, true
}

// HasPriceFreePickup returns a boolean if a field has been set.
func (o *OutletDeliveryRuleDTO) HasPriceFreePickup() bool {
	if o != nil && !IsNil(o.PriceFreePickup) {
		return true
	}

	return false
}

// SetPriceFreePickup gets a reference to the given float32 and assigns it to the PriceFreePickup field.
func (o *OutletDeliveryRuleDTO) SetPriceFreePickup(v float32) {
	o.PriceFreePickup = &v
}

// GetUnspecifiedDeliveryInterval returns the UnspecifiedDeliveryInterval field value if set, zero value otherwise.
func (o *OutletDeliveryRuleDTO) GetUnspecifiedDeliveryInterval() bool {
	if o == nil || IsNil(o.UnspecifiedDeliveryInterval) {
		var ret bool
		return ret
	}
	return *o.UnspecifiedDeliveryInterval
}

// GetUnspecifiedDeliveryIntervalOk returns a tuple with the UnspecifiedDeliveryInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutletDeliveryRuleDTO) GetUnspecifiedDeliveryIntervalOk() (*bool, bool) {
	if o == nil || IsNil(o.UnspecifiedDeliveryInterval) {
		return nil, false
	}
	return o.UnspecifiedDeliveryInterval, true
}

// HasUnspecifiedDeliveryInterval returns a boolean if a field has been set.
func (o *OutletDeliveryRuleDTO) HasUnspecifiedDeliveryInterval() bool {
	if o != nil && !IsNil(o.UnspecifiedDeliveryInterval) {
		return true
	}

	return false
}

// SetUnspecifiedDeliveryInterval gets a reference to the given bool and assigns it to the UnspecifiedDeliveryInterval field.
func (o *OutletDeliveryRuleDTO) SetUnspecifiedDeliveryInterval(v bool) {
	o.UnspecifiedDeliveryInterval = &v
}

func (o OutletDeliveryRuleDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutletDeliveryRuleDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinDeliveryDays) {
		toSerialize["minDeliveryDays"] = o.MinDeliveryDays
	}
	if !IsNil(o.MaxDeliveryDays) {
		toSerialize["maxDeliveryDays"] = o.MaxDeliveryDays
	}
	if !IsNil(o.DeliveryServiceId) {
		toSerialize["deliveryServiceId"] = o.DeliveryServiceId
	}
	if !IsNil(o.OrderBefore) {
		toSerialize["orderBefore"] = o.OrderBefore
	}
	if !IsNil(o.PriceFreePickup) {
		toSerialize["priceFreePickup"] = o.PriceFreePickup
	}
	if !IsNil(o.UnspecifiedDeliveryInterval) {
		toSerialize["unspecifiedDeliveryInterval"] = o.UnspecifiedDeliveryInterval
	}
	return toSerialize, nil
}

type NullableOutletDeliveryRuleDTO struct {
	value *OutletDeliveryRuleDTO
	isSet bool
}

func (v NullableOutletDeliveryRuleDTO) Get() *OutletDeliveryRuleDTO {
	return v.value
}

func (v *NullableOutletDeliveryRuleDTO) Set(val *OutletDeliveryRuleDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOutletDeliveryRuleDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOutletDeliveryRuleDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutletDeliveryRuleDTO(val *OutletDeliveryRuleDTO) *NullableOutletDeliveryRuleDTO {
	return &NullableOutletDeliveryRuleDTO{value: val, isSet: true}
}

func (v NullableOutletDeliveryRuleDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutletDeliveryRuleDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


