/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OfferCardRecommendationType Рекомендация по дополнению или замене контента. Не возвращается для карточек, которые заполнены Маркетом или содержат бывшие в употреблении товары.  Часть рекомендаций относятся к **основным параметрам**, которые есть у товаров любых категорий. Другие — к тем **характеристикам**, которые есть у товара потому, что он относится к определенной категории.  **1. Рекомендации, относящиеся к основным параметрам**  Каждая такая рекомендация относится к **единственному параметру**. Чтобы заполнить этот параметр, пользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  Рекомендации по заполнению параметров в `updateOfferMappings`:  * `RECOGNIZED_VENDOR` — напишите название производителя так, как его пишет сам производитель (параметр `vendor`). * `PICTURE_COUNT` — добавьте изображения (параметр `pictures`). [Требования](https://yandex.ru/support2/marketplace/ru/assortment/fields/images)    Для рекомендации приходит процент ее выполнения. * `FIRST_PICTURE_SIZE`— замените первое изображение более крупным (параметр `pictures`). [Требования](https://yandex.ru/support2/marketplace/ru/assortment/fields/images) * `TITLE_LENGTH` — измените название (параметр `name`). Составьте название по схеме: тип + бренд или производитель + модель + особенности, если есть (размер, вес, цвет). [Требования](https://yandex.ru/support2/marketplace/ru/assortment/fields/title) * `DESCRIPTION_LENGTH` — добавьте описание рекомендуемого размера (параметр `description`). [Требования](https://yandex.ru/support2/marketplace/ru/assortment/fields/description) * `AVERAGE_PICTURE_SIZE` — замените все изображения на изображения высокого качества (параметр `pictures`). [Требования](https://yandex.ru/support2/marketplace/ru/assortment/fields/images) * `FIRST_VIDEO_LENGTH` — добавьте первое видео рекомендуемой длины (параметр `videos`). [Требования](https://yandex.ru/support2/marketplace/ru/assortment/fields/video) * `FIRST_VIDEO_SIZE` — замените первое видео на видео высокого качества (параметр `videos`). [Требования](https://yandex.ru/support2/marketplace/ru/assortment/fields/video) * `AVERAGE_VIDEO_SIZE` — замените все видео на видео высокого качества (параметр `videos`). [Требования](https://yandex.ru/support2/marketplace/ru/assortment/fields/video) * `VIDEO_COUNT` — добавьте хотя бы одно видео (параметр `videos`). [Требования](https://yandex.ru/support2/marketplace/ru/assortment/fields/video)    Для рекомендации приходит процент ее выполнения.  **2. Рекомендации, относящиеся к характеристикам по категориям**  Каждая такая рекомендация предполагает заполнение **одной или нескольких характеристик**. Чтобы узнать, какие именно характеристики нужно заполнить, воспользуйтесь запросом [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md). Например, если вы получили рекомендацию `MAIN`, нужно заполнить характеристики, имеющие `MAIN` в массиве `recommendationTypes`.  Рекомендации:  * `MAIN` — заполните ключевые характеристики товара, которые используются в поиске и фильтрах.    Для рекомендации приходит процент ее выполнения. * `ADDITIONAL` — заполните дополнительные характеристики товара.    Для рекомендации приходит процент ее выполнения. * `DISTINCTIVE` — заполните характеристики, которыми отличаются друг от друга варианты товара.    Для рекомендации приходит процент ее выполнения.  **3. Устаревшие рекомендации**  * `HAS_VIDEO`. * `FILTERABLE`. * `HAS_DESCRIPTION`. * `HAS_BARCODE`. 
type OfferCardRecommendationType string

// List of OfferCardRecommendationType
const (
	HAS_VIDEO OfferCardRecommendationType = "HAS_VIDEO"
	RECOGNIZED_VENDOR OfferCardRecommendationType = "RECOGNIZED_VENDOR"
	MAIN OfferCardRecommendationType = "MAIN"
	ADDITIONAL OfferCardRecommendationType = "ADDITIONAL"
	DISTINCTIVE OfferCardRecommendationType = "DISTINCTIVE"
	FILTERABLE OfferCardRecommendationType = "FILTERABLE"
	PICTURE_COUNT OfferCardRecommendationType = "PICTURE_COUNT"
	HAS_DESCRIPTION OfferCardRecommendationType = "HAS_DESCRIPTION"
	HAS_BARCODE OfferCardRecommendationType = "HAS_BARCODE"
	FIRST_PICTURE_SIZE OfferCardRecommendationType = "FIRST_PICTURE_SIZE"
	TITLE_LENGTH OfferCardRecommendationType = "TITLE_LENGTH"
	DESCRIPTION_LENGTH OfferCardRecommendationType = "DESCRIPTION_LENGTH"
	AVERAGE_PICTURE_SIZE OfferCardRecommendationType = "AVERAGE_PICTURE_SIZE"
	FIRST_VIDEO_SIZE OfferCardRecommendationType = "FIRST_VIDEO_SIZE"
	FIRST_VIDEO_LENGTH OfferCardRecommendationType = "FIRST_VIDEO_LENGTH"
	AVERAGE_VIDEO_SIZE OfferCardRecommendationType = "AVERAGE_VIDEO_SIZE"
	VIDEO_COUNT OfferCardRecommendationType = "VIDEO_COUNT"
)

// All allowed values of OfferCardRecommendationType enum
var AllowedOfferCardRecommendationTypeEnumValues = []OfferCardRecommendationType{
	"HAS_VIDEO",
	"RECOGNIZED_VENDOR",
	"MAIN",
	"ADDITIONAL",
	"DISTINCTIVE",
	"FILTERABLE",
	"PICTURE_COUNT",
	"HAS_DESCRIPTION",
	"HAS_BARCODE",
	"FIRST_PICTURE_SIZE",
	"TITLE_LENGTH",
	"DESCRIPTION_LENGTH",
	"AVERAGE_PICTURE_SIZE",
	"FIRST_VIDEO_SIZE",
	"FIRST_VIDEO_LENGTH",
	"AVERAGE_VIDEO_SIZE",
	"VIDEO_COUNT",
}

func (v *OfferCardRecommendationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OfferCardRecommendationType(value)
	for _, existing := range AllowedOfferCardRecommendationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OfferCardRecommendationType", value)
}

// NewOfferCardRecommendationTypeFromValue returns a pointer to a valid OfferCardRecommendationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOfferCardRecommendationTypeFromValue(v string) (*OfferCardRecommendationType, error) {
	ev := OfferCardRecommendationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OfferCardRecommendationType: valid values are %v", v, AllowedOfferCardRecommendationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OfferCardRecommendationType) IsValid() bool {
	for _, existing := range AllowedOfferCardRecommendationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OfferCardRecommendationType value
func (v OfferCardRecommendationType) Ptr() *OfferCardRecommendationType {
	return &v
}

type NullableOfferCardRecommendationType struct {
	value *OfferCardRecommendationType
	isSet bool
}

func (v NullableOfferCardRecommendationType) Get() *OfferCardRecommendationType {
	return v.value
}

func (v *NullableOfferCardRecommendationType) Set(val *OfferCardRecommendationType) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferCardRecommendationType) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferCardRecommendationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferCardRecommendationType(val *OfferCardRecommendationType) *NullableOfferCardRecommendationType {
	return &NullableOfferCardRecommendationType{value: val, isSet: true}
}

func (v NullableOfferCardRecommendationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferCardRecommendationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

