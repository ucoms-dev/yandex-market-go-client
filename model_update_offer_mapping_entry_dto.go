/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateOfferMappingEntryDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateOfferMappingEntryDTO{}

// UpdateOfferMappingEntryDTO Список товаров.  В теле запроса можно передать от одного до 500 товаров.  Обязательный параметр. 
type UpdateOfferMappingEntryDTO struct {
	Mapping *OfferMappingDTO `json:"mapping,omitempty"`
	AwaitingModerationMapping *OfferMappingDTO `json:"awaitingModerationMapping,omitempty"`
	RejectedMapping *OfferMappingDTO `json:"rejectedMapping,omitempty"`
	Offer *UpdateMappingsOfferDTO `json:"offer,omitempty"`
}

// NewUpdateOfferMappingEntryDTO instantiates a new UpdateOfferMappingEntryDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateOfferMappingEntryDTO() *UpdateOfferMappingEntryDTO {
	this := UpdateOfferMappingEntryDTO{}
	return &this
}

// NewUpdateOfferMappingEntryDTOWithDefaults instantiates a new UpdateOfferMappingEntryDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateOfferMappingEntryDTOWithDefaults() *UpdateOfferMappingEntryDTO {
	this := UpdateOfferMappingEntryDTO{}
	return &this
}

// GetMapping returns the Mapping field value if set, zero value otherwise.
func (o *UpdateOfferMappingEntryDTO) GetMapping() OfferMappingDTO {
	if o == nil || IsNil(o.Mapping) {
		var ret OfferMappingDTO
		return ret
	}
	return *o.Mapping
}

// GetMappingOk returns a tuple with the Mapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferMappingEntryDTO) GetMappingOk() (*OfferMappingDTO, bool) {
	if o == nil || IsNil(o.Mapping) {
		return nil, false
	}
	return o.Mapping, true
}

// HasMapping returns a boolean if a field has been set.
func (o *UpdateOfferMappingEntryDTO) HasMapping() bool {
	if o != nil && !IsNil(o.Mapping) {
		return true
	}

	return false
}

// SetMapping gets a reference to the given OfferMappingDTO and assigns it to the Mapping field.
func (o *UpdateOfferMappingEntryDTO) SetMapping(v OfferMappingDTO) {
	o.Mapping = &v
}

// GetAwaitingModerationMapping returns the AwaitingModerationMapping field value if set, zero value otherwise.
func (o *UpdateOfferMappingEntryDTO) GetAwaitingModerationMapping() OfferMappingDTO {
	if o == nil || IsNil(o.AwaitingModerationMapping) {
		var ret OfferMappingDTO
		return ret
	}
	return *o.AwaitingModerationMapping
}

// GetAwaitingModerationMappingOk returns a tuple with the AwaitingModerationMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferMappingEntryDTO) GetAwaitingModerationMappingOk() (*OfferMappingDTO, bool) {
	if o == nil || IsNil(o.AwaitingModerationMapping) {
		return nil, false
	}
	return o.AwaitingModerationMapping, true
}

// HasAwaitingModerationMapping returns a boolean if a field has been set.
func (o *UpdateOfferMappingEntryDTO) HasAwaitingModerationMapping() bool {
	if o != nil && !IsNil(o.AwaitingModerationMapping) {
		return true
	}

	return false
}

// SetAwaitingModerationMapping gets a reference to the given OfferMappingDTO and assigns it to the AwaitingModerationMapping field.
func (o *UpdateOfferMappingEntryDTO) SetAwaitingModerationMapping(v OfferMappingDTO) {
	o.AwaitingModerationMapping = &v
}

// GetRejectedMapping returns the RejectedMapping field value if set, zero value otherwise.
func (o *UpdateOfferMappingEntryDTO) GetRejectedMapping() OfferMappingDTO {
	if o == nil || IsNil(o.RejectedMapping) {
		var ret OfferMappingDTO
		return ret
	}
	return *o.RejectedMapping
}

// GetRejectedMappingOk returns a tuple with the RejectedMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferMappingEntryDTO) GetRejectedMappingOk() (*OfferMappingDTO, bool) {
	if o == nil || IsNil(o.RejectedMapping) {
		return nil, false
	}
	return o.RejectedMapping, true
}

// HasRejectedMapping returns a boolean if a field has been set.
func (o *UpdateOfferMappingEntryDTO) HasRejectedMapping() bool {
	if o != nil && !IsNil(o.RejectedMapping) {
		return true
	}

	return false
}

// SetRejectedMapping gets a reference to the given OfferMappingDTO and assigns it to the RejectedMapping field.
func (o *UpdateOfferMappingEntryDTO) SetRejectedMapping(v OfferMappingDTO) {
	o.RejectedMapping = &v
}

// GetOffer returns the Offer field value if set, zero value otherwise.
func (o *UpdateOfferMappingEntryDTO) GetOffer() UpdateMappingsOfferDTO {
	if o == nil || IsNil(o.Offer) {
		var ret UpdateMappingsOfferDTO
		return ret
	}
	return *o.Offer
}

// GetOfferOk returns a tuple with the Offer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOfferMappingEntryDTO) GetOfferOk() (*UpdateMappingsOfferDTO, bool) {
	if o == nil || IsNil(o.Offer) {
		return nil, false
	}
	return o.Offer, true
}

// HasOffer returns a boolean if a field has been set.
func (o *UpdateOfferMappingEntryDTO) HasOffer() bool {
	if o != nil && !IsNil(o.Offer) {
		return true
	}

	return false
}

// SetOffer gets a reference to the given UpdateMappingsOfferDTO and assigns it to the Offer field.
func (o *UpdateOfferMappingEntryDTO) SetOffer(v UpdateMappingsOfferDTO) {
	o.Offer = &v
}

func (o UpdateOfferMappingEntryDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateOfferMappingEntryDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mapping) {
		toSerialize["mapping"] = o.Mapping
	}
	if !IsNil(o.AwaitingModerationMapping) {
		toSerialize["awaitingModerationMapping"] = o.AwaitingModerationMapping
	}
	if !IsNil(o.RejectedMapping) {
		toSerialize["rejectedMapping"] = o.RejectedMapping
	}
	if !IsNil(o.Offer) {
		toSerialize["offer"] = o.Offer
	}
	return toSerialize, nil
}

type NullableUpdateOfferMappingEntryDTO struct {
	value *UpdateOfferMappingEntryDTO
	isSet bool
}

func (v NullableUpdateOfferMappingEntryDTO) Get() *UpdateOfferMappingEntryDTO {
	return v.value
}

func (v *NullableUpdateOfferMappingEntryDTO) Set(val *UpdateOfferMappingEntryDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateOfferMappingEntryDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateOfferMappingEntryDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateOfferMappingEntryDTO(val *UpdateOfferMappingEntryDTO) *NullableUpdateOfferMappingEntryDTO {
	return &NullableUpdateOfferMappingEntryDTO{value: val, isSet: true}
}

func (v NullableUpdateOfferMappingEntryDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateOfferMappingEntryDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


