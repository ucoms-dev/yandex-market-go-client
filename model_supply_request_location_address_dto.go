/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SupplyRequestLocationAddressDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupplyRequestLocationAddressDTO{}

// SupplyRequestLocationAddressDTO Адрес склада или ПВЗ.
type SupplyRequestLocationAddressDTO struct {
	// Полный адрес склада или ПВЗ.
	FullAddress string `json:"fullAddress"`
	Gps         GpsDTO `json:"gps"`
}

type _SupplyRequestLocationAddressDTO SupplyRequestLocationAddressDTO

// NewSupplyRequestLocationAddressDTO instantiates a new SupplyRequestLocationAddressDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupplyRequestLocationAddressDTO(fullAddress string, gps GpsDTO) *SupplyRequestLocationAddressDTO {
	this := SupplyRequestLocationAddressDTO{}
	this.FullAddress = fullAddress
	this.Gps = gps
	return &this
}

// NewSupplyRequestLocationAddressDTOWithDefaults instantiates a new SupplyRequestLocationAddressDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupplyRequestLocationAddressDTOWithDefaults() *SupplyRequestLocationAddressDTO {
	this := SupplyRequestLocationAddressDTO{}
	return &this
}

// GetFullAddress returns the FullAddress field value
func (o *SupplyRequestLocationAddressDTO) GetFullAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullAddress
}

// GetFullAddressOk returns a tuple with the FullAddress field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestLocationAddressDTO) GetFullAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullAddress, true
}

// SetFullAddress sets field value
func (o *SupplyRequestLocationAddressDTO) SetFullAddress(v string) {
	o.FullAddress = v
}

// GetGps returns the Gps field value
func (o *SupplyRequestLocationAddressDTO) GetGps() GpsDTO {
	if o == nil {
		var ret GpsDTO
		return ret
	}

	return o.Gps
}

// GetGpsOk returns a tuple with the Gps field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestLocationAddressDTO) GetGpsOk() (*GpsDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gps, true
}

// SetGps sets field value
func (o *SupplyRequestLocationAddressDTO) SetGps(v GpsDTO) {
	o.Gps = v
}

func (o SupplyRequestLocationAddressDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupplyRequestLocationAddressDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fullAddress"] = o.FullAddress
	toSerialize["gps"] = o.Gps
	return toSerialize, nil
}

func (o *SupplyRequestLocationAddressDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fullAddress",
		"gps",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupplyRequestLocationAddressDTO := _SupplyRequestLocationAddressDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varSupplyRequestLocationAddressDTO)

	if err != nil {
		return err
	}

	*o = SupplyRequestLocationAddressDTO(varSupplyRequestLocationAddressDTO)

	return err
}

type NullableSupplyRequestLocationAddressDTO struct {
	value *SupplyRequestLocationAddressDTO
	isSet bool
}

func (v NullableSupplyRequestLocationAddressDTO) Get() *SupplyRequestLocationAddressDTO {
	return v.value
}

func (v *NullableSupplyRequestLocationAddressDTO) Set(val *SupplyRequestLocationAddressDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyRequestLocationAddressDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyRequestLocationAddressDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyRequestLocationAddressDTO(val *SupplyRequestLocationAddressDTO) *NullableSupplyRequestLocationAddressDTO {
	return &NullableSupplyRequestLocationAddressDTO{value: val, isSet: true}
}

func (v NullableSupplyRequestLocationAddressDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyRequestLocationAddressDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
