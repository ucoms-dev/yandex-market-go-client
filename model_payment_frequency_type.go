/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PaymentFrequencyType Частота выплат:  * `DAILY` — ежедневно. * `WEEKLY` — раз в неделю. * `BIWEEKLY` — раз в две недели. * `MONTHLY` — раз в месяц.  Подробнее о графике выплат читайте [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/introduction/rates/acquiring.html). 
type PaymentFrequencyType string

// List of PaymentFrequencyType
const (
	DAILY PaymentFrequencyType = "DAILY"
	WEEKLY PaymentFrequencyType = "WEEKLY"
	BIWEEKLY PaymentFrequencyType = "BIWEEKLY"
	MONTHLY PaymentFrequencyType = "MONTHLY"
)

// All allowed values of PaymentFrequencyType enum
var AllowedPaymentFrequencyTypeEnumValues = []PaymentFrequencyType{
	"DAILY",
	"WEEKLY",
	"BIWEEKLY",
	"MONTHLY",
}

func (v *PaymentFrequencyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentFrequencyType(value)
	for _, existing := range AllowedPaymentFrequencyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentFrequencyType", value)
}

// NewPaymentFrequencyTypeFromValue returns a pointer to a valid PaymentFrequencyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentFrequencyTypeFromValue(v string) (*PaymentFrequencyType, error) {
	ev := PaymentFrequencyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentFrequencyType: valid values are %v", v, AllowedPaymentFrequencyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentFrequencyType) IsValid() bool {
	for _, existing := range AllowedPaymentFrequencyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentFrequencyType value
func (v PaymentFrequencyType) Ptr() *PaymentFrequencyType {
	return &v
}

type NullablePaymentFrequencyType struct {
	value *PaymentFrequencyType
	isSet bool
}

func (v NullablePaymentFrequencyType) Get() *PaymentFrequencyType {
	return v.value
}

func (v *NullablePaymentFrequencyType) Set(val *PaymentFrequencyType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentFrequencyType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentFrequencyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentFrequencyType(val *PaymentFrequencyType) *NullablePaymentFrequencyType {
	return &NullablePaymentFrequencyType{value: val, isSet: true}
}

func (v NullablePaymentFrequencyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentFrequencyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

