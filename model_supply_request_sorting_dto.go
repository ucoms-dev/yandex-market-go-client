/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SupplyRequestSortingDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupplyRequestSortingDTO{}

// SupplyRequestSortingDTO Параметры сортировки.
type SupplyRequestSortingDTO struct {
	Direction SortOrderType                  `json:"direction"`
	Attribute SupplyRequestSortAttributeType `json:"attribute"`
}

type _SupplyRequestSortingDTO SupplyRequestSortingDTO

// NewSupplyRequestSortingDTO instantiates a new SupplyRequestSortingDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupplyRequestSortingDTO(direction SortOrderType, attribute SupplyRequestSortAttributeType) *SupplyRequestSortingDTO {
	this := SupplyRequestSortingDTO{}
	this.Direction = direction
	this.Attribute = attribute
	return &this
}

// NewSupplyRequestSortingDTOWithDefaults instantiates a new SupplyRequestSortingDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupplyRequestSortingDTOWithDefaults() *SupplyRequestSortingDTO {
	this := SupplyRequestSortingDTO{}
	return &this
}

// GetDirection returns the Direction field value
func (o *SupplyRequestSortingDTO) GetDirection() SortOrderType {
	if o == nil {
		var ret SortOrderType
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestSortingDTO) GetDirectionOk() (*SortOrderType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *SupplyRequestSortingDTO) SetDirection(v SortOrderType) {
	o.Direction = v
}

// GetAttribute returns the Attribute field value
func (o *SupplyRequestSortingDTO) GetAttribute() SupplyRequestSortAttributeType {
	if o == nil {
		var ret SupplyRequestSortAttributeType
		return ret
	}

	return o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value
// and a boolean to check if the value has been set.
func (o *SupplyRequestSortingDTO) GetAttributeOk() (*SupplyRequestSortAttributeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attribute, true
}

// SetAttribute sets field value
func (o *SupplyRequestSortingDTO) SetAttribute(v SupplyRequestSortAttributeType) {
	o.Attribute = v
}

func (o SupplyRequestSortingDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupplyRequestSortingDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["direction"] = o.Direction
	toSerialize["attribute"] = o.Attribute
	return toSerialize, nil
}

func (o *SupplyRequestSortingDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"direction",
		"attribute",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupplyRequestSortingDTO := _SupplyRequestSortingDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varSupplyRequestSortingDTO)

	if err != nil {
		return err
	}

	*o = SupplyRequestSortingDTO(varSupplyRequestSortingDTO)

	return err
}

type NullableSupplyRequestSortingDTO struct {
	value *SupplyRequestSortingDTO
	isSet bool
}

func (v NullableSupplyRequestSortingDTO) Get() *SupplyRequestSortingDTO {
	return v.value
}

func (v *NullableSupplyRequestSortingDTO) Set(val *SupplyRequestSortingDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyRequestSortingDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyRequestSortingDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyRequestSortingDTO(val *SupplyRequestSortingDTO) *NullableSupplyRequestSortingDTO {
	return &NullableSupplyRequestSortingDTO{value: val, isSet: true}
}

func (v NullableSupplyRequestSortingDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyRequestSortingDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
