/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WarehouseComponentType Свойства складов, которые необходимо вернуть:  * `ADDRESS` — адрес склада. * `STATUS` — статус склада.
type WarehouseComponentType string

// List of WarehouseComponentType
const (
	WarehouseComponentType_ADDRESS WarehouseComponentType = "ADDRESS"
	WarehouseComponentType_STATUS  WarehouseComponentType = "STATUS"
)

// All allowed values of WarehouseComponentType enum
var AllowedWarehouseComponentTypeEnumValues = []WarehouseComponentType{
	"ADDRESS",
	"STATUS",
}

func (v *WarehouseComponentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WarehouseComponentType(value)
	for _, existing := range AllowedWarehouseComponentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WarehouseComponentType", value)
}

// NewWarehouseComponentTypeFromValue returns a pointer to a valid WarehouseComponentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWarehouseComponentTypeFromValue(v string) (*WarehouseComponentType, error) {
	ev := WarehouseComponentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WarehouseComponentType: valid values are %v", v, AllowedWarehouseComponentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WarehouseComponentType) IsValid() bool {
	for _, existing := range AllowedWarehouseComponentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WarehouseComponentType value
func (v WarehouseComponentType) Ptr() *WarehouseComponentType {
	return &v
}

type NullableWarehouseComponentType struct {
	value *WarehouseComponentType
	isSet bool
}

func (v NullableWarehouseComponentType) Get() *WarehouseComponentType {
	return v.value
}

func (v *NullableWarehouseComponentType) Set(val *WarehouseComponentType) {
	v.value = val
	v.isSet = true
}

func (v NullableWarehouseComponentType) IsSet() bool {
	return v.isSet
}

func (v *NullableWarehouseComponentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarehouseComponentType(val *WarehouseComponentType) *NullableWarehouseComponentType {
	return &NullableWarehouseComponentType{value: val, isSet: true}
}

func (v NullableWarehouseComponentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarehouseComponentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
