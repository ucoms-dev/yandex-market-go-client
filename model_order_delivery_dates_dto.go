/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrderDeliveryDatesDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderDeliveryDatesDTO{}

// OrderDeliveryDatesDTO Диапазон дат доставки.
type OrderDeliveryDatesDTO struct {
	// Формат даты: `ДД-ММ-ГГГГ`. 
	FromDate string `json:"fromDate"`
	// Формат даты: `ДД-ММ-ГГГГ`. 
	ToDate *string `json:"toDate,omitempty"`
	// Начало интервала времени доставки.  Передается только совместно с параметром `type=DELIVERY`.  Формат времени: 24-часовой, `ЧЧ:ММ`. В качестве минут всегда должно быть указано `00` (исключение — `23:59`).  Минимальное значение: `00:00`. 
	FromTime *string `json:"fromTime,omitempty"`
	// Конец интервала времени доставки.  Передается только совместно с параметром `type=DELIVERY`.  Формат времени: 24-часовой, `ЧЧ:ММ`. В качестве минут всегда должно быть указано `00` (исключение — `23:59`).  Максимальное значение: `23:59`. 
	ToTime *string `json:"toTime,omitempty"`
	// Формат даты: `ДД-ММ-ГГГГ`. 
	RealDeliveryDate *string `json:"realDeliveryDate,omitempty"`
}

type _OrderDeliveryDatesDTO OrderDeliveryDatesDTO

// NewOrderDeliveryDatesDTO instantiates a new OrderDeliveryDatesDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderDeliveryDatesDTO(fromDate string) *OrderDeliveryDatesDTO {
	this := OrderDeliveryDatesDTO{}
	this.FromDate = fromDate
	return &this
}

// NewOrderDeliveryDatesDTOWithDefaults instantiates a new OrderDeliveryDatesDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderDeliveryDatesDTOWithDefaults() *OrderDeliveryDatesDTO {
	this := OrderDeliveryDatesDTO{}
	return &this
}

// GetFromDate returns the FromDate field value
func (o *OrderDeliveryDatesDTO) GetFromDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDatesDTO) GetFromDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromDate, true
}

// SetFromDate sets field value
func (o *OrderDeliveryDatesDTO) SetFromDate(v string) {
	o.FromDate = v
}

// GetToDate returns the ToDate field value if set, zero value otherwise.
func (o *OrderDeliveryDatesDTO) GetToDate() string {
	if o == nil || IsNil(o.ToDate) {
		var ret string
		return ret
	}
	return *o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDatesDTO) GetToDateOk() (*string, bool) {
	if o == nil || IsNil(o.ToDate) {
		return nil, false
	}
	return o.ToDate, true
}

// HasToDate returns a boolean if a field has been set.
func (o *OrderDeliveryDatesDTO) HasToDate() bool {
	if o != nil && !IsNil(o.ToDate) {
		return true
	}

	return false
}

// SetToDate gets a reference to the given string and assigns it to the ToDate field.
func (o *OrderDeliveryDatesDTO) SetToDate(v string) {
	o.ToDate = &v
}

// GetFromTime returns the FromTime field value if set, zero value otherwise.
func (o *OrderDeliveryDatesDTO) GetFromTime() string {
	if o == nil || IsNil(o.FromTime) {
		var ret string
		return ret
	}
	return *o.FromTime
}

// GetFromTimeOk returns a tuple with the FromTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDatesDTO) GetFromTimeOk() (*string, bool) {
	if o == nil || IsNil(o.FromTime) {
		return nil, false
	}
	return o.FromTime, true
}

// HasFromTime returns a boolean if a field has been set.
func (o *OrderDeliveryDatesDTO) HasFromTime() bool {
	if o != nil && !IsNil(o.FromTime) {
		return true
	}

	return false
}

// SetFromTime gets a reference to the given string and assigns it to the FromTime field.
func (o *OrderDeliveryDatesDTO) SetFromTime(v string) {
	o.FromTime = &v
}

// GetToTime returns the ToTime field value if set, zero value otherwise.
func (o *OrderDeliveryDatesDTO) GetToTime() string {
	if o == nil || IsNil(o.ToTime) {
		var ret string
		return ret
	}
	return *o.ToTime
}

// GetToTimeOk returns a tuple with the ToTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDatesDTO) GetToTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ToTime) {
		return nil, false
	}
	return o.ToTime, true
}

// HasToTime returns a boolean if a field has been set.
func (o *OrderDeliveryDatesDTO) HasToTime() bool {
	if o != nil && !IsNil(o.ToTime) {
		return true
	}

	return false
}

// SetToTime gets a reference to the given string and assigns it to the ToTime field.
func (o *OrderDeliveryDatesDTO) SetToTime(v string) {
	o.ToTime = &v
}

// GetRealDeliveryDate returns the RealDeliveryDate field value if set, zero value otherwise.
func (o *OrderDeliveryDatesDTO) GetRealDeliveryDate() string {
	if o == nil || IsNil(o.RealDeliveryDate) {
		var ret string
		return ret
	}
	return *o.RealDeliveryDate
}

// GetRealDeliveryDateOk returns a tuple with the RealDeliveryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDatesDTO) GetRealDeliveryDateOk() (*string, bool) {
	if o == nil || IsNil(o.RealDeliveryDate) {
		return nil, false
	}
	return o.RealDeliveryDate, true
}

// HasRealDeliveryDate returns a boolean if a field has been set.
func (o *OrderDeliveryDatesDTO) HasRealDeliveryDate() bool {
	if o != nil && !IsNil(o.RealDeliveryDate) {
		return true
	}

	return false
}

// SetRealDeliveryDate gets a reference to the given string and assigns it to the RealDeliveryDate field.
func (o *OrderDeliveryDatesDTO) SetRealDeliveryDate(v string) {
	o.RealDeliveryDate = &v
}

func (o OrderDeliveryDatesDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderDeliveryDatesDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fromDate"] = o.FromDate
	if !IsNil(o.ToDate) {
		toSerialize["toDate"] = o.ToDate
	}
	if !IsNil(o.FromTime) {
		toSerialize["fromTime"] = o.FromTime
	}
	if !IsNil(o.ToTime) {
		toSerialize["toTime"] = o.ToTime
	}
	if !IsNil(o.RealDeliveryDate) {
		toSerialize["realDeliveryDate"] = o.RealDeliveryDate
	}
	return toSerialize, nil
}

func (o *OrderDeliveryDatesDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fromDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderDeliveryDatesDTO := _OrderDeliveryDatesDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrderDeliveryDatesDTO)

	if err != nil {
		return err
	}

	*o = OrderDeliveryDatesDTO(varOrderDeliveryDatesDTO)

	return err
}

type NullableOrderDeliveryDatesDTO struct {
	value *OrderDeliveryDatesDTO
	isSet bool
}

func (v NullableOrderDeliveryDatesDTO) Get() *OrderDeliveryDatesDTO {
	return v.value
}

func (v *NullableOrderDeliveryDatesDTO) Set(val *OrderDeliveryDatesDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDeliveryDatesDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDeliveryDatesDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDeliveryDatesDTO(val *OrderDeliveryDatesDTO) *NullableOrderDeliveryDatesDTO {
	return &NullableOrderDeliveryDatesDTO{value: val, isSet: true}
}

func (v NullableOrderDeliveryDatesDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDeliveryDatesDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


