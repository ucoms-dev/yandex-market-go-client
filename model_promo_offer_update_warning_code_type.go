/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PromoOfferUpdateWarningCodeType Предупреждение, которое появилось при добавлении товара:  * `DEEP_DISCOUNT_OFFER` — большая разница с ценой в каталоге. Проверьте, нет ли ошибки.  * `CATALOG_PRICE_IS_LOWER_THAN_PROMO` — цена, которая действует во всех магазинах, ниже цены по акции. У товара не будет отображаться цена по акции.  * `SHOP_PRICES_ARE_LOWER_THAN_PROMO` — цена в отдельном магазине ниже цены по акции. У товара в акции будет отображаться цена в магазине. Для остальных магазинов будет действовать цена по акции.  * `PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE` — в отдельном магазине цена с учетом промокода выше максимально возможной цены. Товар не будет участвовать в акции.  * `SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO` — товар в отдельном магазине не подходит под условия акции.
type PromoOfferUpdateWarningCodeType string

// List of PromoOfferUpdateWarningCodeType
const (
	PromoOfferUpdateWarningCodeType_DEEP_DISCOUNT_OFFER                      PromoOfferUpdateWarningCodeType = "DEEP_DISCOUNT_OFFER"
	PromoOfferUpdateWarningCodeType_CATALOG_PRICE_IS_LOWER_THAN_PROMO        PromoOfferUpdateWarningCodeType = "CATALOG_PRICE_IS_LOWER_THAN_PROMO"
	PromoOfferUpdateWarningCodeType_SHOP_PRICES_ARE_LOWER_THAN_PROMO         PromoOfferUpdateWarningCodeType = "SHOP_PRICES_ARE_LOWER_THAN_PROMO"
	PromoOfferUpdateWarningCodeType_PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE PromoOfferUpdateWarningCodeType = "PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE"
	PromoOfferUpdateWarningCodeType_SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO        PromoOfferUpdateWarningCodeType = "SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO"
)

// All allowed values of PromoOfferUpdateWarningCodeType enum
var AllowedPromoOfferUpdateWarningCodeTypeEnumValues = []PromoOfferUpdateWarningCodeType{
	"DEEP_DISCOUNT_OFFER",
	"CATALOG_PRICE_IS_LOWER_THAN_PROMO",
	"SHOP_PRICES_ARE_LOWER_THAN_PROMO",
	"PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE",
	"SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO",
}

func (v *PromoOfferUpdateWarningCodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PromoOfferUpdateWarningCodeType(value)
	for _, existing := range AllowedPromoOfferUpdateWarningCodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PromoOfferUpdateWarningCodeType", value)
}

// NewPromoOfferUpdateWarningCodeTypeFromValue returns a pointer to a valid PromoOfferUpdateWarningCodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPromoOfferUpdateWarningCodeTypeFromValue(v string) (*PromoOfferUpdateWarningCodeType, error) {
	ev := PromoOfferUpdateWarningCodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PromoOfferUpdateWarningCodeType: valid values are %v", v, AllowedPromoOfferUpdateWarningCodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PromoOfferUpdateWarningCodeType) IsValid() bool {
	for _, existing := range AllowedPromoOfferUpdateWarningCodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PromoOfferUpdateWarningCodeType value
func (v PromoOfferUpdateWarningCodeType) Ptr() *PromoOfferUpdateWarningCodeType {
	return &v
}

type NullablePromoOfferUpdateWarningCodeType struct {
	value *PromoOfferUpdateWarningCodeType
	isSet bool
}

func (v NullablePromoOfferUpdateWarningCodeType) Get() *PromoOfferUpdateWarningCodeType {
	return v.value
}

func (v *NullablePromoOfferUpdateWarningCodeType) Set(val *PromoOfferUpdateWarningCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullablePromoOfferUpdateWarningCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullablePromoOfferUpdateWarningCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromoOfferUpdateWarningCodeType(val *PromoOfferUpdateWarningCodeType) *NullablePromoOfferUpdateWarningCodeType {
	return &NullablePromoOfferUpdateWarningCodeType{value: val, isSet: true}
}

func (v NullablePromoOfferUpdateWarningCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromoOfferUpdateWarningCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
