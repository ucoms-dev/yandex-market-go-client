/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReturnItemDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReturnItemDTO{}

// ReturnItemDTO Список товаров в невыкупе или возврате.
type ReturnItemDTO struct {
	// SKU на Маркете.
	MarketSku *int64 `json:"marketSku,omitempty"`
	// Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
	ShopSku string `json:"shopSku" validate:"regexp=^(?=.*\\\\S.*)[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`
	// Количество единиц товара.
	Count int64 `json:"count"`
	// Список решений по возврату.
	Decisions []ReturnDecisionDTO `json:"decisions,omitempty"`
	// Список логистических позиций возврата.
	Instances []ReturnInstanceDTO `json:"instances,omitempty"`
	// Список трек-кодов для почтовых отправлений.
	Tracks []TrackDTO `json:"tracks,omitempty"`
}

type _ReturnItemDTO ReturnItemDTO

// NewReturnItemDTO instantiates a new ReturnItemDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReturnItemDTO(shopSku string, count int64) *ReturnItemDTO {
	this := ReturnItemDTO{}
	this.ShopSku = shopSku
	this.Count = count
	return &this
}

// NewReturnItemDTOWithDefaults instantiates a new ReturnItemDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReturnItemDTOWithDefaults() *ReturnItemDTO {
	this := ReturnItemDTO{}
	return &this
}

// GetMarketSku returns the MarketSku field value if set, zero value otherwise.
func (o *ReturnItemDTO) GetMarketSku() int64 {
	if o == nil || IsNil(o.MarketSku) {
		var ret int64
		return ret
	}
	return *o.MarketSku
}

// GetMarketSkuOk returns a tuple with the MarketSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnItemDTO) GetMarketSkuOk() (*int64, bool) {
	if o == nil || IsNil(o.MarketSku) {
		return nil, false
	}
	return o.MarketSku, true
}

// HasMarketSku returns a boolean if a field has been set.
func (o *ReturnItemDTO) HasMarketSku() bool {
	if o != nil && !IsNil(o.MarketSku) {
		return true
	}

	return false
}

// SetMarketSku gets a reference to the given int64 and assigns it to the MarketSku field.
func (o *ReturnItemDTO) SetMarketSku(v int64) {
	o.MarketSku = &v
}

// GetShopSku returns the ShopSku field value
func (o *ReturnItemDTO) GetShopSku() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShopSku
}

// GetShopSkuOk returns a tuple with the ShopSku field value
// and a boolean to check if the value has been set.
func (o *ReturnItemDTO) GetShopSkuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShopSku, true
}

// SetShopSku sets field value
func (o *ReturnItemDTO) SetShopSku(v string) {
	o.ShopSku = v
}

// GetCount returns the Count field value
func (o *ReturnItemDTO) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ReturnItemDTO) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ReturnItemDTO) SetCount(v int64) {
	o.Count = v
}

// GetDecisions returns the Decisions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReturnItemDTO) GetDecisions() []ReturnDecisionDTO {
	if o == nil {
		var ret []ReturnDecisionDTO
		return ret
	}
	return o.Decisions
}

// GetDecisionsOk returns a tuple with the Decisions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReturnItemDTO) GetDecisionsOk() ([]ReturnDecisionDTO, bool) {
	if o == nil || IsNil(o.Decisions) {
		return nil, false
	}
	return o.Decisions, true
}

// HasDecisions returns a boolean if a field has been set.
func (o *ReturnItemDTO) HasDecisions() bool {
	if o != nil && !IsNil(o.Decisions) {
		return true
	}

	return false
}

// SetDecisions gets a reference to the given []ReturnDecisionDTO and assigns it to the Decisions field.
func (o *ReturnItemDTO) SetDecisions(v []ReturnDecisionDTO) {
	o.Decisions = v
}

// GetInstances returns the Instances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReturnItemDTO) GetInstances() []ReturnInstanceDTO {
	if o == nil {
		var ret []ReturnInstanceDTO
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReturnItemDTO) GetInstancesOk() ([]ReturnInstanceDTO, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *ReturnItemDTO) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []ReturnInstanceDTO and assigns it to the Instances field.
func (o *ReturnItemDTO) SetInstances(v []ReturnInstanceDTO) {
	o.Instances = v
}

// GetTracks returns the Tracks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReturnItemDTO) GetTracks() []TrackDTO {
	if o == nil {
		var ret []TrackDTO
		return ret
	}
	return o.Tracks
}

// GetTracksOk returns a tuple with the Tracks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReturnItemDTO) GetTracksOk() ([]TrackDTO, bool) {
	if o == nil || IsNil(o.Tracks) {
		return nil, false
	}
	return o.Tracks, true
}

// HasTracks returns a boolean if a field has been set.
func (o *ReturnItemDTO) HasTracks() bool {
	if o != nil && !IsNil(o.Tracks) {
		return true
	}

	return false
}

// SetTracks gets a reference to the given []TrackDTO and assigns it to the Tracks field.
func (o *ReturnItemDTO) SetTracks(v []TrackDTO) {
	o.Tracks = v
}

func (o ReturnItemDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReturnItemDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MarketSku) {
		toSerialize["marketSku"] = o.MarketSku
	}
	toSerialize["shopSku"] = o.ShopSku
	toSerialize["count"] = o.Count
	if o.Decisions != nil {
		toSerialize["decisions"] = o.Decisions
	}
	if o.Instances != nil {
		toSerialize["instances"] = o.Instances
	}
	if o.Tracks != nil {
		toSerialize["tracks"] = o.Tracks
	}
	return toSerialize, nil
}

func (o *ReturnItemDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"shopSku",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReturnItemDTO := _ReturnItemDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReturnItemDTO)

	if err != nil {
		return err
	}

	*o = ReturnItemDTO(varReturnItemDTO)

	return err
}

type NullableReturnItemDTO struct {
	value *ReturnItemDTO
	isSet bool
}

func (v NullableReturnItemDTO) Get() *ReturnItemDTO {
	return v.value
}

func (v *NullableReturnItemDTO) Set(val *ReturnItemDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnItemDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnItemDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnItemDTO(val *ReturnItemDTO) *NullableReturnItemDTO {
	return &NullableReturnItemDTO{value: val, isSet: true}
}

func (v NullableReturnItemDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnItemDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


