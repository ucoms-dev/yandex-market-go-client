/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// LanguageType Язык:  * `RU` — русский.  * `EN` — английский. 
type LanguageType string

// List of LanguageType
const (
	RU LanguageType = "RU"
	EN LanguageType = "EN"
)

// All allowed values of LanguageType enum
var AllowedLanguageTypeEnumValues = []LanguageType{
	"RU",
	"EN",
}

func (v *LanguageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LanguageType(value)
	for _, existing := range AllowedLanguageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LanguageType", value)
}

// NewLanguageTypeFromValue returns a pointer to a valid LanguageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLanguageTypeFromValue(v string) (*LanguageType, error) {
	ev := LanguageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LanguageType: valid values are %v", v, AllowedLanguageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LanguageType) IsValid() bool {
	for _, existing := range AllowedLanguageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LanguageType value
func (v LanguageType) Ptr() *LanguageType {
	return &v
}

type NullableLanguageType struct {
	value *LanguageType
	isSet bool
}

func (v NullableLanguageType) Get() *LanguageType {
	return v.value
}

func (v *NullableLanguageType) Set(val *LanguageType) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageType) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageType(val *LanguageType) *NullableLanguageType {
	return &NullableLanguageType{value: val, isSet: true}
}

func (v NullableLanguageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

