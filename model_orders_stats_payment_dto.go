/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrdersStatsPaymentDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrdersStatsPaymentDTO{}

// OrdersStatsPaymentDTO Информация о денежных переводах по заказу.
type OrdersStatsPaymentDTO struct {
	// Идентификатор денежного перевода.
	Id *string `json:"id,omitempty"`
	// Дата денежного перевода.  Формат даты: `ГГГГ-ММ-ДД`.
	Date   *string                       `json:"date,omitempty"`
	Type   *OrdersStatsPaymentType       `json:"type,omitempty"`
	Source *OrdersStatsPaymentSourceType `json:"source,omitempty"`
	// Сумма денежного перевода.  Точность — два знака после запятой.
	Total        *float32                    `json:"total,omitempty"`
	PaymentOrder *OrdersStatsPaymentOrderDTO `json:"paymentOrder,omitempty"`
}

// NewOrdersStatsPaymentDTO instantiates a new OrdersStatsPaymentDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrdersStatsPaymentDTO() *OrdersStatsPaymentDTO {
	this := OrdersStatsPaymentDTO{}
	return &this
}

// NewOrdersStatsPaymentDTOWithDefaults instantiates a new OrdersStatsPaymentDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrdersStatsPaymentDTOWithDefaults() *OrdersStatsPaymentDTO {
	this := OrdersStatsPaymentDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrdersStatsPaymentDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersStatsPaymentDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrdersStatsPaymentDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrdersStatsPaymentDTO) SetId(v string) {
	o.Id = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *OrdersStatsPaymentDTO) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersStatsPaymentDTO) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *OrdersStatsPaymentDTO) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *OrdersStatsPaymentDTO) SetDate(v string) {
	o.Date = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OrdersStatsPaymentDTO) GetType() OrdersStatsPaymentType {
	if o == nil || IsNil(o.Type) {
		var ret OrdersStatsPaymentType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersStatsPaymentDTO) GetTypeOk() (*OrdersStatsPaymentType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OrdersStatsPaymentDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given OrdersStatsPaymentType and assigns it to the Type field.
func (o *OrdersStatsPaymentDTO) SetType(v OrdersStatsPaymentType) {
	o.Type = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *OrdersStatsPaymentDTO) GetSource() OrdersStatsPaymentSourceType {
	if o == nil || IsNil(o.Source) {
		var ret OrdersStatsPaymentSourceType
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersStatsPaymentDTO) GetSourceOk() (*OrdersStatsPaymentSourceType, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *OrdersStatsPaymentDTO) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given OrdersStatsPaymentSourceType and assigns it to the Source field.
func (o *OrdersStatsPaymentDTO) SetSource(v OrdersStatsPaymentSourceType) {
	o.Source = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *OrdersStatsPaymentDTO) GetTotal() float32 {
	if o == nil || IsNil(o.Total) {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersStatsPaymentDTO) GetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *OrdersStatsPaymentDTO) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *OrdersStatsPaymentDTO) SetTotal(v float32) {
	o.Total = &v
}

// GetPaymentOrder returns the PaymentOrder field value if set, zero value otherwise.
func (o *OrdersStatsPaymentDTO) GetPaymentOrder() OrdersStatsPaymentOrderDTO {
	if o == nil || IsNil(o.PaymentOrder) {
		var ret OrdersStatsPaymentOrderDTO
		return ret
	}
	return *o.PaymentOrder
}

// GetPaymentOrderOk returns a tuple with the PaymentOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersStatsPaymentDTO) GetPaymentOrderOk() (*OrdersStatsPaymentOrderDTO, bool) {
	if o == nil || IsNil(o.PaymentOrder) {
		return nil, false
	}
	return o.PaymentOrder, true
}

// HasPaymentOrder returns a boolean if a field has been set.
func (o *OrdersStatsPaymentDTO) HasPaymentOrder() bool {
	if o != nil && !IsNil(o.PaymentOrder) {
		return true
	}

	return false
}

// SetPaymentOrder gets a reference to the given OrdersStatsPaymentOrderDTO and assigns it to the PaymentOrder field.
func (o *OrdersStatsPaymentDTO) SetPaymentOrder(v OrdersStatsPaymentOrderDTO) {
	o.PaymentOrder = &v
}

func (o OrdersStatsPaymentDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrdersStatsPaymentDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.PaymentOrder) {
		toSerialize["paymentOrder"] = o.PaymentOrder
	}
	return toSerialize, nil
}

type NullableOrdersStatsPaymentDTO struct {
	value *OrdersStatsPaymentDTO
	isSet bool
}

func (v NullableOrdersStatsPaymentDTO) Get() *OrdersStatsPaymentDTO {
	return v.value
}

func (v *NullableOrdersStatsPaymentDTO) Set(val *OrdersStatsPaymentDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersStatsPaymentDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersStatsPaymentDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersStatsPaymentDTO(val *OrdersStatsPaymentDTO) *NullableOrdersStatsPaymentDTO {
	return &NullableOrdersStatsPaymentDTO{value: val, isSet: true}
}

func (v NullableOrdersStatsPaymentDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersStatsPaymentDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
