/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrdersStatsCommissionType Услуга:  * `FEE` — размещение товара на Маркете. * `FULFILLMENT` — складская обработка. Не возвращается с 1 января 2024 года. * `LOYALTY_PARTICIPATION_FEE` — участие в программе лояльности и отзывы за баллы. * `AUCTION_PROMOTION` — буст продаж с оплатой за продажи. * `INSTALLMENT` — рассрочка. Не возвращается с 24 февраля 2022 года. * `DELIVERY_TO_CUSTOMER` — доставка покупателю (FBY, FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * `EXPRESS_DELIVERY_TO_CUSTOMER` — экспресс-доставка покупателю (Экспресс). * `AGENCY` — прием платежа покупателя. * `PAYMENT_TRANSFER` — перевод платежа покупателя. * `RETURNED_ORDERS_STORAGE` — хранение невыкупов и возвратов (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * `SORTING` — обработка заказа (FBS). * `INTAKE_SORTING` — организация забора заказов со склада продавца (FBS). * `RETURN_PROCESSING` — обработка заказов на складе (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * `ILLIQUID_GOODS_SALE` — вознаграждение за продажу невывезенных товаров. 
type OrdersStatsCommissionType string

// List of OrdersStatsCommissionType
const (
	FEE OrdersStatsCommissionType = "FEE"
	FULFILLMENT OrdersStatsCommissionType = "FULFILLMENT"
	LOYALTY_PARTICIPATION_FEE OrdersStatsCommissionType = "LOYALTY_PARTICIPATION_FEE"
	AUCTION_PROMOTION OrdersStatsCommissionType = "AUCTION_PROMOTION"
	INSTALLMENT OrdersStatsCommissionType = "INSTALLMENT"
	DELIVERY_TO_CUSTOMER OrdersStatsCommissionType = "DELIVERY_TO_CUSTOMER"
	EXPRESS_DELIVERY_TO_CUSTOMER OrdersStatsCommissionType = "EXPRESS_DELIVERY_TO_CUSTOMER"
	AGENCY OrdersStatsCommissionType = "AGENCY"
	PAYMENT_TRANSFER OrdersStatsCommissionType = "PAYMENT_TRANSFER"
	RETURNED_ORDERS_STORAGE OrdersStatsCommissionType = "RETURNED_ORDERS_STORAGE"
	SORTING OrdersStatsCommissionType = "SORTING"
	INTAKE_SORTING OrdersStatsCommissionType = "INTAKE_SORTING"
	RETURN_PROCESSING OrdersStatsCommissionType = "RETURN_PROCESSING"
	ILLIQUID_GOODS_SALE OrdersStatsCommissionType = "ILLIQUID_GOODS_SALE"
)

// All allowed values of OrdersStatsCommissionType enum
var AllowedOrdersStatsCommissionTypeEnumValues = []OrdersStatsCommissionType{
	"FEE",
	"FULFILLMENT",
	"LOYALTY_PARTICIPATION_FEE",
	"AUCTION_PROMOTION",
	"INSTALLMENT",
	"DELIVERY_TO_CUSTOMER",
	"EXPRESS_DELIVERY_TO_CUSTOMER",
	"AGENCY",
	"PAYMENT_TRANSFER",
	"RETURNED_ORDERS_STORAGE",
	"SORTING",
	"INTAKE_SORTING",
	"RETURN_PROCESSING",
	"ILLIQUID_GOODS_SALE",
}

func (v *OrdersStatsCommissionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrdersStatsCommissionType(value)
	for _, existing := range AllowedOrdersStatsCommissionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrdersStatsCommissionType", value)
}

// NewOrdersStatsCommissionTypeFromValue returns a pointer to a valid OrdersStatsCommissionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersStatsCommissionTypeFromValue(v string) (*OrdersStatsCommissionType, error) {
	ev := OrdersStatsCommissionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrdersStatsCommissionType: valid values are %v", v, AllowedOrdersStatsCommissionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersStatsCommissionType) IsValid() bool {
	for _, existing := range AllowedOrdersStatsCommissionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrdersStatsCommissionType value
func (v OrdersStatsCommissionType) Ptr() *OrdersStatsCommissionType {
	return &v
}

type NullableOrdersStatsCommissionType struct {
	value *OrdersStatsCommissionType
	isSet bool
}

func (v NullableOrdersStatsCommissionType) Get() *OrdersStatsCommissionType {
	return v.value
}

func (v *NullableOrdersStatsCommissionType) Set(val *OrdersStatsCommissionType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersStatsCommissionType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersStatsCommissionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersStatsCommissionType(val *OrdersStatsCommissionType) *NullableOrdersStatsCommissionType {
	return &NullableOrdersStatsCommissionType{value: val, isSet: true}
}

func (v NullableOrdersStatsCommissionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersStatsCommissionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

