/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrderTrackDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderTrackDTO{}

// OrderTrackDTO Информация о трек-номере посылки (DBS).
type OrderTrackDTO struct {
	// Трек‑номер посылки.
	TrackCode *string `json:"trackCode,omitempty"`
	// Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
	DeliveryServiceId int64 `json:"deliveryServiceId"`
}

type _OrderTrackDTO OrderTrackDTO

// NewOrderTrackDTO instantiates a new OrderTrackDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderTrackDTO(deliveryServiceId int64) *OrderTrackDTO {
	this := OrderTrackDTO{}
	this.DeliveryServiceId = deliveryServiceId
	return &this
}

// NewOrderTrackDTOWithDefaults instantiates a new OrderTrackDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderTrackDTOWithDefaults() *OrderTrackDTO {
	this := OrderTrackDTO{}
	return &this
}

// GetTrackCode returns the TrackCode field value if set, zero value otherwise.
func (o *OrderTrackDTO) GetTrackCode() string {
	if o == nil || IsNil(o.TrackCode) {
		var ret string
		return ret
	}
	return *o.TrackCode
}

// GetTrackCodeOk returns a tuple with the TrackCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderTrackDTO) GetTrackCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TrackCode) {
		return nil, false
	}
	return o.TrackCode, true
}

// HasTrackCode returns a boolean if a field has been set.
func (o *OrderTrackDTO) HasTrackCode() bool {
	if o != nil && !IsNil(o.TrackCode) {
		return true
	}

	return false
}

// SetTrackCode gets a reference to the given string and assigns it to the TrackCode field.
func (o *OrderTrackDTO) SetTrackCode(v string) {
	o.TrackCode = &v
}

// GetDeliveryServiceId returns the DeliveryServiceId field value
func (o *OrderTrackDTO) GetDeliveryServiceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DeliveryServiceId
}

// GetDeliveryServiceIdOk returns a tuple with the DeliveryServiceId field value
// and a boolean to check if the value has been set.
func (o *OrderTrackDTO) GetDeliveryServiceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeliveryServiceId, true
}

// SetDeliveryServiceId sets field value
func (o *OrderTrackDTO) SetDeliveryServiceId(v int64) {
	o.DeliveryServiceId = v
}

func (o OrderTrackDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderTrackDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrackCode) {
		toSerialize["trackCode"] = o.TrackCode
	}
	toSerialize["deliveryServiceId"] = o.DeliveryServiceId
	return toSerialize, nil
}

func (o *OrderTrackDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deliveryServiceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderTrackDTO := _OrderTrackDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrderTrackDTO)

	if err != nil {
		return err
	}

	*o = OrderTrackDTO(varOrderTrackDTO)

	return err
}

type NullableOrderTrackDTO struct {
	value *OrderTrackDTO
	isSet bool
}

func (v NullableOrderTrackDTO) Get() *OrderTrackDTO {
	return v.value
}

func (v *NullableOrderTrackDTO) Set(val *OrderTrackDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderTrackDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderTrackDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderTrackDTO(val *OrderTrackDTO) *NullableOrderTrackDTO {
	return &NullableOrderTrackDTO{value: val, isSet: true}
}

func (v NullableOrderTrackDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderTrackDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


